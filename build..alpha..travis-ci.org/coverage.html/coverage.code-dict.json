{"/home/travis/build/npmtest/node-npmtest-sweet.js/test.js":"/* istanbul instrument in package npmtest_sweet_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sweet.js/lib.npmtest_sweet.js.js":"/* istanbul instrument in package npmtest_sweet_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sweet_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sweet_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sweet.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sweet.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sweet_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sweet_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sweet_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_sweet_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sweet_js.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_sweet_js.__dirname +\n                    '/lib.npmtest_sweet_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/debug-test262.js":"'use strict';\n/*\nThis file makes debugging sweet.js easier. Uses the built version of sweet.js\nto compile 'test.js'. You can use node-inspector to step through the expansion\nprocess:\n\n\tnpm install -g node-inspector\n\tnode-debug debug.js\n*/\n\nrequire('babel-register');\nvar compile = require('./src/sweet-loader.js').default;\nlet fs = require('fs');\n\ndebugger;\n\nconst PARSER_TEST_DIR = './test/test262-parser-tests';\n\nlet pass = fs.readdirSync(`${PARSER_TEST_DIR}/pass`);\nlet fail = fs.readdirSync(`${PARSER_TEST_DIR}/fail`);\n\n// TODO: make these pass\nconst passExcluded = [\n  '1012.script.js',\n  '1051.module.js',\n  '1052.module.js',\n  '1053.module.js',\n  '1054.module.js',\n  '1055.module.js',\n  '1056.module.js',\n  '1057.module.js',\n  '1058.module.js',\n  '1059.module.js',\n  '106.script.js',\n  '1060.module.js',\n  '1061.module.js',\n  '1062.module.js',\n  '1063.module.js',\n  '1064.module.js',\n  '1065.module.js',\n  '1066.module.js',\n  '1067.module.js',\n  '1068.module.js',\n  '1069.module.js',\n  '1070.module.js',\n  '1073.script.js',\n  '1074.script.js',\n  '1077.script.js',\n  '1116.module.js',\n  '1117.module.js',\n  '1118.module.js',\n  '1119.module.js',\n  '1120.module.js',\n  '1121.module.js',\n  '1122.module.js',\n  '1123.module.js',\n  '1124.module.js',\n  '1125.module.js',\n  '1126.module.js',\n  '1127.module.js',\n  '1128.script.js',\n  '1129.script.js',\n  '1130.script.js',\n  '1131.script.js',\n  '1138.script.js',\n  '1166.script.js',\n  '117.script.js',\n  '1202.script.js',\n  '1239.script.js',\n  '1240.script.js',\n  '1245.script.js',\n  '1246.script.js',\n  '1247.script.js',\n  '1248.script.js',\n  '128.script.js',\n  '1307.script.js',\n  '1319.script.js',\n  '1334.script.js',\n  '1335.script.js',\n  '1364.script.js',\n  '1370.script.js',\n  '140.script.js',\n  '1427.script.js',\n  '1428.script.js',\n  '1429.script.js',\n  '1430.script.js',\n  '1431.script.js',\n  '1432.script.js',\n  '1434.script.js',\n  '1467.script.js',\n  '1623.script.js',\n  '1638.script.js',\n  '1686.module.js',\n  '1687.module.js',\n  '1688.module.js',\n  '1689.module.js',\n  '1690.module.js',\n  '1691.module.js',\n  '1692.module.js',\n  '1693.module.js',\n  '1694.module.js',\n  '1695.module.js',\n  '1698.module.js',\n  '1699.module.js',\n  '1700.module.js',\n  '1701.module.js',\n  '1736.script.js',\n  '1739.script.js',\n  '1745.script.js',\n  '1779.script.js',\n  '1789.script.js',\n  '1844.script.js',\n  '1954.script.js',\n  '285.script.js',\n  '290.script.js',\n  '295.script.js',\n  '296.script.js',\n  '297.script.js',\n  '301.script.js',\n  '350.script.js',\n  '37.script.js',\n  '389.script.js',\n  '391.script.js',\n  '393.script.js',\n  '397.module.js',\n  '398.module.js',\n  '400.module.js',\n  '401.module.js',\n  '402.module.js',\n  '403.module.js',\n  '404.module.js',\n  '405.module.js',\n  '406.module.js',\n  '407.module.js',\n  '408.module.js',\n  '409.module.js',\n  '411.module.js',\n  '412.module.js',\n  '413.module.js',\n  '414.module.js',\n  '415.module.js',\n  '416.module.js',\n  '417.module.js',\n  '418.module.js',\n  '419.module.js',\n  '420.module.js',\n  '516.script.js',\n  '523.module.js',\n  '533.script.js',\n  '538.script.js',\n  '546.module.js',\n  '551.module.js',\n  '572.script.js',\n  '583.script.js',\n  '608.script.js',\n  '679.script.js',\n  '680.script.js',\n  '681.script.js',\n  '84.script.js',\n  '95.script.js',\n  '993.script.js',\n  '995.script.js',\n]\n\nfunction mkTester(subdir) {\n  function f(fname) {\n    let result = compile(`${PARSER_TEST_DIR}/${subdir}/${fname}`).codegen()\n    if (result == null) {\n      throw new Error('un expected null result');\n    }\n  }\n  return f;\n}\n\nlet passTest = mkTester('pass')\n\npass.filter(f => !passExcluded.includes(f)).forEach(f => {\n  console.log(f);\n  passTest(f);\n});\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/sweet-loader.js":"// @flow\nimport read from './reader/token-reader';\nimport { freshScope } from './scope';\nimport Env from './env';\nimport { List } from 'immutable';\nimport Compiler from './compiler';\nimport { ALL_PHASES } from './syntax';\nimport BindingMap from './binding-map.js';\nimport Term from 'sweet-spec';\nimport SweetModule from './sweet-module';\nimport * as _ from 'ramda';\nimport ScopeReducer from './scope-reducer';\nimport { wrapInTerms } from './macro-context';\nimport { transform as babel } from 'babel-core';\nimport Store from './store';\n\nexport const phaseInModulePathRegexp = /(.*):(\\d+)\\s*$/;\n\nexport type Context = {\n  bindings: any,\n  templateMap: any,\n  getTemplateIdentifier: any,\n  loader: any,\n  transform: any,\n  phase: number,\n  store: Store,\n};\n\nexport type LoaderOptions = {\n  noBabel?: boolean,\n  logging?: boolean,\n};\n\nexport default class SweetLoader {\n  sourceCache: Map<string, string>;\n  compiledCache: Map<string, SweetModule>;\n  context: any;\n  baseDir: string;\n  logging: boolean;\n\n  constructor(baseDir: string, options?: LoaderOptions = {}) {\n    this.sourceCache = new Map();\n    this.compiledCache = new Map();\n    this.baseDir = baseDir;\n    this.logging = options.logging || false;\n\n    let bindings = new BindingMap();\n    let templateMap = new Map();\n    let tempIdent = 0;\n    this.context = {\n      phase: 0,\n      bindings,\n      templateMap,\n      getTemplateIdentifier: () => ++tempIdent,\n      loader: this,\n      transform: c => {\n        if (options.noBabel) {\n          return {\n            code: c,\n          };\n        }\n        return babel(c, {\n          babelrc: true,\n        });\n      },\n    };\n  }\n\n  normalize(name: string, refererName?: string, refererAddress?: string) {\n    // takes `..path/to/source.js:<phase>`\n    // gives `/abs/path/to/source.js:<phase>`\n    // missing phases are turned into 0\n    if (!phaseInModulePathRegexp.test(name)) {\n      return `${name}:0`;\n    }\n    return name;\n  }\n\n  locate({ name, metadata }: { name: string, metadata: {} }) {\n    // takes `/abs/path/to/source.js:<phase>`\n    // gives { path: '/abs/path/to/source.js', phase: <phase> }\n    let match = name.match(phaseInModulePathRegexp);\n    if (match && match.length >= 3) {\n      return {\n        path: match[1],\n        phase: parseInt(match[2], 10),\n      };\n    }\n    throw new Error(`Module ${name} is missing phase information`);\n  }\n\n  fetch(\n    {\n      name,\n      address,\n      metadata,\n    }: { name: string, address: { path: string, phase: number }, metadata: {} },\n  ) {\n    throw new Error('No default fetch defined');\n  }\n\n  translate(\n    {\n      name,\n      address,\n      source,\n      metadata,\n    }: {\n      name: string,\n      address: { path: string, phase: number },\n      source: string,\n      metadata: {},\n    },\n  ) {\n    let src = this.compiledCache.get(address.path);\n    if (src != null) {\n      return src;\n    }\n    let compiledModule = this.compileSource(source, metadata);\n    this.compiledCache.set(address.path, compiledModule);\n    return compiledModule;\n  }\n\n  instantiate(\n    {\n      name,\n      address,\n      source,\n      metadata,\n    }: {\n      name: string,\n      address: { path: string, phase: number },\n      source: SweetModule,\n      metadata: {},\n    },\n  ) {\n    throw new Error('Not implemented yet');\n  }\n\n  eval(source: string) {\n    return (0, eval)(source);\n  }\n\n  load(entryPath: string) {\n    let metadata = {};\n    let name = this.normalize(entryPath);\n    let address = this.locate({ name, metadata });\n    let source = this.fetch({ name, address, metadata });\n    source = this.translate({ name, address, source, metadata });\n    return this.instantiate({ name, address, source, metadata });\n  }\n\n  // skip instantiate\n  compile(\n    entryPath: string,\n    refererName?: string,\n    enforceLangPragma?: boolean = true,\n  ) {\n    let metadata = {\n      enforceLangPragma,\n      entryPath,\n    };\n    let name = this.normalize(entryPath, refererName);\n    let address = this.locate({ name, metadata });\n    let source = this.fetch({ name, address, metadata });\n    return this.translate({ name, address, source, metadata });\n  }\n\n  get(entryPath: string, entryPhase: number) {\n    return this.compile(`${entryPath}:${entryPhase}`);\n  }\n\n  read(source: string): List<Term> {\n    return wrapInTerms(read(source));\n  }\n\n  freshStore() {\n    return new Store({});\n  }\n\n  compileSource(source: string, metadata: any) {\n    let directive = getLangDirective(source);\n    if (directive == null && metadata.enforceLangPragma) {\n      if (this.logging) console.log(`skipping module ${metadata.entryPath}`);\n      return new SweetModule(List.of());\n    }\n    let stxl = this.read(source);\n    let outScope = freshScope('outsideEdge');\n    let inScope = freshScope('insideEdge0');\n    // the compiler starts at phase 0, with an empty environment and store\n    let compiler = new Compiler(\n      0,\n      new Env(),\n      this.freshStore(),\n      _.merge(this.context, {\n        currentScope: [outScope, inScope],\n      }),\n    );\n    return new SweetModule(\n      compiler.compile(\n        stxl.map(s =>\n          s.reduce(\n            new ScopeReducer(\n              [\n                { scope: outScope, phase: ALL_PHASES, flip: false },\n                { scope: inScope, phase: 0, flip: false },\n              ],\n              this.context.bindings,\n            ),\n          )),\n      ),\n    );\n  }\n}\n\nconst langDirectiveRegexp = /\\s*('lang .*')/;\nfunction getLangDirective(source: string) {\n  let match = source.match(langDirectiveRegexp);\n  if (match) {\n    return match[1];\n  }\n  return null;\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/debug.js":"'use strict';\n/*\nThis file makes debugging sweet.js easier. Uses the built version of sweet.js\nto compile 'test.js'. You can use node-inspector to step through the expansion\nprocess:\n\n\tnpm install -g node-inspector\n\tnode-debug debug.js\n*/\n\nrequire('babel-register');\nvar compile = require('./src/sweet.js').compile;\nvar NodeLoader = require('./src/node-loader').default;\n\n\ndebugger;\n\nlet result = compile('./test.js', new NodeLoader(__dirname));\nconsole.log(result.code);\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/sweet.js":"// @flow\nimport type SweetLoader from './sweet-loader';\nimport { transform as babel } from 'babel-core';\n\ntype CompileOptions = {\n  refererName?: string,\n  debugStore?: Map<string, string>,\n  noBabel?: boolean,\n  loader: SweetLoader,\n};\n\nfunction compileModule(\n  entryPath: string,\n  loader: SweetLoader,\n  refererName?: string,\n) {\n  return loader.compile(entryPath, refererName, false);\n}\n\nexport function parse(\n  entryPath: string,\n  loader: SweetLoader,\n  options?: CompileOptions,\n) {\n  let refererName;\n  if (options != null) {\n    refererName = options.refererName;\n  }\n  return compileModule(entryPath, loader, refererName).parse();\n}\n\nexport function compile(\n  entryPath: string,\n  loader: SweetLoader,\n  options?: CompileOptions,\n) {\n  let refererName, noBabel = true;\n  if (options != null) {\n    refererName = options.refererName;\n    noBabel = options.noBabel;\n  }\n  let code = compileModule(entryPath, loader, refererName).codegen();\n  if (noBabel) {\n    return {\n      code,\n    };\n  }\n  return babel(code, {\n    babelrc: true,\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/editor/codemirror.js":"// CodeMirror version 3.0\n//\n// CodeMirror is the only global var we claim\nwindow.CodeMirror = (function() {\n  \"use strict\";\n\n  // BROWSER SNIFFING\n\n  // Crude, but necessary to handle a number of hard-to-feature-detect\n  // bugs and behavior differences.\n  var gecko = /gecko\\/\\d/i.test(navigator.userAgent);\n  var ie = /MSIE \\d/.test(navigator.userAgent);\n  var ie_lt8 = /MSIE [1-7]\\b/.test(navigator.userAgent);\n  var ie_lt9 = /MSIE [1-8]\\b/.test(navigator.userAgent);\n  var webkit = /WebKit\\//.test(navigator.userAgent);\n  var qtwebkit = webkit && /Qt\\/\\d+\\.\\d+/.test(navigator.userAgent);\n  var chrome = /Chrome\\//.test(navigator.userAgent);\n  var opera = /Opera\\//.test(navigator.userAgent);\n  var safari = /Apple Computer/.test(navigator.vendor);\n  var khtml = /KHTML\\//.test(navigator.userAgent);\n  var mac_geLion = /Mac OS X 1\\d\\D([7-9]|\\d\\d)\\D/.test(navigator.userAgent);\n  var mac_geMountainLion = /Mac OS X 1\\d\\D([8-9]|\\d\\d)\\D/.test(navigator.userAgent);\n  var phantom = /PhantomJS/.test(navigator.userAgent);\n\n  var ios = /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent);\n  // This is woefully incomplete. Suggestions for alternative methods welcome.\n  var mobile = ios || /Android|webOS|BlackBerry|Opera Mini|IEMobile/i.test(navigator.userAgent);\n  var mac = ios || /Mac/.test(navigator.platform);\n\n  // Optimize some code when these features are not used\n  var sawReadOnlySpans = false, sawCollapsedSpans = false;\n\n  // CONSTRUCTOR\n\n  function CodeMirror(place, options) {\n    if (!(this instanceof CodeMirror)) return new CodeMirror(place, options);\n    \n    this.options = options = options || {};\n    // Determine effective options based on given values and defaults.\n    for (var opt in defaults) if (!options.hasOwnProperty(opt) && defaults.hasOwnProperty(opt))\n      options[opt] = defaults[opt];\n    setGuttersForLineNumbers(options);\n\n    var display = this.display = makeDisplay(place);\n    display.wrapper.CodeMirror = this;\n    updateGutters(this);\n    if (options.autofocus && !mobile) focusInput(this);\n\n    this.view = makeView(new BranchChunk([new LeafChunk([makeLine(\"\", null, textHeight(display))])]));\n    this.nextOpId = 0;\n    loadMode(this);\n    themeChanged(this);\n    if (options.lineWrapping)\n      this.display.wrapper.className += \" CodeMirror-wrap\";\n\n    // Initialize the content.\n    this.setValue(options.value || \"\");\n    // Override magic textarea content restore that IE sometimes does\n    // on our hidden textarea on reload\n    if (ie) setTimeout(bind(resetInput, this, true), 20);\n    this.view.history = makeHistory();\n\n    registerEventHandlers(this);\n    // IE throws unspecified error in certain cases, when\n    // trying to access activeElement before onload\n    var hasFocus; try { hasFocus = (document.activeElement == display.input); } catch(e) { }\n    if (hasFocus || (options.autofocus && !mobile)) setTimeout(bind(onFocus, this), 20);\n    else onBlur(this);\n\n    operation(this, function() {\n      for (var opt in optionHandlers)\n        if (optionHandlers.propertyIsEnumerable(opt))\n          optionHandlers[opt](this, options[opt], Init);\n      for (var i = 0; i < initHooks.length; ++i) initHooks[i](this);\n    })();\n  }\n\n  // DISPLAY CONSTRUCTOR\n\n  function makeDisplay(place) {\n    var d = {};\n    var input = d.input = elt(\"textarea\", null, null, \"position: absolute; padding: 0; width: 1px; height: 1em; outline: none;\");\n    input.setAttribute(\"wrap\", \"off\"); input.setAttribute(\"autocorrect\", \"off\"); input.setAttribute(\"autocapitalize\", \"off\");\n    // Wraps and hides input textarea\n    d.inputDiv = elt(\"div\", [input], null, \"overflow: hidden; position: relative; width: 3px; height: 0px;\");\n    // The actual fake scrollbars.\n    d.scrollbarH = elt(\"div\", [elt(\"div\", null, null, \"height: 1px\")], \"CodeMirror-hscrollbar\");\n    d.scrollbarV = elt(\"div\", [elt(\"div\", null, null, \"width: 1px\")], \"CodeMirror-vscrollbar\");\n    d.scrollbarFiller = elt(\"div\", null, \"CodeMirror-scrollbar-filler\");\n    // DIVs containing the selection and the actual code\n    d.lineDiv = elt(\"div\");\n    d.selectionDiv = elt(\"div\", null, null, \"position: relative; z-index: 1\");\n    // Blinky cursor, and element used to ensure cursor fits at the end of a line\n    d.cursor = elt(\"pre\", \"\\u00a0\", \"CodeMirror-cursor\");\n    // Secondary cursor, shown when on a 'jump' in bi-directional text\n    d.otherCursor = elt(\"pre\", \"\\u00a0\", \"CodeMirror-cursor CodeMirror-secondarycursor\");\n    // Used to measure text size\n    d.measure = elt(\"div\", null, \"CodeMirror-measure\");\n    // Wraps everything that needs to exist inside the vertically-padded coordinate system\n    d.lineSpace = elt(\"div\", [d.measure, d.selectionDiv, d.lineDiv, d.cursor, d.otherCursor],\n                         null, \"position: relative; outline: none\");\n    // Moved around its parent to cover visible view\n    d.mover = elt(\"div\", [elt(\"div\", [d.lineSpace], \"CodeMirror-lines\")], null, \"position: relative\");\n    // Set to the height of the text, causes scrolling\n    d.sizer = elt(\"div\", [d.mover], \"CodeMirror-sizer\");\n    // D is needed because behavior of elts with overflow: auto and padding is inconsistent across browsers\n    d.heightForcer = elt(\"div\", \"\\u00a0\", null, \"position: absolute; height: \" + scrollerCutOff + \"px\");\n    // Will contain the gutters, if any\n    d.gutters = elt(\"div\", null, \"CodeMirror-gutters\");\n    d.lineGutter = null;\n    // Helper element to properly size the gutter backgrounds\n    var scrollerInner = elt(\"div\", [d.sizer, d.heightForcer, d.gutters], null, \"position: relative; min-height: 100%\");\n    // Provides scrolling\n    d.scroller = elt(\"div\", [scrollerInner], \"CodeMirror-scroll\");\n    d.scroller.setAttribute(\"tabIndex\", \"-1\");\n    // The element in which the editor lives.\n    d.wrapper = elt(\"div\", [d.inputDiv, d.scrollbarH, d.scrollbarV,\n                            d.scrollbarFiller, d.scroller], \"CodeMirror\");\n    // Work around IE7 z-index bug\n    if (ie_lt8) { d.gutters.style.zIndex = -1; d.scroller.style.paddingRight = 0; }\n    if (place.appendChild) place.appendChild(d.wrapper); else place(d.wrapper);\n\n    // Needed to hide big blue blinking cursor on Mobile Safari\n    if (ios) input.style.width = \"0px\";\n    if (!webkit) d.scroller.draggable = true;\n    // Needed to handle Tab key in KHTML\n    if (khtml) { d.inputDiv.style.height = \"1px\"; d.inputDiv.style.position = \"absolute\"; }\n    // Need to set a minimum width to see the scrollbar on IE7 (but must not set it on IE8).\n    else if (ie_lt8) d.scrollbarH.style.minWidth = d.scrollbarV.style.minWidth = \"18px\";\n\n    // Current visible range (may be bigger than the view window).\n    d.viewOffset = d.showingFrom = d.showingTo = d.lastSizeC = 0;\n\n    // Used to only resize the line number gutter when necessary (when\n    // the amount of lines crosses a boundary that makes its width change)\n    d.lineNumWidth = d.lineNumInnerWidth = d.lineNumChars = null;\n    // See readInput and resetInput\n    d.prevInput = \"\";\n    // Set to true when a non-horizontal-scrolling widget is added. As\n    // an optimization, widget aligning is skipped when d is false.\n    d.alignWidgets = false;\n    // Flag that indicates whether we currently expect input to appear\n    // (after some event like 'keypress' or 'input') and are polling\n    // intensively.\n    d.pollingFast = false;\n    // Self-resetting timeout for the poller\n    d.poll = new Delayed();\n    // True when a drag from the editor is active\n    d.draggingText = false;\n\n    d.cachedCharWidth = d.cachedTextHeight = null;\n    d.measureLineCache = [];\n    d.measureLineCachePos = 0;\n\n    // Tracks when resetInput has punted to just putting a short\n    // string instead of the (large) selection.\n    d.inaccurateSelection = false;\n\n    // Used to adjust overwrite behaviour when a paste has been\n    // detected\n    d.pasteIncoming = false;\n\n    return d;\n  }\n\n  // VIEW CONSTRUCTOR\n\n  function makeView(doc) {\n    var selPos = {line: 0, ch: 0};\n    return {\n      doc: doc,\n      // frontier is the point up to which the content has been parsed,\n      frontier: 0, highlight: new Delayed(),\n      sel: {from: selPos, to: selPos, head: selPos, anchor: selPos, shift: false, extend: false},\n      scrollTop: 0, scrollLeft: 0,\n      overwrite: false, focused: false,\n      // Tracks the maximum line length so that\n      // the horizontal scrollbar can be kept\n      // static when scrolling.\n      maxLine: getLine(doc, 0),\n      maxLineLength: 0,\n      maxLineChanged: false,\n      suppressEdits: false,\n      goalColumn: null,\n      cantEdit: false,\n      keyMaps: []\n    };\n  }\n\n  // STATE UPDATES\n\n  // Used to get the editor into a consistent state again when options change.\n\n  function loadMode(cm) {\n    var doc = cm.view.doc;\n    cm.view.mode = CodeMirror.getMode(cm.options, cm.options.mode);\n    doc.iter(0, doc.size, function(line) { line.stateAfter = null; });\n    cm.view.frontier = 0;\n    startWorker(cm, 100);\n  }\n\n  function wrappingChanged(cm) {\n    var doc = cm.view.doc, th = textHeight(cm.display);\n    if (cm.options.lineWrapping) {\n      cm.display.wrapper.className += \" CodeMirror-wrap\";\n      var perLine = cm.display.scroller.clientWidth / charWidth(cm.display) - 3;\n      doc.iter(0, doc.size, function(line) {\n        if (line.height == 0) return;\n        var guess = Math.ceil(line.text.length / perLine) || 1;\n        if (guess != 1) updateLineHeight(line, guess * th);\n      });\n      cm.display.sizer.style.minWidth = \"\";\n    } else {\n      cm.display.wrapper.className = cm.display.wrapper.className.replace(\" CodeMirror-wrap\", \"\");\n      computeMaxLength(cm.view);\n      doc.iter(0, doc.size, function(line) {\n        if (line.height != 0) updateLineHeight(line, th);\n      });\n    }\n    regChange(cm, 0, doc.size);\n    clearCaches(cm);\n    setTimeout(function(){updateScrollbars(cm.display, cm.view.doc.height);}, 100);\n  }\n\n  function keyMapChanged(cm) {\n    var style = keyMap[cm.options.keyMap].style;\n    cm.display.wrapper.className = cm.display.wrapper.className.replace(/\\s*cm-keymap-\\S+/g, \"\") +\n      (style ? \" cm-keymap-\" + style : \"\");\n  }\n\n  function themeChanged(cm) {\n    cm.display.wrapper.className = cm.display.wrapper.className.replace(/\\s*cm-s-\\S+/g, \"\") +\n      cm.options.theme.replace(/(^|\\s)\\s*/g, \" cm-s-\");\n    clearCaches(cm);\n  }\n\n  function guttersChanged(cm) {\n    updateGutters(cm);\n    updateDisplay(cm, true);\n  }\n\n  function updateGutters(cm) {\n    var gutters = cm.display.gutters, specs = cm.options.gutters;\n    removeChildren(gutters);\n    for (var i = 0; i < specs.length; ++i) {\n      var gutterClass = specs[i];\n      var gElt = gutters.appendChild(elt(\"div\", null, \"CodeMirror-gutter \" + gutterClass));\n      if (gutterClass == \"CodeMirror-linenumbers\") {\n        cm.display.lineGutter = gElt;\n        gElt.style.width = (cm.display.lineNumWidth || 1) + \"px\";\n      }\n    }\n    gutters.style.display = i ? \"\" : \"none\";\n  }\n\n  function lineLength(doc, line) {\n    if (line.height == 0) return 0;\n    var len = line.text.length, merged, cur = line;\n    while (merged = collapsedSpanAtStart(cur)) {\n      var found = merged.find();\n      cur = getLine(doc, found.from.line);\n      len += found.from.ch - found.to.ch;\n    }\n    cur = line;\n    while (merged = collapsedSpanAtEnd(cur)) {\n      var found = merged.find();\n      len -= cur.text.length - found.from.ch;\n      cur = getLine(doc, found.to.line);\n      len += cur.text.length - found.to.ch;\n    }\n    return len;\n  }\n\n  function computeMaxLength(view) {\n    view.maxLine = getLine(view.doc, 0);\n    view.maxLineLength = lineLength(view.doc, view.maxLine);\n    view.maxLineChanged = true;\n    view.doc.iter(1, view.doc.size, function(line) {\n      var len = lineLength(view.doc, line);\n      if (len > view.maxLineLength) {\n        view.maxLineLength = len;\n        view.maxLine = line;\n      }\n    });\n  }\n\n  // Make sure the gutters options contains the element\n  // \"CodeMirror-linenumbers\" when the lineNumbers option is true.\n  function setGuttersForLineNumbers(options) {\n    var found = false;\n    for (var i = 0; i < options.gutters.length; ++i) {\n      if (options.gutters[i] == \"CodeMirror-linenumbers\") {\n        if (options.lineNumbers) found = true;\n        else options.gutters.splice(i--, 1);\n      }\n    }\n    if (!found && options.lineNumbers)\n      options.gutters.push(\"CodeMirror-linenumbers\");\n  }\n\n  // SCROLLBARS\n\n  // Re-synchronize the fake scrollbars with the actual size of the\n  // content. Optionally force a scrollTop.\n  function updateScrollbars(d /* display */, docHeight) {\n    var totalHeight = docHeight + 2 * paddingTop(d);\n    d.sizer.style.minHeight = d.heightForcer.style.top = totalHeight + \"px\";\n    var scrollHeight = Math.max(totalHeight, d.scroller.scrollHeight);\n    var needsH = d.scroller.scrollWidth > d.scroller.clientWidth;\n    var needsV = scrollHeight > d.scroller.clientHeight;\n    if (needsV) {\n      d.scrollbarV.style.display = \"block\";\n      d.scrollbarV.style.bottom = needsH ? scrollbarWidth(d.measure) + \"px\" : \"0\";\n      d.scrollbarV.firstChild.style.height = \n        (scrollHeight - d.scroller.clientHeight + d.scrollbarV.clientHeight) + \"px\";\n    } else d.scrollbarV.style.display = \"\";\n    if (needsH) {\n      d.scrollbarH.style.display = \"block\";\n      d.scrollbarH.style.right = needsV ? scrollbarWidth(d.measure) + \"px\" : \"0\";\n      d.scrollbarH.firstChild.style.width =\n        (d.scroller.scrollWidth - d.scroller.clientWidth + d.scrollbarH.clientWidth) + \"px\";\n    } else d.scrollbarH.style.display = \"\";\n    if (needsH && needsV) {\n      d.scrollbarFiller.style.display = \"block\";\n      d.scrollbarFiller.style.height = d.scrollbarFiller.style.width = scrollbarWidth(d.measure) + \"px\";\n    } else d.scrollbarFiller.style.display = \"\";\n\n    if (mac_geLion && scrollbarWidth(d.measure) === 0)\n      d.scrollbarV.style.minWidth = d.scrollbarH.style.minHeight = mac_geMountainLion ? \"18px\" : \"12px\";\n  }\n\n  function visibleLines(display, doc, viewPort) {\n    var top = display.scroller.scrollTop, height = display.wrapper.clientHeight;\n    if (typeof viewPort == \"number\") top = viewPort;\n    else if (viewPort) {top = viewPort.top; height = viewPort.bottom - viewPort.top;}\n    top = Math.floor(top - paddingTop(display));\n    var bottom = Math.ceil(top + height);\n    return {from: lineAtHeight(doc, top), to: lineAtHeight(doc, bottom)};\n  }\n\n  // LINE NUMBERS\n\n  function alignHorizontally(cm) {\n    var display = cm.display;\n    if (!display.alignWidgets && !display.gutters.firstChild) return;\n    var comp = compensateForHScroll(display) - display.scroller.scrollLeft + cm.view.scrollLeft;\n    var gutterW = display.gutters.offsetWidth, l = comp + \"px\";\n    for (var n = display.lineDiv.firstChild; n; n = n.nextSibling) if (n.alignable) {\n      for (var i = 0, a = n.alignable; i < a.length; ++i) a[i].style.left = l;\n    }\n    display.gutters.style.left = (comp + gutterW) + \"px\";\n  }\n\n  function maybeUpdateLineNumberWidth(cm) {\n    if (!cm.options.lineNumbers) return false;\n    var doc = cm.view.doc, last = lineNumberFor(cm.options, doc.size - 1), display = cm.display;\n    if (last.length != display.lineNumChars) {\n      var test = display.measure.appendChild(elt(\"div\", [elt(\"div\", last)],\n                                                 \"CodeMirror-linenumber CodeMirror-gutter-elt\"));\n      var innerW = test.firstChild.offsetWidth, padding = test.offsetWidth - innerW;\n      display.lineGutter.style.width = \"\";\n      display.lineNumInnerWidth = Math.max(innerW, display.lineGutter.offsetWidth - padding);\n      display.lineNumWidth = display.lineNumInnerWidth + padding;\n      display.lineNumChars = display.lineNumInnerWidth ? last.length : -1;\n      display.lineGutter.style.width = display.lineNumWidth + \"px\";\n      return true;\n    }\n    return false;\n  }\n\n  function lineNumberFor(options, i) {\n    return String(options.lineNumberFormatter(i + options.firstLineNumber));\n  }\n  function compensateForHScroll(display) {\n    return display.scroller.getBoundingClientRect().left - display.sizer.getBoundingClientRect().left;\n  }\n\n  // DISPLAY DRAWING\n\n  function updateDisplay(cm, changes, viewPort) {\n    var oldFrom = cm.display.showingFrom, oldTo = cm.display.showingTo;\n    var updated = updateDisplayInner(cm, changes, viewPort);\n    if (updated) {\n      signalLater(cm, cm, \"update\", cm);\n      if (cm.display.showingFrom != oldFrom || cm.display.showingTo != oldTo)\n        signalLater(cm, cm, \"viewportChange\", cm, cm.display.showingFrom, cm.display.showingTo);\n    }\n    updateSelection(cm);\n    updateScrollbars(cm.display, cm.view.doc.height);\n\n    return updated;\n  }\n\n  // Uses a set of changes plus the current scroll position to\n  // determine which DOM updates have to be made, and makes the\n  // updates.\n  function updateDisplayInner(cm, changes, viewPort) {\n    var display = cm.display, doc = cm.view.doc;\n    if (!display.wrapper.clientWidth) {\n      display.showingFrom = display.showingTo = display.viewOffset = 0;\n      return;\n    }\n\n    // Compute the new visible window\n    // If scrollTop is specified, use that to determine which lines\n    // to render instead of the current scrollbar position.\n    var visible = visibleLines(display, doc, viewPort);\n    // Bail out if the visible area is already rendered and nothing changed.\n    if (changes !== true && changes.length == 0 &&\n        visible.from > display.showingFrom && visible.to < display.showingTo)\n      return;\n\n    if (changes && maybeUpdateLineNumberWidth(cm))\n      changes = true;\n    display.sizer.style.marginLeft = display.scrollbarH.style.left = display.gutters.offsetWidth + \"px\";\n\n    // When merged lines are present, the line that needs to be\n    // redrawn might not be the one that was changed.\n    if (changes !== true && sawCollapsedSpans)\n      for (var i = 0; i < changes.length; ++i) {\n        var ch = changes[i], merged;\n        while (merged = collapsedSpanAtStart(getLine(doc, ch.from))) {\n          var from = merged.find().from.line;\n          if (ch.diff) ch.diff -= ch.from - from;\n          ch.from = from;\n        }\n      }\n\n    // Used to determine which lines need their line numbers updated\n    var positionsChangedFrom = changes === true ? 0 : Infinity;\n    if (cm.options.lineNumbers && changes && changes !== true)\n      for (var i = 0; i < changes.length; ++i)\n        if (changes[i].diff) { positionsChangedFrom = changes[i].from; break; }\n\n    var from = Math.max(visible.from - cm.options.viewportMargin, 0);\n    var to = Math.min(doc.size, visible.to + cm.options.viewportMargin);\n    if (display.showingFrom < from && from - display.showingFrom < 20) from = display.showingFrom;\n    if (display.showingTo > to && display.showingTo - to < 20) to = Math.min(doc.size, display.showingTo);\n    if (sawCollapsedSpans) {\n      from = lineNo(visualLine(doc, getLine(doc, from)));\n      while (to < doc.size && lineIsHidden(getLine(doc, to))) ++to;\n    }\n\n    // Create a range of theoretically intact lines, and punch holes\n    // in that using the change info.\n    var intact = changes === true ? [] :\n      computeIntact([{from: display.showingFrom, to: display.showingTo}], changes);\n    // Clip off the parts that won't be visible\n    var intactLines = 0;\n    for (var i = 0; i < intact.length; ++i) {\n      var range = intact[i];\n      if (range.from < from) range.from = from;\n      if (range.to > to) range.to = to;\n      if (range.from >= range.to) intact.splice(i--, 1);\n      else intactLines += range.to - range.from;\n    }\n    if (intactLines == to - from && from == display.showingFrom && to == display.showingTo)\n      return;\n    intact.sort(function(a, b) {return a.from - b.from;});\n\n    if (intactLines < (to - from) * .7) display.lineDiv.style.display = \"none\";\n    patchDisplay(cm, from, to, intact, positionsChangedFrom);\n    display.lineDiv.style.display = \"\";\n\n    var different = from != display.showingFrom || to != display.showingTo ||\n      display.lastSizeC != display.wrapper.clientHeight;\n    // This is just a bogus formula that detects when the editor is\n    // resized or the font size changes.\n    if (different) display.lastSizeC = display.wrapper.clientHeight;\n    display.showingFrom = from; display.showingTo = to;\n    startWorker(cm, 100);\n\n    var prevBottom = display.lineDiv.offsetTop;\n    for (var node = display.lineDiv.firstChild, height; node; node = node.nextSibling) if (node.lineObj) {\n      if (ie_lt8) {\n        var bot = node.offsetTop + node.offsetHeight;\n        height = bot - prevBottom;\n        prevBottom = bot;\n      } else {\n        var box = node.getBoundingClientRect();\n        height = box.bottom - box.top;\n      }\n      var diff = node.lineObj.height - height;\n      if (height < 2) height = textHeight(display);\n      if (diff > .001 || diff < -.001)\n        updateLineHeight(node.lineObj, height);\n    }\n    display.viewOffset = heightAtLine(cm, getLine(doc, from));\n    // Position the mover div to align with the current virtual scroll position\n    display.mover.style.top = display.viewOffset + \"px\";\n    return true;\n  }\n\n  function computeIntact(intact, changes) {\n    for (var i = 0, l = changes.length || 0; i < l; ++i) {\n      var change = changes[i], intact2 = [], diff = change.diff || 0;\n      for (var j = 0, l2 = intact.length; j < l2; ++j) {\n        var range = intact[j];\n        if (change.to <= range.from && change.diff) {\n          intact2.push({from: range.from + diff, to: range.to + diff});\n        } else if (change.to <= range.from || change.from >= range.to) {\n          intact2.push(range);\n        } else {\n          if (change.from > range.from)\n            intact2.push({from: range.from, to: change.from});\n          if (change.to < range.to)\n            intact2.push({from: change.to + diff, to: range.to + diff});\n        }\n      }\n      intact = intact2;\n    }\n    return intact;\n  }\n\n  function getDimensions(cm) {\n    var d = cm.display, left = {}, width = {};\n    for (var n = d.gutters.firstChild, i = 0; n; n = n.nextSibling, ++i) {\n      left[cm.options.gutters[i]] = n.offsetLeft;\n      width[cm.options.gutters[i]] = n.offsetWidth;\n    }\n    return {fixedPos: compensateForHScroll(d),\n            gutterTotalWidth: d.gutters.offsetWidth,\n            gutterLeft: left,\n            gutterWidth: width,\n            wrapperWidth: d.wrapper.clientWidth};\n  }\n\n  function patchDisplay(cm, from, to, intact, updateNumbersFrom) {\n    var dims = getDimensions(cm);\n    var display = cm.display, lineNumbers = cm.options.lineNumbers;\n    // IE does bad things to nodes when .innerHTML = \"\" is used on a parent\n    // we still need widgets and markers intact to add back to the new content later\n    if (!intact.length && !ie && (!webkit || !cm.display.currentWheelTarget))\n      removeChildren(display.lineDiv);\n    var container = display.lineDiv, cur = container.firstChild;\n\n    function rm(node) {\n      var next = node.nextSibling;\n      if (webkit && mac && cm.display.currentWheelTarget == node) {\n        node.style.display = \"none\";\n        node.lineObj = null;\n      } else {\n        container.removeChild(node);\n      }\n      return next;\n    }\n\n    var nextIntact = intact.shift(), lineNo = from;\n    cm.view.doc.iter(from, to, function(line) {\n      if (nextIntact && nextIntact.to == lineNo) nextIntact = intact.shift();\n      if (lineIsHidden(line)) {\n        if (line.height != 0) updateLineHeight(line, 0);\n      } else if (nextIntact && nextIntact.from <= lineNo && nextIntact.to > lineNo) {\n        // This line is intact. Skip to the actual node. Update its\n        // line number if needed.\n        while (cur.lineObj != line) cur = rm(cur);\n        if (lineNumbers && updateNumbersFrom <= lineNo && cur.lineNumber)\n          setTextContent(cur.lineNumber, lineNumberFor(cm.options, lineNo));\n        cur = cur.nextSibling;\n      } else {\n        // This line needs to be generated.\n        var lineNode = buildLineElement(cm, line, lineNo, dims);\n        container.insertBefore(lineNode, cur);\n        lineNode.lineObj = line;\n      }\n      ++lineNo;\n    });\n    while (cur) cur = rm(cur);\n  }\n\n  function buildLineElement(cm, line, lineNo, dims) {\n    var lineElement = lineContent(cm, line);\n    var markers = line.gutterMarkers, display = cm.display;\n\n    if (!cm.options.lineNumbers && !markers && !line.bgClass && !line.wrapClass &&\n        (!line.widgets || !line.widgets.length)) return lineElement;\n\n    // Lines with gutter elements or a background class need\n    // to be wrapped again, and have the extra elements added\n    // to the wrapper div\n\n    var wrap = elt(\"div\", null, line.wrapClass, \"position: relative\");\n    if (cm.options.lineNumbers || markers) {\n      var gutterWrap = wrap.appendChild(elt(\"div\", null, null, \"position: absolute; left: \" +\n                                            dims.fixedPos + \"px\"));\n      wrap.alignable = [gutterWrap];\n      if (cm.options.lineNumbers && (!markers || !markers[\"CodeMirror-linenumbers\"]))\n        wrap.lineNumber = gutterWrap.appendChild(\n          elt(\"div\", lineNumberFor(cm.options, lineNo),\n              \"CodeMirror-linenumber CodeMirror-gutter-elt\",\n              \"left: \" + dims.gutterLeft[\"CodeMirror-linenumbers\"] + \"px; width: \"\n              + display.lineNumInnerWidth + \"px\"));\n      if (markers)\n        for (var k = 0; k < cm.options.gutters.length; ++k) {\n          var id = cm.options.gutters[k], found = markers.hasOwnProperty(id) && markers[id];\n          if (found)\n            gutterWrap.appendChild(elt(\"div\", [found], \"CodeMirror-gutter-elt\", \"left: \" +\n                                       dims.gutterLeft[id] + \"px; width: \" + dims.gutterWidth[id] + \"px\"));\n        }\n    }\n    // Kludge to make sure the styled element lies behind the selection (by z-index)\n    if (line.bgClass)\n      wrap.appendChild(elt(\"div\", \"\\u00a0\", line.bgClass + \" CodeMirror-linebackground\"));\n    wrap.appendChild(lineElement);\n    if (line.widgets)\n      for (var i = 0, ws = line.widgets; i < ws.length; ++i) {\n        var widget = ws[i], node = elt(\"div\", [widget.node], \"CodeMirror-linewidget\");\n        node.widget = widget;\n        if (widget.noHScroll) {\n          (wrap.alignable || (wrap.alignable = [])).push(node);\n          var width = dims.wrapperWidth;\n          node.style.left = dims.fixedPos + \"px\";\n          if (!widget.coverGutter) {\n            width -= dims.gutterTotalWidth;\n            node.style.paddingLeft = dims.gutterTotalWidth + \"px\";\n          }\n          node.style.width = width + \"px\";\n        }\n        if (widget.coverGutter) {\n          node.style.zIndex = 5;\n          node.style.position = \"relative\";\n          if (!widget.noHScroll) node.style.marginLeft = -dims.gutterTotalWidth + \"px\";\n        }\n        if (widget.above)\n          wrap.insertBefore(node, cm.options.lineNumbers && line.height != 0 ? gutterWrap : lineElement);\n        else\n          wrap.appendChild(node);\n      }\n\n    if (ie_lt8) wrap.style.zIndex = 2;\n    return wrap;\n  }\n\n  // SELECTION / CURSOR\n\n  function updateSelection(cm) {\n    var display = cm.display;\n    var collapsed = posEq(cm.view.sel.from, cm.view.sel.to);\n    if (collapsed || cm.options.showCursorWhenSelecting)\n      updateSelectionCursor(cm);\n    else\n      display.cursor.style.display = display.otherCursor.style.display = \"none\";\n    if (!collapsed)\n      updateSelectionRange(cm);\n    else\n      display.selectionDiv.style.display = \"none\";\n\n    // Move the hidden textarea near the cursor to prevent scrolling artifacts\n    var headPos = cursorCoords(cm, cm.view.sel.head, \"div\");\n    var wrapOff = display.wrapper.getBoundingClientRect(), lineOff = display.lineDiv.getBoundingClientRect();\n    display.inputDiv.style.top = Math.max(0, Math.min(display.wrapper.clientHeight - 10,\n                                                      headPos.top + lineOff.top - wrapOff.top)) + \"px\";\n    display.inputDiv.style.left = Math.max(0, Math.min(display.wrapper.clientWidth - 10,\n                                                       headPos.left + lineOff.left - wrapOff.left)) + \"px\";\n  }\n\n  // No selection, plain cursor\n  function updateSelectionCursor(cm) {\n    var display = cm.display, pos = cursorCoords(cm, cm.view.sel.head, \"div\");\n    display.cursor.style.left = pos.left + \"px\";\n    display.cursor.style.top = pos.top + \"px\";\n    display.cursor.style.height = Math.max(0, pos.bottom - pos.top) * cm.options.cursorHeight + \"px\";\n    display.cursor.style.display = \"\";\n\n    if (pos.other) {\n      display.otherCursor.style.display = \"\";\n      display.otherCursor.style.left = pos.other.left + \"px\";\n      display.otherCursor.style.top = pos.other.top + \"px\";\n      display.otherCursor.style.height = (pos.other.bottom - pos.other.top) * .85 + \"px\";\n    } else { display.otherCursor.style.display = \"none\"; }\n  }\n\n  // Highlight selection\n  function updateSelectionRange(cm) {\n    var display = cm.display, doc = cm.view.doc, sel = cm.view.sel;\n    var fragment = document.createDocumentFragment();\n    var clientWidth = display.lineSpace.offsetWidth, pl = paddingLeft(cm.display);\n\n    function add(left, top, width, bottom) {\n      if (top < 0) top = 0;\n      fragment.appendChild(elt(\"div\", null, \"CodeMirror-selected\", \"position: absolute; left: \" + left +\n                               \"px; top: \" + top + \"px; width: \" + (width == null ? clientWidth - left : width) +\n                               \"px; height: \" + (bottom - top) + \"px\"));\n    }\n\n    function drawForLine(line, fromArg, toArg, retTop) {\n      var lineObj = getLine(doc, line);\n      var lineLen = lineObj.text.length, rVal = retTop ? Infinity : -Infinity;\n      function coords(ch) {\n        return charCoords(cm, {line: line, ch: ch}, \"div\", lineObj);\n      }\n\n      iterateBidiSections(getOrder(lineObj), fromArg || 0, toArg == null ? lineLen : toArg, function(from, to, dir) {\n        var leftPos = coords(dir == \"rtl\" ? to - 1 : from);\n        var rightPos = coords(dir == \"rtl\" ? from : to - 1);\n        var left = leftPos.left, right = rightPos.right;\n        if (rightPos.top - leftPos.top > 3) { // Different lines, draw top part\n          add(left, leftPos.top, null, leftPos.bottom);\n          left = pl;\n          if (leftPos.bottom < rightPos.top) add(left, leftPos.bottom, null, rightPos.top);\n        }\n        if (toArg == null && to == lineLen) right = clientWidth;\n        if (fromArg == null && from == 0) left = pl;\n        rVal = retTop ? Math.min(rightPos.top, rVal) : Math.max(rightPos.bottom, rVal);\n        if (left < pl + 1) left = pl;\n        add(left, rightPos.top, right - left, rightPos.bottom);\n      });\n      return rVal;\n    }\n\n    if (sel.from.line == sel.to.line) {\n      drawForLine(sel.from.line, sel.from.ch, sel.to.ch);\n    } else {\n      var fromObj = getLine(doc, sel.from.line);\n      var cur = fromObj, merged, path = [sel.from.line, sel.from.ch], singleLine;\n      while (merged = collapsedSpanAtEnd(cur)) {\n        var found = merged.find();\n        path.push(found.from.ch, found.to.line, found.to.ch);\n        if (found.to.line == sel.to.line) {\n          path.push(sel.to.ch);\n          singleLine = true;\n          break;\n        }\n        cur = getLine(doc, found.to.line);\n      }\n\n      // This is a single, merged line\n      if (singleLine) {\n        for (var i = 0; i < path.length; i += 3)\n          drawForLine(path[i], path[i+1], path[i+2]);\n      } else {\n        var middleTop, middleBot, toObj = getLine(doc, sel.to.line);\n        if (sel.from.ch)\n          // Draw the first line of selection.\n          middleTop = drawForLine(sel.from.line, sel.from.ch, null, false);\n        else\n          // Simply include it in the middle block.\n          middleTop = heightAtLine(cm, fromObj) - display.viewOffset;\n\n        if (!sel.to.ch)\n          middleBot = heightAtLine(cm, toObj) - display.viewOffset;\n        else\n          middleBot = drawForLine(sel.to.line, collapsedSpanAtStart(toObj) ? null : 0, sel.to.ch, true);\n\n        if (middleTop < middleBot) add(pl, middleTop, null, middleBot);\n      }\n    }\n\n    removeChildrenAndAdd(display.selectionDiv, fragment);\n    display.selectionDiv.style.display = \"\";\n  }\n\n  // Cursor-blinking\n  function restartBlink(cm) {\n    var display = cm.display;\n    clearInterval(display.blinker);\n    var on = true;\n    display.cursor.style.visibility = display.otherCursor.style.visibility = \"\";\n    display.blinker = setInterval(function() {\n      if (!display.cursor.offsetHeight) return;\n      display.cursor.style.visibility = display.otherCursor.style.visibility = (on = !on) ? \"\" : \"hidden\";\n    }, cm.options.cursorBlinkRate);\n  }\n\n  // HIGHLIGHT WORKER\n\n  function startWorker(cm, time) {\n    if (cm.view.frontier < cm.display.showingTo)\n      cm.view.highlight.set(time, bind(highlightWorker, cm));\n  }\n\n  function highlightWorker(cm) {\n    var view = cm.view, doc = view.doc;\n    if (view.frontier >= cm.display.showingTo) return;\n    var end = +new Date + cm.options.workTime;\n    var state = copyState(view.mode, getStateBefore(cm, view.frontier));\n    var changed = [], prevChange;\n    doc.iter(view.frontier, Math.min(doc.size, cm.display.showingTo + 500), function(line) {\n      if (view.frontier >= cm.display.showingFrom) { // Visible\n        if (highlightLine(cm, line, state) && view.frontier >= cm.display.showingFrom) {\n          if (prevChange && prevChange.end == view.frontier) prevChange.end++;\n          else changed.push(prevChange = {start: view.frontier, end: view.frontier + 1});\n        }\n        line.stateAfter = copyState(view.mode, state);\n      } else {\n        processLine(cm, line, state);\n        line.stateAfter = view.frontier % 5 == 0 ? copyState(view.mode, state) : null;\n      }\n      ++view.frontier;\n      if (+new Date > end) {\n        startWorker(cm, cm.options.workDelay);\n        return true;\n      }\n    });\n    if (changed.length)\n      operation(cm, function() {\n        for (var i = 0; i < changed.length; ++i)\n          regChange(this, changed[i].start, changed[i].end);\n      })();\n  }\n\n  // Finds the line to start with when starting a parse. Tries to\n  // find a line with a stateAfter, so that it can start with a\n  // valid state. If that fails, it returns the line with the\n  // smallest indentation, which tends to need the least context to\n  // parse correctly.\n  function findStartLine(cm, n) {\n    var minindent, minline, doc = cm.view.doc;\n    for (var search = n, lim = n - 100; search > lim; --search) {\n      if (search == 0) return 0;\n      var line = getLine(doc, search-1);\n      if (line.stateAfter) return search;\n      var indented = countColumn(line.text, null, cm.options.tabSize);\n      if (minline == null || minindent > indented) {\n        minline = search - 1;\n        minindent = indented;\n      }\n    }\n    return minline;\n  }\n\n  function getStateBefore(cm, n) {\n    var view = cm.view;\n    var pos = findStartLine(cm, n), state = pos && getLine(view.doc, pos-1).stateAfter;\n    if (!state) state = startState(view.mode);\n    else state = copyState(view.mode, state);\n    view.doc.iter(pos, n, function(line) {\n      processLine(cm, line, state);\n      var save = pos == n - 1 || pos % 5 == 0 || pos >= view.showingFrom && pos < view.showingTo;\n      line.stateAfter = save ? copyState(view.mode, state) : null;\n      ++pos;\n    });\n    return state;\n  }\n\n  // POSITION MEASUREMENT\n  \n  function paddingTop(display) {return display.lineSpace.offsetTop;}\n  function paddingLeft(display) {\n    var e = removeChildrenAndAdd(display.measure, elt(\"pre\")).appendChild(elt(\"span\", \"x\"));\n    return e.offsetLeft;\n  }\n\n  function measureChar(cm, line, ch, data) {\n    var data = data || measureLine(cm, line), dir = -1;\n    for (var pos = ch;; pos += dir) {\n      var r = data[pos];\n      if (r) break;\n      if (dir < 0 && pos == 0) dir = 1;\n    }\n    return {left: pos < ch ? r.right : r.left,\n            right: pos > ch ? r.left : r.right,\n            top: r.top, bottom: r.bottom};\n  }\n\n  function measureLine(cm, line) {\n    // First look in the cache\n    var display = cm.display, cache = cm.display.measureLineCache;\n    for (var i = 0; i < cache.length; ++i) {\n      var memo = cache[i];\n      if (memo.text == line.text && memo.markedSpans == line.markedSpans &&\n          display.scroller.clientWidth == memo.width)\n        return memo.measure;\n    }\n    \n    var measure = measureLineInner(cm, line);\n    // Store result in the cache\n    var memo = {text: line.text, width: display.scroller.clientWidth,\n                markedSpans: line.markedSpans, measure: measure};\n    if (cache.length == 16) cache[++display.measureLineCachePos % 16] = memo;\n    else cache.push(memo);\n    return measure;\n  }\n\n  function measureLineInner(cm, line) {\n    var display = cm.display, measure = emptyArray(line.text.length);\n    var pre = lineContent(cm, line, measure);\n\n    // IE does not cache element positions of inline elements between\n    // calls to getBoundingClientRect. This makes the loop below,\n    // which gathers the positions of all the characters on the line,\n    // do an amount of layout work quadratic to the number of\n    // characters. When line wrapping is off, we try to improve things\n    // by first subdividing the line into a bunch of inline blocks, so\n    // that IE can reuse most of the layout information from caches\n    // for those blocks. This does interfere with line wrapping, so it\n    // doesn't work when wrapping is on, but in that case the\n    // situation is slightly better, since IE does cache line-wrapping\n    // information and only recomputes per-line.\n    if (ie && !ie_lt8 && !cm.options.lineWrapping && pre.childNodes.length > 100) {\n      var fragment = document.createDocumentFragment();\n      var chunk = 10, n = pre.childNodes.length;\n      for (var i = 0, chunks = Math.ceil(n / chunk); i < chunks; ++i) {\n        var wrap = elt(\"div\", null, null, \"display: inline-block\");\n        for (var j = 0; j < chunk && n; ++j) {\n          wrap.appendChild(pre.firstChild);\n          --n;\n        }\n        fragment.appendChild(wrap);\n      }\n      pre.appendChild(fragment);\n    }\n\n    removeChildrenAndAdd(display.measure, pre);\n\n    var outer = display.lineDiv.getBoundingClientRect();\n    var vranges = [], data = emptyArray(line.text.length), maxBot = pre.offsetHeight;\n    for (var i = 0, cur; i < measure.length; ++i) if (cur = measure[i]) {\n      var size = cur.getBoundingClientRect();\n      var top = Math.max(0, size.top - outer.top), bot = Math.min(size.bottom - outer.top, maxBot);\n      for (var j = 0; j < vranges.length; j += 2) {\n        var rtop = vranges[j], rbot = vranges[j+1];\n        if (rtop > bot || rbot < top) continue;\n        if (rtop <= top && rbot >= bot ||\n            top <= rtop && bot >= rbot ||\n            Math.min(bot, rbot) - Math.max(top, rtop) >= (bot - top) >> 1) {\n          vranges[j] = Math.min(top, rtop);\n          vranges[j+1] = Math.max(bot, rbot);\n          break;\n        }\n      }\n      if (j == vranges.length) vranges.push(top, bot);\n      data[i] = {left: size.left - outer.left, right: size.right - outer.left, top: j};\n    }\n    for (var i = 0, cur; i < data.length; ++i) if (cur = data[i]) {\n      var vr = cur.top;\n      cur.top = vranges[vr]; cur.bottom = vranges[vr+1];\n    }\n    return data;\n  }\n\n  function clearCaches(cm) {\n    cm.display.measureLineCache.length = cm.display.measureLineCachePos = 0;\n    cm.display.cachedCharWidth = cm.display.cachedTextHeight = null;\n    cm.view.maxLineChanged = true;\n  }\n\n  // Context is one of \"line\", \"div\" (display.lineDiv), \"local\"/null (editor), or \"page\"\n  function intoCoordSystem(cm, lineObj, rect, context) {\n    if (lineObj.widgets) for (var i = 0; i < lineObj.widgets.length; ++i) if (lineObj.widgets[i].above) {\n      var size = lineObj.widgets[i].node.offsetHeight;\n      rect.top += size; rect.bottom += size;\n    }\n    if (context == \"line\") return rect;\n    if (!context) context = \"local\";\n    var yOff = heightAtLine(cm, lineObj);\n    if (context != \"local\") yOff -= cm.display.viewOffset;\n    if (context == \"page\") {\n      var lOff = cm.display.lineSpace.getBoundingClientRect();\n      yOff += lOff.top + (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      var xOff = lOff.left + (window.pageXOffset || (document.documentElement || document.body).scrollLeft);\n      rect.left += xOff; rect.right += xOff;\n    }\n    rect.top += yOff; rect.bottom += yOff;\n    return rect;\n  }\n\n  function charCoords(cm, pos, context, lineObj) {\n    if (!lineObj) lineObj = getLine(cm.view.doc, pos.line);\n    return intoCoordSystem(cm, lineObj, measureChar(cm, lineObj, pos.ch), context);\n  }\n\n  function cursorCoords(cm, pos, context, lineObj, measurement) {\n    lineObj = lineObj || getLine(cm.view.doc, pos.line);\n    if (!measurement) measurement = measureLine(cm, lineObj);\n    function get(ch, right) {\n      var m = measureChar(cm, lineObj, ch, measurement);\n      if (right) m.left = m.right; else m.right = m.left;\n      return intoCoordSystem(cm, lineObj, m, context);\n    }\n    var order = getOrder(lineObj), ch = pos.ch;\n    if (!order) return get(ch);\n    var main, other, linedir = order[0].level;\n    for (var i = 0; i < order.length; ++i) {\n      var part = order[i], rtl = part.level % 2, nb, here;\n      if (part.from < ch && part.to > ch) return get(ch, rtl);\n      var left = rtl ? part.to : part.from, right = rtl ? part.from : part.to;\n      if (left == ch) {\n        // Opera and IE return bogus offsets and widths for edges\n        // where the direction flips, but only for the side with the\n        // lower level. So we try to use the side with the higher\n        // level.\n        if (i && part.level < (nb = order[i-1]).level) here = get(nb.level % 2 ? nb.from : nb.to - 1, true);\n        else here = get(rtl && part.from != part.to ? ch - 1 : ch);\n        if (rtl == linedir) main = here; else other = here;\n      } else if (right == ch) {\n        var nb = i < order.length - 1 && order[i+1];\n        if (!rtl && nb && nb.from == nb.to) continue;\n        if (nb && part.level < nb.level) here = get(nb.level % 2 ? nb.to - 1 : nb.from);\n        else here = get(rtl ? ch : ch - 1, true);\n        if (rtl == linedir) main = here; else other = here;\n      }\n    }\n    if (linedir && !ch) other = get(order[0].to - 1);\n    if (!main) return other;\n    if (other) main.other = other;\n    return main;\n  }\n\n  // Coords must be lineSpace-local\n  function coordsChar(cm, x, y) {\n    var doc = cm.view.doc;\n    y += cm.display.viewOffset;\n    if (y < 0) return {line: 0, ch: 0, outside: true};\n    var lineNo = lineAtHeight(doc, y);\n    if (lineNo >= doc.size) return {line: doc.size - 1, ch: getLine(doc, doc.size - 1).text.length};\n    if (x < 0) x = 0;\n\n    for (;;) {\n      var lineObj = getLine(doc, lineNo);\n      var found = coordsCharInner(cm, lineObj, lineNo, x, y);\n      var merged = collapsedSpanAtEnd(lineObj);\n      if (merged && found.ch == lineRight(lineObj))\n        lineNo = merged.find().to.line;\n      else\n        return found;\n    }\n  }\n\n  function coordsCharInner(cm, lineObj, lineNo, x, y) {\n    var innerOff = y - heightAtLine(cm, lineObj);\n    var wrongLine = false, cWidth = cm.display.wrapper.clientWidth;\n    var measurement = measureLine(cm, lineObj);\n\n    function getX(ch) {\n      var sp = cursorCoords(cm, {line: lineNo, ch: ch}, \"line\",\n                            lineObj, measurement);\n      wrongLine = true;\n      if (innerOff > sp.bottom) return Math.max(0, sp.left - cWidth);\n      else if (innerOff < sp.top) return sp.left + cWidth;\n      else wrongLine = false;\n      return sp.left;\n    }\n\n    var bidi = getOrder(lineObj), dist = lineObj.text.length;\n    var from = lineLeft(lineObj), to = lineRight(lineObj);\n    var fromX = paddingLeft(cm.display), toX = getX(to);\n\n    if (x > toX) return {line: lineNo, ch: to, outside: wrongLine};\n    // Do a binary search between these bounds.\n    for (;;) {\n      if (bidi ? to == from || to == moveVisually(lineObj, from, 1) : to - from <= 1) {\n        var after = x - fromX < toX - x, ch = after ? from : to;\n        while (isExtendingChar.test(lineObj.text.charAt(ch))) ++ch;\n        return {line: lineNo, ch: ch, after: after, outside: wrongLine};\n      }\n      var step = Math.ceil(dist / 2), middle = from + step;\n      if (bidi) {\n        middle = from;\n        for (var i = 0; i < step; ++i) middle = moveVisually(lineObj, middle, 1);\n      }\n      var middleX = getX(middle);\n      if (middleX > x) {to = middle; toX = middleX; if (wrongLine) toX += 1000; dist -= step;}\n      else {from = middle; fromX = middleX; dist = step;}\n    }\n  }\n\n  var measureText;\n  function textHeight(display) {\n    if (display.cachedTextHeight != null) return display.cachedTextHeight;\n    if (measureText == null) {\n      measureText = elt(\"pre\");\n      // Measure a bunch of lines, for browsers that compute\n      // fractional heights.\n      for (var i = 0; i < 49; ++i) {\n        measureText.appendChild(document.createTextNode(\"x\"));\n        measureText.appendChild(elt(\"br\"));\n      }\n      measureText.appendChild(document.createTextNode(\"x\"));\n    }\n    removeChildrenAndAdd(display.measure, measureText);\n    var height = measureText.offsetHeight / 50;\n    if (height > 3) display.cachedTextHeight = height;\n    removeChildren(display.measure);\n    return height || 1;\n  }\n\n  function charWidth(display) {\n    if (display.cachedCharWidth != null) return display.cachedCharWidth;\n    var anchor = elt(\"span\", \"x\");\n    var pre = elt(\"pre\", [anchor]);\n    removeChildrenAndAdd(display.measure, pre);\n    var width = anchor.offsetWidth;\n    if (width > 2) display.cachedCharWidth = width;\n    return width || 10;\n  }\n\n  // OPERATIONS\n\n  // Operations are used to wrap changes in such a way that each\n  // change won't have to update the cursor and display (which would\n  // be awkward, slow, and error-prone), but instead updates are\n  // batched and then all combined and executed at once.\n\n  function startOperation(cm) {\n    if (cm.curOp) ++cm.curOp.depth;\n    else cm.curOp = {\n      // Nested operations delay update until the outermost one\n      // finishes.\n      depth: 1,\n      // An array of ranges of lines that have to be updated. See\n      // updateDisplay.\n      changes: [],\n      delayedCallbacks: [],\n      updateInput: null,\n      userSelChange: null,\n      textChanged: null,\n      selectionChanged: false,\n      updateMaxLine: false,\n      id: ++cm.nextOpId\n    };\n  }\n\n  function endOperation(cm) {\n    var op = cm.curOp;\n    if (--op.depth) return;\n    cm.curOp = null;\n    var view = cm.view, display = cm.display;\n    if (op.updateMaxLine) computeMaxLength(view);\n    if (view.maxLineChanged && !cm.options.lineWrapping) {\n      var width = measureChar(cm, view.maxLine, view.maxLine.text.length).right;\n      display.sizer.style.minWidth = (width + 3 + scrollerCutOff) + \"px\";\n      view.maxLineChanged = false;\n    }\n    var newScrollPos, updated;\n    if (op.selectionChanged) {\n      var coords = cursorCoords(cm, view.sel.head);\n      newScrollPos = calculateScrollPos(cm, coords.left, coords.top, coords.left, coords.bottom);\n    }\n    if (op.changes.length || newScrollPos && newScrollPos.scrollTop != null)\n      updated = updateDisplay(cm, op.changes, newScrollPos && newScrollPos.scrollTop);\n    if (!updated && op.selectionChanged) updateSelection(cm);\n    if (newScrollPos) scrollCursorIntoView(cm);\n    if (op.selectionChanged) restartBlink(cm);\n\n    if (view.focused && op.updateInput)\n      resetInput(cm, op.userSelChange);\n\n    if (op.textChanged)\n      signal(cm, \"change\", cm, op.textChanged);\n    if (op.selectionChanged) signal(cm, \"cursorActivity\", cm);\n    for (var i = 0; i < op.delayedCallbacks.length; ++i) op.delayedCallbacks[i](cm);\n  }\n\n  // Wraps a function in an operation. Returns the wrapped function.\n  function operation(cm1, f) {\n    return function() {\n      var cm = cm1 || this;\n      startOperation(cm);\n      try {var result = f.apply(cm, arguments);}\n      finally {endOperation(cm);}\n      return result;\n    };\n  }\n\n  function regChange(cm, from, to, lendiff) {\n    cm.curOp.changes.push({from: from, to: to, diff: lendiff});\n  }\n\n  // INPUT HANDLING\n\n  function slowPoll(cm) {\n    if (cm.view.pollingFast) return;\n    cm.display.poll.set(cm.options.pollInterval, function() {\n      readInput(cm);\n      if (cm.view.focused) slowPoll(cm);\n    });\n  }\n\n  function fastPoll(cm) {\n    var missed = false;\n    cm.display.pollingFast = true;\n    function p() {\n      var changed = readInput(cm);\n      if (!changed && !missed) {missed = true; cm.display.poll.set(60, p);}\n      else {cm.display.pollingFast = false; slowPoll(cm);}\n    }\n    cm.display.poll.set(20, p);\n  }\n\n  // prevInput is a hack to work with IME. If we reset the textarea\n  // on every change, that breaks IME. So we look for changes\n  // compared to the previous content instead. (Modern browsers have\n  // events that indicate IME taking place, but these are not widely\n  // supported or compatible enough yet to rely on.)\n  function readInput(cm) {\n    var input = cm.display.input, prevInput = cm.display.prevInput, view = cm.view, sel = view.sel;\n    if (!view.focused || hasSelection(input) || isReadOnly(cm)) return false;\n    var text = input.value;\n    if (text == prevInput && posEq(sel.from, sel.to)) return false;\n    startOperation(cm);\n    view.sel.shift = false;\n    var same = 0, l = Math.min(prevInput.length, text.length);\n    while (same < l && prevInput[same] == text[same]) ++same;\n    var from = sel.from, to = sel.to;\n    if (same < prevInput.length)\n      from = {line: from.line, ch: from.ch - (prevInput.length - same)};\n    else if (view.overwrite && posEq(from, to) && !cm.display.pasteIncoming)\n      to = {line: to.line, ch: Math.min(getLine(cm.view.doc, to.line).text.length, to.ch + (text.length - same))};\n    var updateInput = cm.curOp.updateInput;\n    updateDoc(cm, from, to, splitLines(text.slice(same)), \"end\",\n              cm.display.pasteIncoming ? \"paste\" : \"input\", {from: from, to: to});\n    cm.curOp.updateInput = updateInput;\n    if (text.length > 1000) input.value = cm.display.prevInput = \"\";\n    else cm.display.prevInput = text;\n    endOperation(cm);\n    cm.display.pasteIncoming = false;\n    return true;\n  }\n\n  function resetInput(cm, user) {\n    var view = cm.view, minimal, selected;\n    if (!posEq(view.sel.from, view.sel.to)) {\n      cm.display.prevInput = \"\";\n      minimal = hasCopyEvent &&\n        (view.sel.to.line - view.sel.from.line > 100 || (selected = cm.getSelection()).length > 1000);\n      if (minimal) cm.display.input.value = \"-\";\n      else cm.display.input.value = selected || cm.getSelection();\n      if (view.focused) selectInput(cm.display.input);\n    } else if (user) cm.display.prevInput = cm.display.input.value = \"\";\n    cm.display.inaccurateSelection = minimal;\n  }\n\n  function focusInput(cm) {\n    if (cm.options.readOnly != \"nocursor\" && (ie || document.activeElement != cm.display.input))\n      cm.display.input.focus();\n  }\n\n  function isReadOnly(cm) {\n    return cm.options.readOnly || cm.view.cantEdit;\n  }\n\n  // EVENT HANDLERS\n\n  function registerEventHandlers(cm) {\n    var d = cm.display;\n    on(d.scroller, \"mousedown\", operation(cm, onMouseDown));\n    on(d.scroller, \"dblclick\", operation(cm, e_preventDefault));\n    on(d.lineSpace, \"selectstart\", function(e) {\n      if (!mouseEventInWidget(d, e)) e_preventDefault(e);\n    });\n    // Gecko browsers fire contextmenu *after* opening the menu, at\n    // which point we can't mess with it anymore. Context menu is\n    // handled in onMouseDown for Gecko.\n    if (!gecko) on(d.scroller, \"contextmenu\", function(e) {onContextMenu(cm, e);});\n\n    on(d.scroller, \"scroll\", function() {\n      setScrollTop(cm, d.scroller.scrollTop);\n      setScrollLeft(cm, d.scroller.scrollLeft, true);\n      signal(cm, \"scroll\", cm);\n    });\n    on(d.scrollbarV, \"scroll\", function() {\n      setScrollTop(cm, d.scrollbarV.scrollTop);\n    });\n    on(d.scrollbarH, \"scroll\", function() {\n      setScrollLeft(cm, d.scrollbarH.scrollLeft);\n    });\n\n    on(d.scroller, \"mousewheel\", function(e){onScrollWheel(cm, e);});\n    on(d.scroller, \"DOMMouseScroll\", function(e){onScrollWheel(cm, e);});\n\n    function reFocus() { if (cm.view.focused) setTimeout(bind(focusInput, cm), 0); }\n    on(d.scrollbarH, \"mousedown\", reFocus);\n    on(d.scrollbarV, \"mousedown\", reFocus);\n    // Prevent wrapper from ever scrolling\n    on(d.wrapper, \"scroll\", function() { d.wrapper.scrollTop = d.wrapper.scrollLeft = 0; });\n    on(window, \"resize\", function resizeHandler() {\n      // Might be a text scaling operation, clear size caches.\n      d.cachedCharWidth = d.cachedTextHeight = null;\n      clearCaches(cm);\n      if (d.wrapper.parentNode) updateDisplay(cm, true);\n      else off(window, \"resize\", resizeHandler);\n    });\n\n    on(d.input, \"keyup\", operation(cm, function(e) {\n      if (cm.options.onKeyEvent && cm.options.onKeyEvent(cm, addStop(e))) return;\n      if (e_prop(e, \"keyCode\") == 16) cm.view.sel.shift = false;\n    }));\n    on(d.input, \"input\", bind(fastPoll, cm));\n    on(d.input, \"keydown\", operation(cm, onKeyDown));\n    on(d.input, \"keypress\", operation(cm, onKeyPress));\n    on(d.input, \"focus\", bind(onFocus, cm));\n    on(d.input, \"blur\", bind(onBlur, cm));\n\n    function drag_(e) {\n      if (cm.options.onDragEvent && cm.options.onDragEvent(cm, addStop(e))) return;\n      e_stop(e);\n    }\n    if (cm.options.dragDrop) {\n      on(d.scroller, \"dragstart\", function(e){onDragStart(cm, e);});\n      on(d.scroller, \"dragenter\", drag_);\n      on(d.scroller, \"dragover\", drag_);\n      on(d.scroller, \"drop\", operation(cm, onDrop));\n    }\n    on(d.scroller, \"paste\", function(){focusInput(cm); fastPoll(cm);});\n    on(d.input, \"paste\", function() {\n      d.pasteIncoming = true;\n      fastPoll(cm);\n    });\n\n    function prepareCopy() {\n      if (d.inaccurateSelection) {\n        d.prevInput = \"\";\n        d.inaccurateSelection = false;\n        d.input.value = cm.getSelection();\n        selectInput(d.input);\n      }\n    }\n    on(d.input, \"cut\", prepareCopy);\n    on(d.input, \"copy\", prepareCopy);\n\n    // Needed to handle Tab key in KHTML\n    if (khtml) on(d.sizer, \"mouseup\", function() {\n        if (document.activeElement == d.input) d.input.blur();\n        focusInput(cm);\n    });\n  }\n\n  function mouseEventInWidget(display, e) {\n    for (var n = e_target(e); n != display.wrapper; n = n.parentNode)\n      if (/\\bCodeMirror-(?:line)?widget\\b/.test(n.className) ||\n          n.parentNode == display.sizer && n != display.mover) return true;\n  }\n\n  function posFromMouse(cm, e, liberal) {\n    var display = cm.display;\n    if (!liberal) {\n      var target = e_target(e);\n      if (target == display.scrollbarH || target == display.scrollbarH.firstChild ||\n          target == display.scrollbarV || target == display.scrollbarV.firstChild ||\n          target == display.scrollbarFiller) return null;\n    }\n    var x, y, space = display.lineSpace.getBoundingClientRect();\n    // Fails unpredictably on IE[67] when mouse is dragged around quickly.\n    try { x = e.clientX; y = e.clientY; } catch (e) { return null; }\n    return coordsChar(cm, x - space.left, y - space.top);\n  }\n\n  var lastClick, lastDoubleClick;\n  function onMouseDown(e) {\n    var cm = this, display = cm.display, view = cm.view, sel = view.sel, doc = view.doc;\n    sel.shift = e_prop(e, \"shiftKey\");\n\n    if (mouseEventInWidget(display, e)) {\n      if (!webkit) {\n        display.scroller.draggable = false;\n        setTimeout(function(){display.scroller.draggable = true;}, 100);\n      }\n      return;\n    }\n    if (clickInGutter(cm, e)) return;\n    var start = posFromMouse(cm, e);\n\n    switch (e_button(e)) {\n    case 3:\n      if (gecko) onContextMenu.call(cm, cm, e);\n      return;\n    case 2:\n      if (start) extendSelection(cm, start);\n      setTimeout(bind(focusInput, cm), 20);\n      e_preventDefault(e);\n      return;\n    }\n    // For button 1, if it was clicked inside the editor\n    // (posFromMouse returning non-null), we have to adjust the\n    // selection.\n    if (!start) {if (e_target(e) == display.scroller) e_preventDefault(e); return;}\n\n    if (!view.focused) onFocus(cm);\n\n    var now = +new Date, type = \"single\";\n    if (lastDoubleClick && lastDoubleClick.time > now - 400 && posEq(lastDoubleClick.pos, start)) {\n      type = \"triple\";\n      e_preventDefault(e);\n      setTimeout(bind(focusInput, cm), 20);\n      selectLine(cm, start.line);\n    } else if (lastClick && lastClick.time > now - 400 && posEq(lastClick.pos, start)) {\n      type = \"double\";\n      lastDoubleClick = {time: now, pos: start};\n      e_preventDefault(e);\n      var word = findWordAt(getLine(doc, start.line).text, start);\n      extendSelection(cm, word.from, word.to);\n    } else { lastClick = {time: now, pos: start}; }\n\n    var last = start;\n    if (cm.options.dragDrop && dragAndDrop && !isReadOnly(cm) && !posEq(sel.from, sel.to) &&\n        !posLess(start, sel.from) && !posLess(sel.to, start) && type == \"single\") {\n      var dragEnd = operation(cm, function(e2) {\n        if (webkit) display.scroller.draggable = false;\n        view.draggingText = false;\n        off(document, \"mouseup\", dragEnd);\n        off(display.scroller, \"drop\", dragEnd);\n        if (Math.abs(e.clientX - e2.clientX) + Math.abs(e.clientY - e2.clientY) < 10) {\n          e_preventDefault(e2);\n          extendSelection(cm, start);\n          focusInput(cm);\n        }\n      });\n      // Let the drag handler handle this.\n      if (webkit) display.scroller.draggable = true;\n      view.draggingText = dragEnd;\n      // IE's approach to draggable\n      if (display.scroller.dragDrop) display.scroller.dragDrop();\n      on(document, \"mouseup\", dragEnd);\n      on(display.scroller, \"drop\", dragEnd);\n      return;\n    }\n    e_preventDefault(e);\n    if (type == \"single\") extendSelection(cm, clipPos(doc, start));\n\n    var startstart = sel.from, startend = sel.to;\n\n    function doSelect(cur) {\n      if (type == \"single\") {\n        extendSelection(cm, clipPos(doc, start), cur);\n        return;\n      }\n\n      startstart = clipPos(doc, startstart);\n      startend = clipPos(doc, startend);\n      if (type == \"double\") {\n        var word = findWordAt(getLine(doc, cur.line).text, cur);\n        if (posLess(cur, startstart)) extendSelection(cm, word.from, startend);\n        else extendSelection(cm, startstart, word.to);\n      } else if (type == \"triple\") {\n        if (posLess(cur, startstart)) extendSelection(cm, startend, clipPos(doc, {line: cur.line, ch: 0}));\n        else extendSelection(cm, startstart, clipPos(doc, {line: cur.line + 1, ch: 0}));\n      }\n    }\n\n    var editorSize = display.wrapper.getBoundingClientRect();\n    // Used to ensure timeout re-tries don't fire when another extend\n    // happened in the meantime (clearTimeout isn't reliable -- at\n    // least on Chrome, the timeouts still happen even when cleared,\n    // if the clear happens after their scheduled firing time).\n    var counter = 0;\n\n    function extend(e) {\n      var curCount = ++counter;\n      var cur = posFromMouse(cm, e, true);\n      if (!cur) return;\n      if (!posEq(cur, last)) {\n        if (!view.focused) onFocus(cm);\n        last = cur;\n        doSelect(cur);\n        var visible = visibleLines(display, doc);\n        if (cur.line >= visible.to || cur.line < visible.from)\n          setTimeout(operation(cm, function(){if (counter == curCount) extend(e);}), 150);\n      } else {\n        var outside = e.clientY < editorSize.top ? -20 : e.clientY > editorSize.bottom ? 20 : 0;\n        if (outside) setTimeout(operation(cm, function() {\n          if (counter != curCount) return;\n          display.scroller.scrollTop += outside;\n          extend(e);\n        }), 50);\n      }\n    }\n\n    function done(e) {\n      counter = Infinity;\n      var cur = posFromMouse(cm, e);\n      if (cur) doSelect(cur);\n      e_preventDefault(e);\n      focusInput(cm);\n      off(document, \"mousemove\", move);\n      off(document, \"mouseup\", up);\n    }\n\n    var move = operation(cm, function(e) {\n      if (!ie && !e_button(e)) done(e);\n      else extend(e);\n    });\n    var up = operation(cm, done);\n    on(document, \"mousemove\", move);\n    on(document, \"mouseup\", up);\n  }\n\n  function onDrop(e) {\n    var cm = this;\n    if (cm.options.onDragEvent && cm.options.onDragEvent(cm, addStop(e))) return;\n    e_preventDefault(e);\n    var pos = posFromMouse(cm, e, true), files = e.dataTransfer.files;\n    if (!pos || isReadOnly(cm)) return;\n    if (files && files.length && window.FileReader && window.File) {\n      var n = files.length, text = Array(n), read = 0;\n      var loadFile = function(file, i) {\n        var reader = new FileReader;\n        reader.onload = function() {\n          text[i] = reader.result;\n          if (++read == n) {\n            pos = clipPos(cm.view.doc, pos);\n            operation(cm, function() {\n              var end = replaceRange(cm, text.join(\"\"), pos, pos, \"paste\");\n              setSelection(cm, pos, end);\n            })();\n          }\n        };\n        reader.readAsText(file);\n      };\n      for (var i = 0; i < n; ++i) loadFile(files[i], i);\n    } else {\n      // Don't do a replace if the drop happened inside of the selected text.\n      if (cm.view.draggingText && !(posLess(pos, cm.view.sel.from) || posLess(cm.view.sel.to, pos))) {\n        cm.view.draggingText(e);\n        if (ie) setTimeout(bind(focusInput, cm), 50);\n        return;\n      }\n      try {\n        var text = e.dataTransfer.getData(\"Text\");\n        if (text) {\n          var curFrom = cm.view.sel.from, curTo = cm.view.sel.to;\n          setSelection(cm, pos, pos);\n          if (cm.view.draggingText) replaceRange(cm, \"\", curFrom, curTo, \"paste\");\n          cm.replaceSelection(text, null, \"paste\");\n          focusInput(cm);\n          onFocus(cm);\n        }\n      }\n      catch(e){}\n    }\n  }\n\n  function clickInGutter(cm, e) {\n    var display = cm.display;\n    try { var mX = e.clientX, mY = e.clientY; }\n    catch(e) { return false; }\n\n    if (mX >= Math.floor(display.gutters.getBoundingClientRect().right)) return false;\n    e_preventDefault(e);\n    if (!hasHandler(cm, \"gutterClick\")) return true;\n\n    var lineBox = display.lineDiv.getBoundingClientRect();\n    if (mY > lineBox.bottom) return true;\n    mY -= lineBox.top - display.viewOffset;\n\n    for (var i = 0; i < cm.options.gutters.length; ++i) {\n      var g = display.gutters.childNodes[i];\n      if (g && g.getBoundingClientRect().right >= mX) {\n        var line = lineAtHeight(cm.view.doc, mY);\n        var gutter = cm.options.gutters[i];\n        signalLater(cm, cm, \"gutterClick\", cm, line, gutter, e);\n        break;\n      }\n    }\n    return true;\n  }\n\n  function onDragStart(cm, e) {\n    var txt = cm.getSelection();\n    e.dataTransfer.setData(\"Text\", txt);\n\n    // Use dummy image instead of default browsers image.\n    // Recent Safari (~6.0.2) have a tendency to segfault when this happens, so we don't do it there.\n    if (e.dataTransfer.setDragImage && !safari)\n      e.dataTransfer.setDragImage(elt('img'), 0, 0);\n  }\n\n  function setScrollTop(cm, val) {\n    if (Math.abs(cm.view.scrollTop - val) < 2) return;\n    cm.view.scrollTop = val;\n    if (!gecko) updateDisplay(cm, [], val);\n    if (cm.display.scroller.scrollTop != val) cm.display.scroller.scrollTop = val;\n    if (cm.display.scrollbarV.scrollTop != val) cm.display.scrollbarV.scrollTop = val;\n    if (gecko) updateDisplay(cm, []);\n  }\n  function setScrollLeft(cm, val, isScroller) {\n    if (isScroller ? val == cm.view.scrollLeft : Math.abs(cm.view.scrollLeft - val) < 2) return;\n    cm.view.scrollLeft = val;\n    alignHorizontally(cm);\n    if (cm.display.scroller.scrollLeft != val) cm.display.scroller.scrollLeft = val;\n    if (cm.display.scrollbarH.scrollLeft != val) cm.display.scrollbarH.scrollLeft = val;\n  }\n\n  // Since the delta values reported on mouse wheel events are\n  // unstandardized between browsers and even browser versions, and\n  // generally horribly unpredictable, this code starts by measuring\n  // the scroll effect that the first few mouse wheel events have,\n  // and, from that, detects the way it can convert deltas to pixel\n  // offsets afterwards.\n  //\n  // The reason we want to know the amount a wheel event will scroll\n  // is that it gives us a chance to update the display before the\n  // actual scrolling happens, reducing flickering.\n\n  var wheelSamples = 0, wheelDX, wheelDY, wheelStartX, wheelStartY, wheelPixelsPerUnit = null;\n  // Fill in a browser-detected starting value on browsers where we\n  // know one. These don't have to be accurate -- the result of them\n  // being wrong would just be a slight flicker on the first wheel\n  // scroll (if it is large enough).\n  if (ie) wheelPixelsPerUnit = -.53;\n  else if (gecko) wheelPixelsPerUnit = 15;\n  else if (chrome) wheelPixelsPerUnit = -.7;\n  else if (safari) wheelPixelsPerUnit = -1/3;\n\n  function onScrollWheel(cm, e) {\n    var dx = e.wheelDeltaX, dy = e.wheelDeltaY;\n    if (dx == null && e.detail && e.axis == e.HORIZONTAL_AXIS) dx = e.detail;\n    if (dy == null && e.detail && e.axis == e.VERTICAL_AXIS) dy = e.detail;\n    else if (dy == null) dy = e.wheelDelta;\n\n    // Webkit browsers on OS X abort momentum scrolls when the target\n    // of the scroll event is removed from the scrollable element.\n    // This hack (see related code in patchDisplay) makes sure the\n    // element is kept around.\n    if (dy && mac && webkit) {\n      for (var cur = e.target; cur != scroll; cur = cur.parentNode) {\n        if (cur.lineObj) {\n          cm.display.currentWheelTarget = cur;\n          break;\n        }\n      }\n    }\n\n    var scroll = cm.display.scroller;\n    // On some browsers, horizontal scrolling will cause redraws to\n    // happen before the gutter has been realigned, causing it to\n    // wriggle around in a most unseemly way. When we have an\n    // estimated pixels/delta value, we just handle horizontal\n    // scrolling entirely here. It'll be slightly off from native, but\n    // better than glitching out.\n    if (dx && !gecko && !opera && wheelPixelsPerUnit != null) {\n      if (dy)\n        setScrollTop(cm, Math.max(0, Math.min(scroll.scrollTop + dy * wheelPixelsPerUnit, scroll.scrollHeight - scroll.clientHeight)));\n      setScrollLeft(cm, Math.max(0, Math.min(scroll.scrollLeft + dx * wheelPixelsPerUnit, scroll.scrollWidth - scroll.clientWidth)));\n      e_preventDefault(e);\n      wheelStartX = null; // Abort measurement, if in progress\n      return;\n    }\n\n    if (dy && wheelPixelsPerUnit != null) {\n      var pixels = dy * wheelPixelsPerUnit;\n      var top = cm.view.scrollTop, bot = top + cm.display.wrapper.clientHeight;\n      if (pixels < 0) top = Math.max(0, top + pixels - 50);\n      else bot = Math.min(cm.view.doc.height, bot + pixels + 50);\n      updateDisplay(cm, [], {top: top, bottom: bot});\n    }\n\n    if (wheelSamples < 20) {\n      if (wheelStartX == null) {\n        wheelStartX = scroll.scrollLeft; wheelStartY = scroll.scrollTop;\n        wheelDX = dx; wheelDY = dy;\n        setTimeout(function() {\n          if (wheelStartX == null) return;\n          var movedX = scroll.scrollLeft - wheelStartX;\n          var movedY = scroll.scrollTop - wheelStartY;\n          var sample = (movedY && wheelDY && movedY / wheelDY) ||\n            (movedX && wheelDX && movedX / wheelDX);\n          wheelStartX = wheelStartY = null;\n          if (!sample) return;\n          wheelPixelsPerUnit = (wheelPixelsPerUnit * wheelSamples + sample) / (wheelSamples + 1);\n          ++wheelSamples;\n        }, 200);\n      } else {\n        wheelDX += dx; wheelDY += dy;\n      }\n    }\n  }\n\n  function doHandleBinding(cm, bound, dropShift) {\n    if (typeof bound == \"string\") {\n      bound = commands[bound];\n      if (!bound) return false;\n    }\n    // Ensure previous input has been read, so that the handler sees a\n    // consistent view of the document\n    if (cm.display.pollingFast && readInput(cm)) cm.display.pollingFast = false;\n    var view = cm.view, prevShift = view.sel.shift;\n    try {\n      if (isReadOnly(cm)) view.suppressEdits = true;\n      if (dropShift) view.sel.shift = false;\n      bound(cm);\n    } catch(e) {\n      if (e != Pass) throw e;\n      return false;\n    } finally {\n      view.sel.shift = prevShift;\n      view.suppressEdits = false;\n    }\n    return true;\n  }\n\n  function allKeyMaps(cm) {\n    var maps = cm.view.keyMaps.slice(0);\n    maps.push(cm.options.keyMap);\n    if (cm.options.extraKeys) maps.unshift(cm.options.extraKeys);\n    return maps;\n  }\n\n  var maybeTransition;\n  function handleKeyBinding(cm, e) {\n    // Handle auto keymap transitions\n    var startMap = getKeyMap(cm.options.keyMap), next = startMap.auto;\n    clearTimeout(maybeTransition);\n    if (next && !isModifierKey(e)) maybeTransition = setTimeout(function() {\n      if (getKeyMap(cm.options.keyMap) == startMap)\n        cm.options.keyMap = (next.call ? next.call(null, cm) : next);\n    }, 50);\n\n    var name = keyNames[e_prop(e, \"keyCode\")], handled = false;\n    var flipCtrlCmd = mac && (opera || qtwebkit);\n    if (name == null || e.altGraphKey) return false;\n    if (e_prop(e, \"altKey\")) name = \"Alt-\" + name;\n    if (e_prop(e, flipCtrlCmd ? \"metaKey\" : \"ctrlKey\")) name = \"Ctrl-\" + name;\n    if (e_prop(e, flipCtrlCmd ? \"ctrlKey\" : \"metaKey\")) name = \"Cmd-\" + name;\n\n    var stopped = false;\n    function stop() { stopped = true; }\n    var keymaps = allKeyMaps(cm);\n\n    if (e_prop(e, \"shiftKey\")) {\n      handled = lookupKey(\"Shift-\" + name, keymaps,\n                          function(b) {return doHandleBinding(cm, b, true);}, stop)\n        || lookupKey(name, keymaps, function(b) {\n          if (typeof b == \"string\" && /^go[A-Z]/.test(b)) return doHandleBinding(cm, b);\n        }, stop);\n    } else {\n      handled = lookupKey(name, keymaps,\n                          function(b) { return doHandleBinding(cm, b); }, stop);\n    }\n    if (stopped) handled = false;\n    if (handled) {\n      e_preventDefault(e);\n      restartBlink(cm);\n      if (ie_lt9) { e.oldKeyCode = e.keyCode; e.keyCode = 0; }\n    }\n    return handled;\n  }\n\n  function handleCharBinding(cm, e, ch) {\n    var handled = lookupKey(\"'\" + ch + \"'\", allKeyMaps(cm),\n                            function(b) { return doHandleBinding(cm, b, true); });\n    if (handled) {\n      e_preventDefault(e);\n      restartBlink(cm);\n    }\n    return handled;\n  }\n\n  var lastStoppedKey = null;\n  function onKeyDown(e) {\n    var cm = this;\n    if (!cm.view.focused) onFocus(cm);\n    if (ie && e.keyCode == 27) { e.returnValue = false; }\n    if (cm.options.onKeyEvent && cm.options.onKeyEvent(cm, addStop(e))) return;\n    var code = e_prop(e, \"keyCode\");\n    // IE does strange things with escape.\n    cm.view.sel.shift = code == 16 || e_prop(e, \"shiftKey\");\n    // First give onKeyEvent option a chance to handle this.\n    var handled = handleKeyBinding(cm, e);\n    if (opera) {\n      lastStoppedKey = handled ? code : null;\n      // Opera has no cut event... we try to at least catch the key combo\n      if (!handled && code == 88 && !hasCopyEvent && e_prop(e, mac ? \"metaKey\" : \"ctrlKey\"))\n        cm.replaceSelection(\"\");\n    }\n  }\n\n  function onKeyPress(e) {\n    var cm = this;\n    if (cm.options.onKeyEvent && cm.options.onKeyEvent(cm, addStop(e))) return;\n    var keyCode = e_prop(e, \"keyCode\"), charCode = e_prop(e, \"charCode\");\n    if (opera && keyCode == lastStoppedKey) {lastStoppedKey = null; e_preventDefault(e); return;}\n    if (((opera && (!e.which || e.which < 10)) || khtml) && handleKeyBinding(cm, e)) return;\n    var ch = String.fromCharCode(charCode == null ? keyCode : charCode);\n    if (this.options.electricChars && this.view.mode.electricChars &&\n        this.options.smartIndent && !isReadOnly(this) &&\n        this.view.mode.electricChars.indexOf(ch) > -1)\n      setTimeout(operation(cm, function() {indentLine(cm, cm.view.sel.to.line, \"smart\");}), 75);\n    if (handleCharBinding(cm, e, ch)) return;\n    fastPoll(cm);\n  }\n\n  function onFocus(cm) {\n    if (cm.options.readOnly == \"nocursor\") return;\n    if (!cm.view.focused) {\n      signal(cm, \"focus\", cm);\n      cm.view.focused = true;\n      if (cm.display.scroller.className.search(/\\bCodeMirror-focused\\b/) == -1)\n        cm.display.scroller.className += \" CodeMirror-focused\";\n      resetInput(cm, true);\n    }\n    slowPoll(cm);\n    restartBlink(cm);\n  }\n  function onBlur(cm) {\n    if (cm.view.focused) {\n      signal(cm, \"blur\", cm);\n      cm.view.focused = false;\n      cm.display.scroller.className = cm.display.scroller.className.replace(\" CodeMirror-focused\", \"\");\n    }\n    clearInterval(cm.display.blinker);\n    setTimeout(function() {if (!cm.view.focused) cm.view.sel.shift = false;}, 150);\n  }\n\n  var detectingSelectAll;\n  function onContextMenu(cm, e) {\n    var display = cm.display, sel = cm.view.sel;\n    var pos = posFromMouse(cm, e), scrollPos = display.scroller.scrollTop;\n    if (!pos || opera) return; // Opera is difficult.\n    if (posEq(sel.from, sel.to) || posLess(pos, sel.from) || !posLess(pos, sel.to))\n      operation(cm, setSelection)(cm, pos, pos);\n\n    var oldCSS = display.input.style.cssText;\n    display.inputDiv.style.position = \"absolute\";\n    display.input.style.cssText = \"position: fixed; width: 30px; height: 30px; top: \" + (e.clientY - 5) +\n      \"px; left: \" + (e.clientX - 5) + \"px; z-index: 1000; background: white; outline: none;\" +\n      \"border-width: 0; outline: none; overflow: hidden; opacity: .05; filter: alpha(opacity=5);\";\n    focusInput(cm);\n    resetInput(cm, true);\n    // Adds \"Select all\" to context menu in FF\n    if (posEq(sel.from, sel.to)) display.input.value = display.prevInput = \" \";\n\n    function rehide() {\n      display.inputDiv.style.position = \"relative\";\n      display.input.style.cssText = oldCSS;\n      if (ie_lt9) display.scrollbarV.scrollTop = display.scroller.scrollTop = scrollPos;\n      slowPoll(cm);\n\n      // Try to detect the user choosing select-all \n      if (display.input.selectionStart != null) {\n        clearTimeout(detectingSelectAll);\n        var extval = display.input.value = \" \" + (posEq(sel.from, sel.to) ? \"\" : display.input.value), i = 0;\n        display.prevInput = \" \";\n        display.input.selectionStart = 1; display.input.selectionEnd = extval.length;\n        detectingSelectAll = setTimeout(function poll(){\n          if (display.prevInput == \" \" && display.input.selectionStart == 0)\n            operation(cm, commands.selectAll)(cm);\n          else if (i++ < 10) detectingSelectAll = setTimeout(poll, 500);\n          else resetInput(cm);\n        }, 200);\n      }\n    }\n\n    if (gecko) {\n      e_stop(e);\n      on(window, \"mouseup\", function mouseup() {\n        off(window, \"mouseup\", mouseup);\n        setTimeout(rehide, 20);\n      });\n    } else {\n      setTimeout(rehide, 50);\n    }\n  }\n\n  // UPDATING\n\n  // Replace the range from from to to by the strings in newText.\n  // Afterwards, set the selection to selFrom, selTo.\n  function updateDoc(cm, from, to, newText, selUpdate, origin) {\n    // Possibly split or suppress the update based on the presence\n    // of read-only spans in its range.\n    var split = sawReadOnlySpans &&\n      removeReadOnlyRanges(cm.view.doc, from, to);\n    if (split) {\n      for (var i = split.length - 1; i >= 1; --i)\n        updateDocInner(cm, split[i].from, split[i].to, [\"\"], origin);\n      if (split.length)\n        return updateDocInner(cm, split[0].from, split[0].to, newText, selUpdate, origin);\n    } else {\n      return updateDocInner(cm, from, to, newText, selUpdate, origin);\n    }\n  }\n\n  function updateDocInner(cm, from, to, newText, selUpdate, origin) {\n    if (cm.view.suppressEdits) return;\n\n    var view = cm.view, doc = view.doc, old = [];\n    doc.iter(from.line, to.line + 1, function(line) {\n      old.push(newHL(line.text, line.markedSpans));\n    });\n    var startSelFrom = view.sel.from, startSelTo = view.sel.to;\n    var lines = updateMarkedSpans(hlSpans(old[0]), hlSpans(lst(old)), from.ch, to.ch, newText);\n    var retval = updateDocNoUndo(cm, from, to, lines, selUpdate, origin);\n    if (view.history) addChange(cm, from.line, newText.length, old, origin,\n                                startSelFrom, startSelTo, view.sel.from, view.sel.to);\n    return retval;\n  }\n\n  function unredoHelper(cm, type) {\n    var doc = cm.view.doc, hist = cm.view.history;\n    var set = (type == \"undo\" ? hist.done : hist.undone).pop();\n    if (!set) return;\n    var anti = {events: [], fromBefore: set.fromAfter, toBefore: set.toAfter,\n                fromAfter: set.fromBefore, toAfter: set.toBefore};\n    for (var i = set.events.length - 1; i >= 0; i -= 1) {\n      hist.dirtyCounter += type == \"undo\" ? -1 : 1;\n      var change = set.events[i];\n      var replaced = [], end = change.start + change.added;\n      doc.iter(change.start, end, function(line) { replaced.push(newHL(line.text, line.markedSpans)); });\n      anti.events.push({start: change.start, added: change.old.length, old: replaced});\n      var selPos = i ? null : {from: set.fromBefore, to: set.toBefore};\n      updateDocNoUndo(cm, {line: change.start, ch: 0}, {line: end - 1, ch: getLine(doc, end-1).text.length},\n                      change.old, selPos, type);\n    }\n    (type == \"undo\" ? hist.undone : hist.done).push(anti);\n  }\n\n  function updateDocNoUndo(cm, from, to, lines, selUpdate, origin) {\n    var view = cm.view, doc = view.doc, display = cm.display;\n    if (view.suppressEdits) return;\n\n    var nlines = to.line - from.line, firstLine = getLine(doc, from.line), lastLine = getLine(doc, to.line);\n    var recomputeMaxLength = false, checkWidthStart = from.line;\n    if (!cm.options.lineWrapping) {\n      checkWidthStart = lineNo(visualLine(doc, firstLine));\n      doc.iter(checkWidthStart, to.line + 1, function(line) {\n        if (lineLength(doc, line) == view.maxLineLength) {\n          recomputeMaxLength = true;\n          return true;\n        }\n      });\n    }\n\n    var lastHL = lst(lines), th = textHeight(display);\n\n    // First adjust the line structure\n    if (from.ch == 0 && to.ch == 0 && hlText(lastHL) == \"\") {\n      // This is a whole-line replace. Treated specially to make\n      // sure line objects move the way they are supposed to.\n      var added = [];\n      for (var i = 0, e = lines.length - 1; i < e; ++i)\n        added.push(makeLine(hlText(lines[i]), hlSpans(lines[i]), th));\n      updateLine(cm, lastLine, lastLine.text, hlSpans(lastHL));\n      if (nlines) doc.remove(from.line, nlines, cm);\n      if (added.length) doc.insert(from.line, added);\n    } else if (firstLine == lastLine) {\n      if (lines.length == 1) {\n        updateLine(cm, firstLine, firstLine.text.slice(0, from.ch) + hlText(lines[0]) +\n                   firstLine.text.slice(to.ch), hlSpans(lines[0]));\n      } else {\n        for (var added = [], i = 1, e = lines.length - 1; i < e; ++i)\n          added.push(makeLine(hlText(lines[i]), hlSpans(lines[i]), th));\n        added.push(makeLine(hlText(lastHL) + firstLine.text.slice(to.ch), hlSpans(lastHL), th));\n        updateLine(cm, firstLine, firstLine.text.slice(0, from.ch) + hlText(lines[0]), hlSpans(lines[0]));\n        doc.insert(from.line + 1, added);\n      }\n    } else if (lines.length == 1) {\n      updateLine(cm, firstLine, firstLine.text.slice(0, from.ch) + hlText(lines[0]) +\n                 lastLine.text.slice(to.ch), hlSpans(lines[0]));\n      doc.remove(from.line + 1, nlines, cm);\n    } else {\n      var added = [];\n      updateLine(cm, firstLine, firstLine.text.slice(0, from.ch) + hlText(lines[0]), hlSpans(lines[0]));\n      updateLine(cm, lastLine, hlText(lastHL) + lastLine.text.slice(to.ch), hlSpans(lastHL));\n      for (var i = 1, e = lines.length - 1; i < e; ++i)\n        added.push(makeLine(hlText(lines[i]), hlSpans(lines[i]), th));\n      if (nlines > 1) doc.remove(from.line + 1, nlines - 1, cm);\n      doc.insert(from.line + 1, added);\n    }\n\n    if (cm.options.lineWrapping) {\n      var perLine = Math.max(5, display.scroller.clientWidth / charWidth(display) - 3);\n      doc.iter(from.line, from.line + lines.length, function(line) {\n        if (line.height == 0) return;\n        var guess = (Math.ceil(line.text.length / perLine) || 1) * th;\n        if (guess != line.height) updateLineHeight(line, guess);\n      });\n    } else {\n      doc.iter(checkWidthStart, from.line + lines.length, function(line) {\n        var len = lineLength(doc, line);\n        if (len > view.maxLineLength) {\n          view.maxLine = line;\n          view.maxLineLength = len;\n          view.maxLineChanged = true;\n          recomputeMaxLength = false;\n        }\n      });\n      if (recomputeMaxLength) cm.curOp.updateMaxLine = true;\n    }\n\n    // Adjust frontier, schedule worker\n    view.frontier = Math.min(view.frontier, from.line);\n    startWorker(cm, 400);\n\n    var lendiff = lines.length - nlines - 1;\n    // Remember that these lines changed, for updating the display\n    regChange(cm, from.line, to.line + 1, lendiff);\n    if (hasHandler(cm, \"change\")) {\n      // Normalize lines to contain only strings, since that's what\n      // the change event handler expects\n      for (var i = 0; i < lines.length; ++i)\n        if (typeof lines[i] != \"string\") lines[i] = lines[i].text;\n      var changeObj = {from: from, to: to, text: lines, origin: origin};\n      if (cm.curOp.textChanged) {\n        for (var cur = cm.curOp.textChanged; cur.next; cur = cur.next) {}\n        cur.next = changeObj;\n      } else cm.curOp.textChanged = changeObj;\n    }\n\n    // Update the selection\n    var newSelFrom, newSelTo, end = {line: from.line + lines.length - 1,\n                                     ch: hlText(lastHL).length  + (lines.length == 1 ? from.ch : 0)};\n    if (selUpdate && typeof selUpdate != \"string\") {\n      if (selUpdate.from) { newSelFrom = selUpdate.from; newSelTo = selUpdate.to; }\n      else newSelFrom = newSelTo = selUpdate;\n    } else if (selUpdate == \"end\") {\n      newSelFrom = newSelTo = end;\n    } else if (selUpdate == \"start\") {\n      newSelFrom = newSelTo = from;\n    } else if (selUpdate == \"around\") {\n      newSelFrom = from; newSelTo = end;\n    } else {\n      var adjustPos = function(pos) {\n        if (posLess(pos, from)) return pos;\n        if (!posLess(to, pos)) return end;\n        var line = pos.line + lendiff;\n        var ch = pos.ch;\n        if (pos.line == to.line)\n          ch += hlText(lastHL).length - (to.ch - (to.line == from.line ? from.ch : 0));\n        return {line: line, ch: ch};\n      };\n      newSelFrom = adjustPos(view.sel.from);\n      newSelTo = adjustPos(view.sel.to);\n    }\n    setSelection(cm, newSelFrom, newSelTo, null, true);\n    return end;\n  }\n\n  function replaceRange(cm, code, from, to, origin) {\n    if (!to) to = from;\n    if (posLess(to, from)) { var tmp = to; to = from; from = tmp; }\n    return updateDoc(cm, from, to, splitLines(code), null, origin);\n  }\n\n  // SELECTION\n\n  function posEq(a, b) {return a.line == b.line && a.ch == b.ch;}\n  function posLess(a, b) {return a.line < b.line || (a.line == b.line && a.ch < b.ch);}\n  function copyPos(x) {return {line: x.line, ch: x.ch};}\n\n  function clipLine(doc, n) {return Math.max(0, Math.min(n, doc.size-1));}\n  function clipPos(doc, pos) {\n    if (pos.line < 0) return {line: 0, ch: 0};\n    if (pos.line >= doc.size) return {line: doc.size-1, ch: getLine(doc, doc.size-1).text.length};\n    var ch = pos.ch, linelen = getLine(doc, pos.line).text.length;\n    if (ch == null || ch > linelen) return {line: pos.line, ch: linelen};\n    else if (ch < 0) return {line: pos.line, ch: 0};\n    else return pos;\n  }\n  function isLine(doc, l) {return l >= 0 && l < doc.size;}\n\n  // If shift is held, this will move the selection anchor. Otherwise,\n  // it'll set the whole selection.\n  function extendSelection(cm, pos, other, bias) {\n    var sel = cm.view.sel;\n    if (sel.shift || sel.extend) {\n      var anchor = sel.anchor;\n      if (other) {\n        var posBefore = posLess(pos, anchor);\n        if (posBefore != posLess(other, anchor)) {\n          anchor = pos;\n          pos = other;\n        } else if (posBefore != posLess(pos, other)) {\n          pos = other;\n        }\n      }\n      setSelection(cm, anchor, pos, bias);\n    } else {\n      setSelection(cm, pos, other || pos, bias);\n    }\n    cm.curOp.userSelChange = true;\n  }\n\n  // Update the selection. Last two args are only used by\n  // updateDoc, since they have to be expressed in the line\n  // numbers before the update.\n  function setSelection(cm, anchor, head, bias, checkAtomic) {\n    cm.view.goalColumn = null;\n    var sel = cm.view.sel;\n    // Skip over atomic spans.\n    if (checkAtomic || !posEq(anchor, sel.anchor))\n      anchor = skipAtomic(cm, anchor, bias, checkAtomic != \"push\");\n    if (checkAtomic || !posEq(head, sel.head))\n      head = skipAtomic(cm, head, bias, checkAtomic != \"push\");\n\n    if (posEq(sel.anchor, anchor) && posEq(sel.head, head)) return;\n\n    sel.anchor = anchor; sel.head = head;\n    var inv = posLess(head, anchor);\n    sel.from = inv ? head : anchor;\n    sel.to = inv ? anchor : head;\n\n    cm.curOp.updateInput = true;\n    cm.curOp.selectionChanged = true;\n  }\n\n  function reCheckSelection(cm) {\n    setSelection(cm, cm.view.sel.from, cm.view.sel.to, null, \"push\");\n  }\n\n  function skipAtomic(cm, pos, bias, mayClear) {\n    var doc = cm.view.doc, flipped = false, curPos = pos;\n    var dir = bias || 1;\n    cm.view.cantEdit = false;\n    search: for (;;) {\n      var line = getLine(doc, curPos.line), toClear;\n      if (line.markedSpans) {\n        for (var i = 0; i < line.markedSpans.length; ++i) {\n          var sp = line.markedSpans[i], m = sp.marker;\n          if ((sp.from == null || (m.inclusiveLeft ? sp.from <= curPos.ch : sp.from < curPos.ch)) &&\n              (sp.to == null || (m.inclusiveRight ? sp.to >= curPos.ch : sp.to > curPos.ch))) {\n            if (mayClear && m.clearOnEnter) {\n              (toClear || (toClear = [])).push(m);\n              continue;\n            } else if (!m.atomic) continue;\n            var newPos = m.find()[dir < 0 ? \"from\" : \"to\"];\n            if (posEq(newPos, curPos)) {\n              newPos.ch += dir;\n              if (newPos.ch < 0) {\n                if (newPos.line) newPos = clipPos(doc, {line: newPos.line - 1});\n                else newPos = null;\n              } else if (newPos.ch > line.text.length) {\n                if (newPos.line < doc.size - 1) newPos = {line: newPos.line + 1, ch: 0};\n                else newPos = null;\n              }\n              if (!newPos) {\n                if (flipped) {\n                  // Driven in a corner -- no valid cursor position found at all\n                  // -- try again *with* clearing, if we didn't already\n                  if (!mayClear) return skipAtomic(cm, pos, bias, true);\n                  // Otherwise, turn off editing until further notice, and return the start of the doc\n                  cm.view.cantEdit = true;\n                  return {line: 0, ch: 0};\n                }\n                flipped = true; newPos = pos; dir = -dir;\n              }\n            }\n            curPos = newPos;\n            continue search;\n          }\n        }\n        if (toClear) for (var i = 0; i < toClear.length; ++i) toClear[i].clear();\n      }\n      return curPos;\n    }\n  }\n\n  // SCROLLING\n\n  function scrollCursorIntoView(cm) {\n    var view = cm.view;\n    var coords = scrollPosIntoView(cm, view.sel.head);\n    if (!view.focused) return;\n    var display = cm.display, box = display.sizer.getBoundingClientRect(), doScroll = null;\n    if (coords.top + box.top < 0) doScroll = true;\n    else if (coords.bottom + box.top > (window.innerHeight || document.documentElement.clientHeight)) doScroll = false;\n    if (doScroll != null && !phantom) {\n      var hidden = display.cursor.style.display == \"none\";\n      if (hidden) {\n        display.cursor.style.display = \"\";\n        display.cursor.style.left = coords.left + \"px\";\n        display.cursor.style.top = (coords.top - display.viewOffset) + \"px\";\n      }\n      display.cursor.scrollIntoView(doScroll);\n      if (hidden) display.cursor.style.display = \"none\";\n    }\n  }\n\n  function scrollPosIntoView(cm, pos) {\n    for (;;) {\n      var changed = false, coords = cursorCoords(cm, pos);\n      var scrollPos = calculateScrollPos(cm, coords.left, coords.top, coords.left, coords.bottom);\n      var startTop = cm.view.scrollTop, startLeft = cm.view.scrollLeft;\n      if (scrollPos.scrollTop != null) {\n        setScrollTop(cm, scrollPos.scrollTop);\n        if (Math.abs(cm.view.scrollTop - startTop) > 1) changed = true;\n      }\n      if (scrollPos.scrollLeft != null) {\n        setScrollLeft(cm, scrollPos.scrollLeft);\n        if (Math.abs(cm.view.scrollLeft - startLeft) > 1) changed = true;\n      }\n      if (!changed) return coords;\n    }\n  }\n\n  function scrollIntoView(cm, x1, y1, x2, y2) {\n    var scrollPos = calculateScrollPos(cm, x1, y1, x2, y2);\n    if (scrollPos.scrollTop != null) setScrollTop(cm, scrollPos.scrollTop);\n    if (scrollPos.scrollLeft != null) setScrollLeft(cm, scrollPos.scrollLeft);\n  }\n\n  function calculateScrollPos(cm, x1, y1, x2, y2) {\n    var display = cm.display, pt = paddingTop(display);\n    y1 += pt; y2 += pt;\n    var screen = display.scroller.clientHeight - scrollerCutOff, screentop = display.scroller.scrollTop, result = {};\n    var docBottom = cm.view.doc.height + 2 * pt;\n    var atTop = y1 < pt + 10, atBottom = y2 + pt > docBottom - 10;\n    if (y1 < screentop) result.scrollTop = atTop ? 0 : Math.max(0, y1);\n    else if (y2 > screentop + screen) result.scrollTop = (atBottom ? docBottom : y2) - screen;\n\n    var screenw = display.scroller.clientWidth - scrollerCutOff, screenleft = display.scroller.scrollLeft;\n    x1 += display.gutters.offsetWidth; x2 += display.gutters.offsetWidth;\n    var gutterw = display.gutters.offsetWidth;\n    var atLeft = x1 < gutterw + 10;\n    if (x1 < screenleft + gutterw || atLeft) {\n      if (atLeft) x1 = 0;\n      result.scrollLeft = Math.max(0, x1 - 10 - gutterw);\n    } else if (x2 > screenw + screenleft - 3) {\n      result.scrollLeft = x2 + 10 - screenw;\n    }\n    return result;\n  }\n\n  // API UTILITIES\n\n  function indentLine(cm, n, how, aggressive) {\n    var doc = cm.view.doc;\n    if (!how) how = \"add\";\n    if (how == \"smart\") {\n      if (!cm.view.mode.indent) how = \"prev\";\n      else var state = getStateBefore(cm, n);\n    }\n\n    var tabSize = cm.options.tabSize;\n    var line = getLine(doc, n), curSpace = countColumn(line.text, null, tabSize);\n    var curSpaceString = line.text.match(/^\\s*/)[0], indentation;\n    if (how == \"smart\") {\n      indentation = cm.view.mode.indent(state, line.text.slice(curSpaceString.length), line.text);\n      if (indentation == Pass) {\n        if (!aggressive) return;\n        how = \"prev\";\n      }\n    }\n    if (how == \"prev\") {\n      if (n) indentation = countColumn(getLine(doc, n-1).text, null, tabSize);\n      else indentation = 0;\n    }\n    else if (how == \"add\") indentation = curSpace + cm.options.indentUnit;\n    else if (how == \"subtract\") indentation = curSpace - cm.options.indentUnit;\n    indentation = Math.max(0, indentation);\n\n    var indentString = \"\", pos = 0;\n    if (cm.options.indentWithTabs)\n      for (var i = Math.floor(indentation / tabSize); i; --i) {pos += tabSize; indentString += \"\\t\";}\n    if (pos < indentation) indentString += spaceStr(indentation - pos);\n\n    if (indentString != curSpaceString)\n      replaceRange(cm, indentString, {line: n, ch: 0}, {line: n, ch: curSpaceString.length}, \"input\");\n    line.stateAfter = null;\n  }\n\n  function changeLine(cm, handle, op) {\n    var no = handle, line = handle, doc = cm.view.doc;\n    if (typeof handle == \"number\") line = getLine(doc, clipLine(doc, handle));\n    else no = lineNo(handle);\n    if (no == null) return null;\n    if (op(line, no)) regChange(cm, no, no + 1);\n    else return null;\n    return line;\n  }\n\n  function findPosH(cm, dir, unit, visually) {\n    var doc = cm.view.doc, end = cm.view.sel.head, line = end.line, ch = end.ch;\n    var lineObj = getLine(doc, line);\n    function findNextLine() {\n      var l = line + dir;\n      if (l < 0 || l == doc.size) return false;\n      line = l;\n      return lineObj = getLine(doc, l);\n    }\n    function moveOnce(boundToLine) {\n      var next = (visually ? moveVisually : moveLogically)(lineObj, ch, dir, true);\n      if (next == null) {\n        if (!boundToLine && findNextLine()) {\n          if (visually) ch = (dir < 0 ? lineRight : lineLeft)(lineObj);\n          else ch = dir < 0 ? lineObj.text.length : 0;\n        } else return false;\n      } else ch = next;\n      return true;\n    }\n    if (unit == \"char\") moveOnce();\n    else if (unit == \"column\") moveOnce(true);\n    else if (unit == \"word\") {\n      var sawWord = false;\n      for (;;) {\n        if (dir < 0) if (!moveOnce()) break;\n        if (isWordChar(lineObj.text.charAt(ch))) sawWord = true;\n        else if (sawWord) {if (dir < 0) {dir = 1; moveOnce();} break;}\n        if (dir > 0) if (!moveOnce()) break;\n      }\n    }\n    return skipAtomic(cm, {line: line, ch: ch}, dir, true);\n  }\n\n  function findWordAt(line, pos) {\n    var start = pos.ch, end = pos.ch;\n    if (line) {\n      if (pos.after === false || end == line.length) --start; else ++end;\n      var startChar = line.charAt(start);\n      var check = isWordChar(startChar) ? isWordChar :\n        /\\s/.test(startChar) ? function(ch) {return /\\s/.test(ch);} :\n      function(ch) {return !/\\s/.test(ch) && !isWordChar(ch);};\n      while (start > 0 && check(line.charAt(start - 1))) --start;\n      while (end < line.length && check(line.charAt(end))) ++end;\n    }\n    return {from: {line: pos.line, ch: start}, to: {line: pos.line, ch: end}};\n  }\n\n  function selectLine(cm, line) {\n    extendSelection(cm, {line: line, ch: 0}, clipPos(cm.view.doc, {line: line + 1, ch: 0}));\n  }\n\n  // PROTOTYPE\n\n  // The publicly visible API. Note that operation(null, f) means\n  // 'wrap f in an operation, performed on its `this` parameter'\n\n  CodeMirror.prototype = {\n    getValue: function(lineSep) {\n      var text = [], doc = this.view.doc;\n      doc.iter(0, doc.size, function(line) { text.push(line.text); });\n      return text.join(lineSep || \"\\n\");\n    },\n\n    setValue: operation(null, function(code) {\n      var doc = this.view.doc, top = {line: 0, ch: 0}, lastLen = getLine(doc, doc.size-1).text.length;\n      updateDocInner(this, top, {line: doc.size - 1, ch: lastLen}, splitLines(code), top, top, \"setValue\");\n    }),\n\n    getSelection: function(lineSep) { return this.getRange(this.view.sel.from, this.view.sel.to, lineSep); },\n\n    replaceSelection: operation(null, function(code, collapse, origin) {\n      var sel = this.view.sel;\n      updateDoc(this, sel.from, sel.to, splitLines(code), collapse || \"around\", origin);\n    }),\n\n    focus: function(){window.focus(); focusInput(this); onFocus(this); fastPoll(this);},\n\n    setOption: function(option, value) {\n      var options = this.options, old = options[option];\n      if (options[option] == value && option != \"mode\") return;\n      options[option] = value;\n      if (optionHandlers.hasOwnProperty(option))\n        operation(this, optionHandlers[option])(this, value, old);\n    },\n\n    getOption: function(option) {return this.options[option];},\n\n    getMode: function() {return this.view.mode;},\n\n    addKeyMap: function(map) {\n      this.view.keyMaps.push(map);\n    },\n\n    removeKeyMap: function(map) {\n      var maps = this.view.keyMaps;\n      for (var i = 0; i < maps.length; ++i)\n        if ((typeof map == \"string\" ? maps[i].name : maps[i]) == map) {\n          maps.splice(i, 1);\n          return true;\n        }\n    },\n\n    undo: operation(null, function() {unredoHelper(this, \"undo\");}),\n    redo: operation(null, function() {unredoHelper(this, \"redo\");}),\n\n    indentLine: operation(null, function(n, dir, aggressive) {\n      if (typeof dir != \"string\") {\n        if (dir == null) dir = this.options.smartIndent ? \"smart\" : \"prev\";\n        else dir = dir ? \"add\" : \"subtract\";\n      }\n      if (isLine(this.view.doc, n)) indentLine(this, n, dir, aggressive);\n    }),\n\n    indentSelection: operation(null, function(how) {\n      var sel = this.view.sel;\n      if (posEq(sel.from, sel.to)) return indentLine(this, sel.from.line, how);\n      var e = sel.to.line - (sel.to.ch ? 0 : 1);\n      for (var i = sel.from.line; i <= e; ++i) indentLine(this, i, how);\n    }),\n\n    historySize: function() {\n      var hist = this.view.history;\n      return {undo: hist.done.length, redo: hist.undone.length};\n    },\n\n    clearHistory: function() {this.view.history = makeHistory();},\n\n    markClean: function() {\n      this.view.history.dirtyCounter = 0;\n      this.view.history.lastOp = this.view.history.lastOrigin = null;\n    },\n\n    isClean: function () {return this.view.history.dirtyCounter == 0;},\n      \n    getHistory: function() {\n      var hist = this.view.history;\n      function cp(arr) {\n        for (var i = 0, nw = [], nwelt; i < arr.length; ++i) {\n          var set = arr[i];\n          nw.push({events: nwelt = [], fromBefore: set.fromBefore, toBefore: set.toBefore,\n                   fromAfter: set.fromAfter, toAfter: set.toAfter});\n          for (var j = 0, elt = set.events; j < elt.length; ++j) {\n            var old = [], cur = elt[j];\n            nwelt.push({start: cur.start, added: cur.added, old: old});\n            for (var k = 0; k < cur.old.length; ++k) old.push(hlText(cur.old[k]));\n          }\n        }\n        return nw;\n      }\n      return {done: cp(hist.done), undone: cp(hist.undone)};\n    },\n\n    setHistory: function(histData) {\n      var hist = this.view.history = makeHistory();\n      hist.done = histData.done;\n      hist.undone = histData.undone;\n    },\n\n    // Fetch the parser token for a given character. Useful for hacks\n    // that want to inspect the mode state (say, for completion).\n    getTokenAt: function(pos) {\n      var doc = this.view.doc;\n      pos = clipPos(doc, pos);\n      var state = getStateBefore(this, pos.line), mode = this.view.mode;\n      var line = getLine(doc, pos.line);\n      var stream = new StringStream(line.text, this.options.tabSize);\n      while (stream.pos < pos.ch && !stream.eol()) {\n        stream.start = stream.pos;\n        var style = mode.token(stream, state);\n      }\n      return {start: stream.start,\n              end: stream.pos,\n              string: stream.current(),\n              className: style || null, // Deprecated, use 'type' instead\n              type: style || null,\n              state: state};\n    },\n\n    getStateAfter: function(line) {\n      var doc = this.view.doc;\n      line = clipLine(doc, line == null ? doc.size - 1: line);\n      return getStateBefore(this, line + 1);\n    },\n\n    cursorCoords: function(start, mode) {\n      var pos, sel = this.view.sel;\n      if (start == null) pos = sel.head;\n      else if (typeof start == \"object\") pos = clipPos(this.view.doc, start);\n      else pos = start ? sel.from : sel.to;\n      return cursorCoords(this, pos, mode || \"page\");\n    },\n\n    charCoords: function(pos, mode) {\n      return charCoords(this, clipPos(this.view.doc, pos), mode || \"page\");\n    },\n\n    coordsChar: function(coords) {\n      var off = this.display.lineSpace.getBoundingClientRect();\n      return coordsChar(this, coords.left - off.left, coords.top - off.top);\n    },\n\n    defaultTextHeight: function() { return textHeight(this.display); },\n\n    markText: operation(null, function(from, to, options) {\n      return markText(this, clipPos(this.view.doc, from), clipPos(this.view.doc, to),\n                      options, \"range\");\n    }),\n\n    setBookmark: operation(null, function(pos, widget) {\n      pos = clipPos(this.view.doc, pos);\n      return markText(this, pos, pos, widget ? {replacedWith: widget} : {}, \"bookmark\");\n    }),\n\n    findMarksAt: function(pos) {\n      var doc = this.view.doc;\n      pos = clipPos(doc, pos);\n      var markers = [], spans = getLine(doc, pos.line).markedSpans;\n      if (spans) for (var i = 0; i < spans.length; ++i) {\n        var span = spans[i];\n        if ((span.from == null || span.from <= pos.ch) &&\n            (span.to == null || span.to >= pos.ch))\n          markers.push(span.marker);\n      }\n      return markers;\n    },\n\n    setGutterMarker: operation(null, function(line, gutterID, value) {\n      return changeLine(this, line, function(line) {\n        var markers = line.gutterMarkers || (line.gutterMarkers = {});\n        markers[gutterID] = value;\n        if (!value && isEmpty(markers)) line.gutterMarkers = null;\n        return true;\n      });\n    }),\n\n    clearGutter: operation(null, function(gutterID) {\n      var i = 0, cm = this, doc = cm.view.doc;\n      doc.iter(0, doc.size, function(line) {\n        if (line.gutterMarkers && line.gutterMarkers[gutterID]) {\n          line.gutterMarkers[gutterID] = null;\n          regChange(cm, i, i + 1);\n          if (isEmpty(line.gutterMarkers)) line.gutterMarkers = null;\n        }\n        ++i;\n      });\n    }),\n\n    addLineClass: operation(null, function(handle, where, cls) {\n      return changeLine(this, handle, function(line) {\n        var prop = where == \"text\" ? \"textClass\" : where == \"background\" ? \"bgClass\" : \"wrapClass\";\n        if (!line[prop]) line[prop] = cls;\n        else if (new RegExp(\"\\\\b\" + cls + \"\\\\b\").test(line[prop])) return false;\n        else line[prop] += \" \" + cls;\n        return true;\n      });\n    }),\n\n    removeLineClass: operation(null, function(handle, where, cls) {\n      return changeLine(this, handle, function(line) {\n        var prop = where == \"text\" ? \"textClass\" : where == \"background\" ? \"bgClass\" : \"wrapClass\";\n        var cur = line[prop];\n        if (!cur) return false;\n        else if (cls == null) line[prop] = null;\n        else {\n          var upd = cur.replace(new RegExp(\"^\" + cls + \"\\\\b\\\\s*|\\\\s*\\\\b\" + cls + \"\\\\b\"), \"\");\n          if (upd == cur) return false;\n          line[prop] = upd || null;\n        }\n        return true;\n      });\n    }),\n\n    addLineWidget: operation(null, function(handle, node, options) {\n      var widget = options || {};\n      widget.node = node;\n      if (widget.noHScroll) this.display.alignWidgets = true;\n      changeLine(this, handle, function(line) {\n        (line.widgets || (line.widgets = [])).push(widget);\n        widget.line = line;\n        return true;\n      });\n      return widget;\n    }),\n\n    removeLineWidget: operation(null, function(widget) {\n      var ws = widget.line.widgets, no = lineNo(widget.line);\n      if (no == null) return;\n      for (var i = 0; i < ws.length; ++i) if (ws[i] == widget) ws.splice(i--, 1);\n      regChange(this, no, no + 1);\n    }),\n\n    lineInfo: function(line) {\n      if (typeof line == \"number\") {\n        if (!isLine(this.view.doc, line)) return null;\n        var n = line;\n        line = getLine(this.view.doc, line);\n        if (!line) return null;\n      } else {\n        var n = lineNo(line);\n        if (n == null) return null;\n      }\n      return {line: n, handle: line, text: line.text, gutterMarkers: line.gutterMarkers,\n              textClass: line.textClass, bgClass: line.bgClass, wrapClass: line.wrapClass,\n              widgets: line.widgets};\n    },\n\n    getViewport: function() { return {from: this.display.showingFrom, to: this.display.showingTo};},\n\n    addWidget: function(pos, node, scroll, vert, horiz) {\n      var display = this.display;\n      pos = cursorCoords(this, clipPos(this.view.doc, pos));\n      var top = pos.top, left = pos.left;\n      node.style.position = \"absolute\";\n      display.sizer.appendChild(node);\n      if (vert == \"over\") top = pos.top;\n      else if (vert == \"near\") {\n        var vspace = Math.max(display.wrapper.clientHeight, this.view.doc.height),\n        hspace = Math.max(display.sizer.clientWidth, display.lineSpace.clientWidth);\n        if (pos.bottom + node.offsetHeight > vspace && pos.top > node.offsetHeight)\n          top = pos.top - node.offsetHeight;\n        if (left + node.offsetWidth > hspace)\n          left = hspace - node.offsetWidth;\n      }\n      node.style.top = (top + paddingTop(display)) + \"px\";\n      node.style.left = node.style.right = \"\";\n      if (horiz == \"right\") {\n        left = display.sizer.clientWidth - node.offsetWidth;\n        node.style.right = \"0px\";\n      } else {\n        if (horiz == \"left\") left = 0;\n        else if (horiz == \"middle\") left = (display.sizer.clientWidth - node.offsetWidth) / 2;\n        node.style.left = left + \"px\";\n      }\n      if (scroll)\n        scrollIntoView(this, left, top, left + node.offsetWidth, top + node.offsetHeight);\n    },\n\n    lineCount: function() {return this.view.doc.size;},\n\n    clipPos: function(pos) {return clipPos(this.view.doc, pos);},\n\n    getCursor: function(start) {\n      var sel = this.view.sel, pos;\n      if (start == null || start == \"head\") pos = sel.head;\n      else if (start == \"anchor\") pos = sel.anchor;\n      else if (start == \"end\" || start === false) pos = sel.to;\n      else pos = sel.from;\n      return copyPos(pos);\n    },\n\n    somethingSelected: function() {return !posEq(this.view.sel.from, this.view.sel.to);},\n\n    setCursor: operation(null, function(line, ch, extend) {\n      var pos = clipPos(this.view.doc, typeof line == \"number\" ? {line: line, ch: ch || 0} : line);\n      if (extend) extendSelection(this, pos);\n      else setSelection(this, pos, pos);\n    }),\n\n    setSelection: operation(null, function(anchor, head) {\n      var doc = this.view.doc;\n      setSelection(this, clipPos(doc, anchor), clipPos(doc, head || anchor));\n    }),\n\n    extendSelection: operation(null, function(from, to) {\n      var doc = this.view.doc;\n      extendSelection(this, clipPos(doc, from), to && clipPos(doc, to));\n    }),\n\n    setExtending: function(val) {this.view.sel.extend = val;},\n\n    getLine: function(line) {var l = this.getLineHandle(line); return l && l.text;},\n\n    getLineHandle: function(line) {\n      var doc = this.view.doc;\n      if (isLine(doc, line)) return getLine(doc, line);\n    },\n\n    getLineNumber: function(line) {return lineNo(line);},\n\n    setLine: operation(null, function(line, text) {\n      if (isLine(this.view.doc, line))\n        replaceRange(this, text, {line: line, ch: 0}, {line: line, ch: getLine(this.view.doc, line).text.length});\n    }),\n\n    removeLine: operation(null, function(line) {\n      if (isLine(this.view.doc, line))\n        replaceRange(this, \"\", {line: line, ch: 0}, clipPos(this.view.doc, {line: line+1, ch: 0}));\n    }),\n\n    replaceRange: operation(null, function(code, from, to) {\n      var doc = this.view.doc;\n      from = clipPos(doc, from);\n      to = to ? clipPos(doc, to) : from;\n      return replaceRange(this, code, from, to);\n    }),\n\n    getRange: function(from, to, lineSep) {\n      var doc = this.view.doc;\n      from = clipPos(doc, from); to = clipPos(doc, to);\n      var l1 = from.line, l2 = to.line;\n      if (l1 == l2) return getLine(doc, l1).text.slice(from.ch, to.ch);\n      var code = [getLine(doc, l1).text.slice(from.ch)];\n      doc.iter(l1 + 1, l2, function(line) { code.push(line.text); });\n      code.push(getLine(doc, l2).text.slice(0, to.ch));\n      return code.join(lineSep || \"\\n\");\n    },\n\n    triggerOnKeyDown: operation(null, onKeyDown),\n\n    execCommand: function(cmd) {return commands[cmd](this);},\n\n    // Stuff used by commands, probably not much use to outside code.\n    moveH: operation(null, function(dir, unit) {\n      var sel = this.view.sel, pos = dir < 0 ? sel.from : sel.to;\n      if (sel.shift || sel.extend || posEq(sel.from, sel.to)) pos = findPosH(this, dir, unit, true);\n      extendSelection(this, pos, pos, dir);\n    }),\n\n    deleteH: operation(null, function(dir, unit) {\n      var sel = this.view.sel;\n      if (!posEq(sel.from, sel.to)) replaceRange(this, \"\", sel.from, sel.to, \"delete\");\n      else replaceRange(this, \"\", sel.from, findPosH(this, dir, unit, false), \"delete\");\n      this.curOp.userSelChange = true;\n    }),\n\n    moveV: operation(null, function(dir, unit) {\n      var view = this.view, doc = view.doc, display = this.display;\n      var cur = view.sel.head, pos = cursorCoords(this, cur, \"div\");\n      var x = pos.left, y;\n      if (view.goalColumn != null) x = view.goalColumn;\n      if (unit == \"page\") {\n        var pageSize = Math.min(display.wrapper.clientHeight, window.innerHeight || document.documentElement.clientHeight);\n        y = pos.top + dir * pageSize;\n      } else if (unit == \"line\") {\n        y = dir > 0 ? pos.bottom + 3 : pos.top - 3;\n      }\n      do {\n        var target = coordsChar(this, x, y);\n        y += dir * 5;\n      } while (target.outside && (dir < 0 ? y > 0 : y < doc.height));\n\n      if (unit == \"page\") display.scrollbarV.scrollTop += charCoords(this, target, \"div\").top - pos.top;\n      extendSelection(this, target, target, dir);\n      view.goalColumn = x;\n    }),\n\n    toggleOverwrite: function() {\n      if (this.view.overwrite = !this.view.overwrite)\n        this.display.cursor.className += \" CodeMirror-overwrite\";\n      else\n        this.display.cursor.className = this.display.cursor.className.replace(\" CodeMirror-overwrite\", \"\");\n    },\n\n    posFromIndex: function(off) {\n      var lineNo = 0, ch, doc = this.view.doc;\n      doc.iter(0, doc.size, function(line) {\n        var sz = line.text.length + 1;\n        if (sz > off) { ch = off; return true; }\n        off -= sz;\n        ++lineNo;\n      });\n      return clipPos(doc, {line: lineNo, ch: ch});\n    },\n    indexFromPos: function (coords) {\n      if (coords.line < 0 || coords.ch < 0) return 0;\n      var index = coords.ch;\n      this.view.doc.iter(0, coords.line, function (line) {\n        index += line.text.length + 1;\n      });\n      return index;\n    },\n\n    scrollTo: function(x, y) {\n      if (x != null) this.display.scrollbarH.scrollLeft = this.display.scroller.scrollLeft = x;\n      if (y != null) this.display.scrollbarV.scrollTop = this.display.scroller.scrollTop = y;\n      updateDisplay(this, []);\n    },\n    getScrollInfo: function() {\n      var scroller = this.display.scroller, co = scrollerCutOff;\n      return {left: scroller.scrollLeft, top: scroller.scrollTop,\n              height: scroller.scrollHeight - co, width: scroller.scrollWidth - co,\n              clientHeight: scroller.clientHeight - co, clientWidth: scroller.clientWidth - co};\n    },\n\n    scrollIntoView: function(pos) {\n      if (typeof pos == \"number\") pos = {line: pos, ch: 0};\n      pos = pos ? clipPos(this.view.doc, pos) : this.view.sel.head;\n      scrollPosIntoView(this, pos);\n    },\n\n    setSize: function(width, height) {\n      function interpret(val) {\n        return typeof val == \"number\" || /^\\d+$/.test(String(val)) ? val + \"px\" : val;\n      }\n      if (width != null) this.display.wrapper.style.width = interpret(width);\n      if (height != null) this.display.wrapper.style.height = interpret(height);\n      this.refresh();\n    },\n\n    on: function(type, f) {on(this, type, f);},\n    off: function(type, f) {off(this, type, f);},\n\n    operation: function(f){return operation(this, f)();},\n\n    refresh: function() {\n      clearCaches(this);\n      if (this.display.scroller.scrollHeight > this.view.scrollTop)\n        this.display.scrollbarV.scrollTop = this.display.scroller.scrollTop = this.view.scrollTop;\n      updateDisplay(this, true);\n    },\n\n    getInputField: function(){return this.display.input;},\n    getWrapperElement: function(){return this.display.wrapper;},\n    getScrollerElement: function(){return this.display.scroller;},\n    getGutterElement: function(){return this.display.gutters;}\n  };\n\n  // OPTION DEFAULTS\n\n  var optionHandlers = CodeMirror.optionHandlers = {};\n\n  // The default configuration options.\n  var defaults = CodeMirror.defaults = {};\n\n  function option(name, deflt, handle, notOnInit) {\n    CodeMirror.defaults[name] = deflt;\n    if (handle) optionHandlers[name] =\n      notOnInit ? function(cm, val, old) {if (old != Init) handle(cm, val, old);} : handle;\n  }\n\n  var Init = CodeMirror.Init = {toString: function(){return \"CodeMirror.Init\";}};\n\n  // These two are, on init, called from the constructor because they\n  // have to be initialized before the editor can start at all.\n  option(\"value\", \"\", function(cm, val) {cm.setValue(val);}, true);\n  option(\"mode\", null, loadMode, true);\n\n  option(\"indentUnit\", 2, loadMode, true);\n  option(\"indentWithTabs\", false);\n  option(\"smartIndent\", true);\n  option(\"tabSize\", 4, function(cm) {\n    loadMode(cm);\n    clearCaches(cm);\n    updateDisplay(cm, true);\n  }, true);\n  option(\"electricChars\", true);\n\n  option(\"theme\", \"default\", function(cm) {\n    themeChanged(cm);\n    guttersChanged(cm);\n  }, true);\n  option(\"keyMap\", \"default\", keyMapChanged);\n  option(\"extraKeys\", null);\n\n  option(\"onKeyEvent\", null);\n  option(\"onDragEvent\", null);\n\n  option(\"lineWrapping\", false, wrappingChanged, true);\n  option(\"gutters\", [], function(cm) {\n    setGuttersForLineNumbers(cm.options);\n    guttersChanged(cm);\n  }, true);\n  option(\"lineNumbers\", false, function(cm) {\n    setGuttersForLineNumbers(cm.options);\n    guttersChanged(cm);\n  }, true);\n  option(\"firstLineNumber\", 1, guttersChanged, true);\n  option(\"lineNumberFormatter\", function(integer) {return integer;}, guttersChanged, true);\n  option(\"showCursorWhenSelecting\", false, updateSelection, true);\n  \n  option(\"readOnly\", false, function(cm, val) {\n    if (val == \"nocursor\") {onBlur(cm); cm.display.input.blur();}\n    else if (!val) resetInput(cm, true);\n  });\n  option(\"dragDrop\", true);\n\n  option(\"cursorBlinkRate\", 530);\n  option(\"cursorHeight\", 1);\n  option(\"workTime\", 100);\n  option(\"workDelay\", 100);\n  option(\"flattenSpans\", true);\n  option(\"pollInterval\", 100);\n  option(\"undoDepth\", 40);\n  option(\"viewportMargin\", 10, function(cm){cm.refresh();}, true);\n\n  option(\"tabindex\", null, function(cm, val) {\n    cm.display.input.tabIndex = val || \"\";\n  });\n  option(\"autofocus\", null);\n\n  // MODE DEFINITION AND QUERYING\n\n  // Known modes, by name and by MIME\n  var modes = CodeMirror.modes = {}, mimeModes = CodeMirror.mimeModes = {};\n\n  CodeMirror.defineMode = function(name, mode) {\n    if (!CodeMirror.defaults.mode && name != \"null\") CodeMirror.defaults.mode = name;\n    if (arguments.length > 2) {\n      mode.dependencies = [];\n      for (var i = 2; i < arguments.length; ++i) mode.dependencies.push(arguments[i]);\n    }\n    modes[name] = mode;\n  };\n\n  CodeMirror.defineMIME = function(mime, spec) {\n    mimeModes[mime] = spec;\n  };\n\n  CodeMirror.resolveMode = function(spec) {\n    if (typeof spec == \"string\" && mimeModes.hasOwnProperty(spec))\n      spec = mimeModes[spec];\n    else if (typeof spec == \"string\" && /^[\\w\\-]+\\/[\\w\\-]+\\+xml$/.test(spec))\n      return CodeMirror.resolveMode(\"application/xml\");\n    if (typeof spec == \"string\") return {name: spec};\n    else return spec || {name: \"null\"};\n  };\n\n  CodeMirror.getMode = function(options, spec) {\n    var spec = CodeMirror.resolveMode(spec);\n    var mfactory = modes[spec.name];\n    if (!mfactory) return CodeMirror.getMode(options, \"text/plain\");\n    var modeObj = mfactory(options, spec);\n    if (modeExtensions.hasOwnProperty(spec.name)) {\n      var exts = modeExtensions[spec.name];\n      for (var prop in exts) {\n        if (!exts.hasOwnProperty(prop)) continue;\n        if (modeObj.hasOwnProperty(prop)) modeObj[\"_\" + prop] = modeObj[prop];\n        modeObj[prop] = exts[prop];\n      }\n    }\n    modeObj.name = spec.name;\n    return modeObj;\n  };\n\n  CodeMirror.defineMode(\"null\", function() {\n    return {token: function(stream) {stream.skipToEnd();}};\n  });\n  CodeMirror.defineMIME(\"text/plain\", \"null\");\n\n  var modeExtensions = CodeMirror.modeExtensions = {};\n  CodeMirror.extendMode = function(mode, properties) {\n    var exts = modeExtensions.hasOwnProperty(mode) ? modeExtensions[mode] : (modeExtensions[mode] = {});\n    for (var prop in properties) if (properties.hasOwnProperty(prop))\n      exts[prop] = properties[prop];\n  };\n\n  // EXTENSIONS\n\n  CodeMirror.defineExtension = function(name, func) {\n    CodeMirror.prototype[name] = func;\n  };\n\n  CodeMirror.defineOption = option;\n\n  var initHooks = [];\n  CodeMirror.defineInitHook = function(f) {initHooks.push(f);};\n\n  // MODE STATE HANDLING\n\n  // Utility functions for working with state. Exported because modes\n  // sometimes need to do this.\n  function copyState(mode, state) {\n    if (state === true) return state;\n    if (mode.copyState) return mode.copyState(state);\n    var nstate = {};\n    for (var n in state) {\n      var val = state[n];\n      if (val instanceof Array) val = val.concat([]);\n      nstate[n] = val;\n    }\n    return nstate;\n  }\n  CodeMirror.copyState = copyState;\n\n  function startState(mode, a1, a2) {\n    return mode.startState ? mode.startState(a1, a2) : true;\n  }\n  CodeMirror.startState = startState;\n\n  CodeMirror.innerMode = function(mode, state) {\n    while (mode.innerMode) {\n      var info = mode.innerMode(state);\n      state = info.state;\n      mode = info.mode;\n    }\n    return info || {mode: mode, state: state};\n  };\n\n  // STANDARD COMMANDS\n\n  var commands = CodeMirror.commands = {\n    selectAll: function(cm) {cm.setSelection({line: 0, ch: 0}, {line: cm.lineCount() - 1});},\n    killLine: function(cm) {\n      var from = cm.getCursor(true), to = cm.getCursor(false), sel = !posEq(from, to);\n      if (!sel && cm.getLine(from.line).length == from.ch)\n        cm.replaceRange(\"\", from, {line: from.line + 1, ch: 0}, \"delete\");\n      else cm.replaceRange(\"\", from, sel ? to : {line: from.line}, \"delete\");\n    },\n    deleteLine: function(cm) {\n      var l = cm.getCursor().line;\n      cm.replaceRange(\"\", {line: l, ch: 0}, {line: l}, \"delete\");\n    },\n    undo: function(cm) {cm.undo();},\n    redo: function(cm) {cm.redo();},\n    goDocStart: function(cm) {cm.extendSelection({line: 0, ch: 0});},\n    goDocEnd: function(cm) {cm.extendSelection({line: cm.lineCount() - 1});},\n    goLineStart: function(cm) {\n      cm.extendSelection(lineStart(cm, cm.getCursor().line));\n    },\n    goLineStartSmart: function(cm) {\n      var cur = cm.getCursor(), start = lineStart(cm, cur.line);\n      var line = cm.getLineHandle(start.line);\n      var order = getOrder(line);\n      if (!order || order[0].level == 0) {\n        var firstNonWS = Math.max(0, line.text.search(/\\S/));\n        var inWS = cur.line == start.line && cur.ch <= firstNonWS && cur.ch;\n        cm.extendSelection({line: start.line, ch: inWS ? 0 : firstNonWS});\n      } else cm.extendSelection(start);\n    },\n    goLineEnd: function(cm) {\n      cm.extendSelection(lineEnd(cm, cm.getCursor().line));\n    },\n    goLineUp: function(cm) {cm.moveV(-1, \"line\");},\n    goLineDown: function(cm) {cm.moveV(1, \"line\");},\n    goPageUp: function(cm) {cm.moveV(-1, \"page\");},\n    goPageDown: function(cm) {cm.moveV(1, \"page\");},\n    goCharLeft: function(cm) {cm.moveH(-1, \"char\");},\n    goCharRight: function(cm) {cm.moveH(1, \"char\");},\n    goColumnLeft: function(cm) {cm.moveH(-1, \"column\");},\n    goColumnRight: function(cm) {cm.moveH(1, \"column\");},\n    goWordLeft: function(cm) {cm.moveH(-1, \"word\");},\n    goWordRight: function(cm) {cm.moveH(1, \"word\");},\n    delCharBefore: function(cm) {cm.deleteH(-1, \"char\");},\n    delCharAfter: function(cm) {cm.deleteH(1, \"char\");},\n    delWordBefore: function(cm) {cm.deleteH(-1, \"word\");},\n    delWordAfter: function(cm) {cm.deleteH(1, \"word\");},\n    indentAuto: function(cm) {cm.indentSelection(\"smart\");},\n    indentMore: function(cm) {cm.indentSelection(\"add\");},\n    indentLess: function(cm) {cm.indentSelection(\"subtract\");},\n    insertTab: function(cm) {cm.replaceSelection(\"\\t\", \"end\", \"input\");},\n    defaultTab: function(cm) {\n      if (cm.somethingSelected()) cm.indentSelection(\"add\");\n      else cm.replaceSelection(\"\\t\", \"end\", \"input\");\n    },\n    transposeChars: function(cm) {\n      var cur = cm.getCursor(), line = cm.getLine(cur.line);\n      if (cur.ch > 0 && cur.ch < line.length - 1)\n        cm.replaceRange(line.charAt(cur.ch) + line.charAt(cur.ch - 1),\n                        {line: cur.line, ch: cur.ch - 1}, {line: cur.line, ch: cur.ch + 1});\n    },\n    newlineAndIndent: function(cm) {\n      operation(cm, function() {\n        cm.replaceSelection(\"\\n\", \"end\", \"input\");\n        cm.indentLine(cm.getCursor().line, null, true);\n      })();\n    },\n    toggleOverwrite: function(cm) {cm.toggleOverwrite();}\n  };\n\n  // STANDARD KEYMAPS\n\n  var keyMap = CodeMirror.keyMap = {};\n  keyMap.basic = {\n    \"Left\": \"goCharLeft\", \"Right\": \"goCharRight\", \"Up\": \"goLineUp\", \"Down\": \"goLineDown\",\n    \"End\": \"goLineEnd\", \"Home\": \"goLineStartSmart\", \"PageUp\": \"goPageUp\", \"PageDown\": \"goPageDown\",\n    \"Delete\": \"delCharAfter\", \"Backspace\": \"delCharBefore\", \"Tab\": \"defaultTab\", \"Shift-Tab\": \"indentAuto\",\n    \"Enter\": \"newlineAndIndent\", \"Insert\": \"toggleOverwrite\"\n  };\n  // Note that the save and find-related commands aren't defined by\n  // default. Unknown commands are simply ignored.\n  keyMap.pcDefault = {\n    \"Ctrl-A\": \"selectAll\", \"Ctrl-D\": \"deleteLine\", \"Ctrl-Z\": \"undo\", \"Shift-Ctrl-Z\": \"redo\", \"Ctrl-Y\": \"redo\",\n    \"Ctrl-Home\": \"goDocStart\", \"Alt-Up\": \"goDocStart\", \"Ctrl-End\": \"goDocEnd\", \"Ctrl-Down\": \"goDocEnd\",\n    \"Ctrl-Left\": \"goWordLeft\", \"Ctrl-Right\": \"goWordRight\", \"Alt-Left\": \"goLineStart\", \"Alt-Right\": \"goLineEnd\",\n    \"Ctrl-Backspace\": \"delWordBefore\", \"Ctrl-Delete\": \"delWordAfter\", \"Ctrl-S\": \"save\", \"Ctrl-F\": \"find\",\n    \"Ctrl-G\": \"findNext\", \"Shift-Ctrl-G\": \"findPrev\", \"Shift-Ctrl-F\": \"replace\", \"Shift-Ctrl-R\": \"replaceAll\",\n    \"Ctrl-[\": \"indentLess\", \"Ctrl-]\": \"indentMore\",\n    fallthrough: \"basic\"\n  };\n  keyMap.macDefault = {\n    \"Cmd-A\": \"selectAll\", \"Cmd-D\": \"deleteLine\", \"Cmd-Z\": \"undo\", \"Shift-Cmd-Z\": \"redo\", \"Cmd-Y\": \"redo\",\n    \"Cmd-Up\": \"goDocStart\", \"Cmd-End\": \"goDocEnd\", \"Cmd-Down\": \"goDocEnd\", \"Alt-Left\": \"goWordLeft\",\n    \"Alt-Right\": \"goWordRight\", \"Cmd-Left\": \"goLineStart\", \"Cmd-Right\": \"goLineEnd\", \"Alt-Backspace\": \"delWordBefore\",\n    \"Ctrl-Alt-Backspace\": \"delWordAfter\", \"Alt-Delete\": \"delWordAfter\", \"Cmd-S\": \"save\", \"Cmd-F\": \"find\",\n    \"Cmd-G\": \"findNext\", \"Shift-Cmd-G\": \"findPrev\", \"Cmd-Alt-F\": \"replace\", \"Shift-Cmd-Alt-F\": \"replaceAll\",\n    \"Cmd-[\": \"indentLess\", \"Cmd-]\": \"indentMore\",\n    fallthrough: [\"basic\", \"emacsy\"]\n  };\n  keyMap[\"default\"] = mac ? keyMap.macDefault : keyMap.pcDefault;\n  keyMap.emacsy = {\n    \"Ctrl-F\": \"goCharRight\", \"Ctrl-B\": \"goCharLeft\", \"Ctrl-P\": \"goLineUp\", \"Ctrl-N\": \"goLineDown\",\n    \"Alt-F\": \"goWordRight\", \"Alt-B\": \"goWordLeft\", \"Ctrl-A\": \"goLineStart\", \"Ctrl-E\": \"goLineEnd\",\n    \"Ctrl-V\": \"goPageDown\", \"Shift-Ctrl-V\": \"goPageUp\", \"Ctrl-D\": \"delCharAfter\", \"Ctrl-H\": \"delCharBefore\",\n    \"Alt-D\": \"delWordAfter\", \"Alt-Backspace\": \"delWordBefore\", \"Ctrl-K\": \"killLine\", \"Ctrl-T\": \"transposeChars\"\n  };\n\n  // KEYMAP DISPATCH\n\n  function getKeyMap(val) {\n    if (typeof val == \"string\") return keyMap[val];\n    else return val;\n  }\n\n  function lookupKey(name, maps, handle, stop) {\n    function lookup(map) {\n      map = getKeyMap(map);\n      var found = map[name];\n      if (found === false) {\n        if (stop) stop();\n        return true;\n      }\n      if (found != null && handle(found)) return true;\n      if (map.nofallthrough) {\n        if (stop) stop();\n        return true;\n      }\n      var fallthrough = map.fallthrough;\n      if (fallthrough == null) return false;\n      if (Object.prototype.toString.call(fallthrough) != \"[object Array]\")\n        return lookup(fallthrough);\n      for (var i = 0, e = fallthrough.length; i < e; ++i) {\n        if (lookup(fallthrough[i])) return true;\n      }\n      return false;\n    }\n\n    for (var i = 0; i < maps.length; ++i)\n      if (lookup(maps[i])) return true;\n  }\n  function isModifierKey(event) {\n    var name = keyNames[e_prop(event, \"keyCode\")];\n    return name == \"Ctrl\" || name == \"Alt\" || name == \"Shift\" || name == \"Mod\";\n  }\n  CodeMirror.isModifierKey = isModifierKey;\n\n  // FROMTEXTAREA\n\n  CodeMirror.fromTextArea = function(textarea, options) {\n    if (!options) options = {};\n    options.value = textarea.value;\n    if (!options.tabindex && textarea.tabindex)\n      options.tabindex = textarea.tabindex;\n    // Set autofocus to true if this textarea is focused, or if it has\n    // autofocus and no other element is focused.\n    if (options.autofocus == null) {\n      var hasFocus = document.body;\n      // doc.activeElement occasionally throws on IE\n      try { hasFocus = document.activeElement; } catch(e) {}\n      options.autofocus = hasFocus == textarea ||\n        textarea.getAttribute(\"autofocus\") != null && hasFocus == document.body;\n    }\n\n    function save() {textarea.value = cm.getValue();}\n    if (textarea.form) {\n      // Deplorable hack to make the submit method do the right thing.\n      on(textarea.form, \"submit\", save);\n      var form = textarea.form, realSubmit = form.submit;\n      try {\n        form.submit = function wrappedSubmit() {\n          save();\n          form.submit = realSubmit;\n          form.submit();\n          form.submit = wrappedSubmit;\n        };\n      } catch(e) {}\n    }\n\n    textarea.style.display = \"none\";\n    var cm = CodeMirror(function(node) {\n      textarea.parentNode.insertBefore(node, textarea.nextSibling);\n    }, options);\n    cm.save = save;\n    cm.getTextArea = function() { return textarea; };\n    cm.toTextArea = function() {\n      save();\n      textarea.parentNode.removeChild(cm.getWrapperElement());\n      textarea.style.display = \"\";\n      if (textarea.form) {\n        off(textarea.form, \"submit\", save);\n        if (typeof textarea.form.submit == \"function\")\n          textarea.form.submit = realSubmit;\n      }\n    };\n    return cm;\n  };\n\n  // STRING STREAM\n\n  // Fed to the mode parsers, provides helper functions to make\n  // parsers more succinct.\n\n  // The character stream used by a mode's parser.\n  function StringStream(string, tabSize) {\n    this.pos = this.start = 0;\n    this.string = string;\n    this.tabSize = tabSize || 8;\n  }\n\n  StringStream.prototype = {\n    eol: function() {return this.pos >= this.string.length;},\n    sol: function() {return this.pos == 0;},\n    peek: function() {return this.string.charAt(this.pos) || undefined;},\n    next: function() {\n      if (this.pos < this.string.length)\n        return this.string.charAt(this.pos++);\n    },\n    eat: function(match) {\n      var ch = this.string.charAt(this.pos);\n      if (typeof match == \"string\") var ok = ch == match;\n      else var ok = ch && (match.test ? match.test(ch) : match(ch));\n      if (ok) {++this.pos; return ch;}\n    },\n    eatWhile: function(match) {\n      var start = this.pos;\n      while (this.eat(match)){}\n      return this.pos > start;\n    },\n    eatSpace: function() {\n      var start = this.pos;\n      while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos))) ++this.pos;\n      return this.pos > start;\n    },\n    skipToEnd: function() {this.pos = this.string.length;},\n    skipTo: function(ch) {\n      var found = this.string.indexOf(ch, this.pos);\n      if (found > -1) {this.pos = found; return true;}\n    },\n    backUp: function(n) {this.pos -= n;},\n    column: function() {return countColumn(this.string, this.start, this.tabSize);},\n    indentation: function() {return countColumn(this.string, null, this.tabSize);},\n    match: function(pattern, consume, caseInsensitive) {\n      if (typeof pattern == \"string\") {\n        var cased = function(str) {return caseInsensitive ? str.toLowerCase() : str;};\n        if (cased(this.string).indexOf(cased(pattern), this.pos) == this.pos) {\n          if (consume !== false) this.pos += pattern.length;\n          return true;\n        }\n      } else {\n        var match = this.string.slice(this.pos).match(pattern);\n        if (match && match.index > 0) return null;\n        if (match && consume !== false) this.pos += match[0].length;\n        return match;\n      }\n    },\n    current: function(){return this.string.slice(this.start, this.pos);}\n  };\n  CodeMirror.StringStream = StringStream;\n\n  // TEXTMARKERS\n\n  function TextMarker(cm, type) {\n    this.lines = [];\n    this.type = type;\n    this.cm = cm;\n  }\n\n  TextMarker.prototype.clear = function() {\n    if (this.explicitlyCleared) return;\n    startOperation(this.cm);\n    var min = null, max = null;\n    for (var i = 0; i < this.lines.length; ++i) {\n      var line = this.lines[i];\n      var span = getMarkedSpanFor(line.markedSpans, this);\n      if (span.to != null) max = lineNo(line);\n      line.markedSpans = removeMarkedSpan(line.markedSpans, span);\n      if (span.from != null)\n        min = lineNo(line);\n      else if (this.collapsed && !lineIsHidden(line))\n        updateLineHeight(line, textHeight(this.cm.display));\n    }\n    if (min != null) regChange(this.cm, min, max + 1);\n    this.lines.length = 0;\n    this.explicitlyCleared = true;\n    if (this.collapsed && this.cm.view.cantEdit) {\n      this.cm.view.cantEdit = false;\n      reCheckSelection(this.cm);\n    }\n    endOperation(this.cm);\n    signalLater(this.cm, this, \"clear\");\n  };\n\n  TextMarker.prototype.find = function() {\n    var from, to;\n    for (var i = 0; i < this.lines.length; ++i) {\n      var line = this.lines[i];\n      var span = getMarkedSpanFor(line.markedSpans, this);\n      if (span.from != null || span.to != null) {\n        var found = lineNo(line);\n        if (span.from != null) from = {line: found, ch: span.from};\n        if (span.to != null) to = {line: found, ch: span.to};\n      }\n    }\n    if (this.type == \"bookmark\") return from;\n    return from && {from: from, to: to};\n  };\n\n  function markText(cm, from, to, options, type) {\n    var doc = cm.view.doc;\n    var marker = new TextMarker(cm, type);\n    if (type == \"range\" && !posLess(from, to)) return marker;\n    if (options) for (var opt in options) if (options.hasOwnProperty(opt))\n      marker[opt] = options[opt];\n    if (marker.replacedWith) {\n      marker.collapsed = true;\n      marker.replacedWith = elt(\"span\", [marker.replacedWith], \"CodeMirror-widget\");\n    }\n    if (marker.collapsed) sawCollapsedSpans = true;\n\n    var curLine = from.line, size = 0, collapsedAtStart, collapsedAtEnd;\n    doc.iter(curLine, to.line + 1, function(line) {\n      var span = {from: null, to: null, marker: marker};\n      size += line.text.length;\n      if (curLine == from.line) {span.from = from.ch; size -= from.ch;}\n      if (curLine == to.line) {span.to = to.ch; size -= line.text.length - to.ch;}\n      if (marker.collapsed) {\n        if (curLine == to.line) collapsedAtEnd = collapsedSpanAt(line, to.ch);\n        if (curLine == from.line) collapsedAtStart = collapsedSpanAt(line, from.ch);\n        else updateLineHeight(line, 0);\n      }\n      addMarkedSpan(line, span);\n      if (marker.collapsed && curLine == from.line && lineIsHidden(line))\n        updateLineHeight(line, 0);\n      ++curLine;\n    });\n\n    if (marker.readOnly) {\n      sawReadOnlySpans = true;\n      if (cm.view.history.done.length || cm.view.history.undone.length)\n        cm.clearHistory();\n    }\n    if (marker.collapsed) {\n      if (collapsedAtStart != collapsedAtEnd)\n        throw new Error(\"Inserting collapsed marker overlapping an existing one\");\n      marker.size = size;\n      marker.atomic = true;\n    }\n    if (marker.className || marker.startStyle || marker.endStyle || marker.collapsed)\n      regChange(cm, from.line, to.line + 1);\n    if (marker.atomic) reCheckSelection(cm);\n    return marker;\n  }\n\n  // TEXTMARKER SPANS\n\n  function getMarkedSpanFor(spans, marker) {\n    if (spans) for (var i = 0; i < spans.length; ++i) {\n      var span = spans[i];\n      if (span.marker == marker) return span;\n    }\n  }\n  function removeMarkedSpan(spans, span) {\n    for (var r, i = 0; i < spans.length; ++i)\n      if (spans[i] != span) (r || (r = [])).push(spans[i]);\n    return r;\n  }\n  function addMarkedSpan(line, span) {\n    line.markedSpans = line.markedSpans ? line.markedSpans.concat([span]) : [span];\n    span.marker.lines.push(line);\n  }\n\n  function markedSpansBefore(old, startCh) {\n    if (old) for (var i = 0, nw; i < old.length; ++i) {\n      var span = old[i], marker = span.marker;\n      var startsBefore = span.from == null || (marker.inclusiveLeft ? span.from <= startCh : span.from < startCh);\n      if (startsBefore || marker.type == \"bookmark\" && span.from == startCh) {\n        var endsAfter = span.to == null || (marker.inclusiveRight ? span.to >= startCh : span.to > startCh);\n        (nw || (nw = [])).push({from: span.from,\n                                to: endsAfter ? null : span.to,\n                                marker: marker});\n      }\n    }\n    return nw;\n  }\n\n  function markedSpansAfter(old, startCh, endCh) {\n    if (old) for (var i = 0, nw; i < old.length; ++i) {\n      var span = old[i], marker = span.marker;\n      var endsAfter = span.to == null || (marker.inclusiveRight ? span.to >= endCh : span.to > endCh);\n      if (endsAfter || marker.type == \"bookmark\" && span.from == endCh && span.from != startCh) {\n        var startsBefore = span.from == null || (marker.inclusiveLeft ? span.from <= endCh : span.from < endCh);\n        (nw || (nw = [])).push({from: startsBefore ? null : span.from - endCh,\n                                to: span.to == null ? null : span.to - endCh,\n                                marker: marker});\n      }\n    }\n    return nw;\n  }\n\n  function updateMarkedSpans(oldFirst, oldLast, startCh, endCh, newText) {\n    if (!oldFirst && !oldLast) return newText;\n    // Get the spans that 'stick out' on both sides\n    var first = markedSpansBefore(oldFirst, startCh);\n    var last = markedSpansAfter(oldLast, startCh, endCh);\n\n    // Next, merge those two ends\n    var sameLine = newText.length == 1, offset = lst(newText).length + (sameLine ? startCh : 0);\n    if (first) {\n      // Fix up .to properties of first\n      for (var i = 0; i < first.length; ++i) {\n        var span = first[i];\n        if (span.to == null) {\n          var found = getMarkedSpanFor(last, span.marker);\n          if (!found) span.to = startCh;\n          else if (sameLine) span.to = found.to == null ? null : found.to + offset;\n        }\n      }\n    }\n    if (last) {\n      // Fix up .from in last (or move them into first in case of sameLine)\n      for (var i = 0; i < last.length; ++i) {\n        var span = last[i];\n        if (span.to != null) span.to += offset;\n        if (span.from == null) {\n          var found = getMarkedSpanFor(first, span.marker);\n          if (!found) {\n            span.from = offset;\n            if (sameLine) (first || (first = [])).push(span);\n          }\n        } else {\n          span.from += offset;\n          if (sameLine) (first || (first = [])).push(span);\n        }\n      }\n    }\n\n    var newMarkers = [newHL(newText[0], first)];\n    if (!sameLine) {\n      // Fill gap with whole-line-spans\n      var gap = newText.length - 2, gapMarkers;\n      if (gap > 0 && first)\n        for (var i = 0; i < first.length; ++i)\n          if (first[i].to == null)\n            (gapMarkers || (gapMarkers = [])).push({from: null, to: null, marker: first[i].marker});\n      for (var i = 0; i < gap; ++i)\n        newMarkers.push(newHL(newText[i+1], gapMarkers));\n      newMarkers.push(newHL(lst(newText), last));\n    }\n    return newMarkers;\n  }\n\n  function removeReadOnlyRanges(doc, from, to) {\n    var markers = null;\n    doc.iter(from.line, to.line + 1, function(line) {\n      if (line.markedSpans) for (var i = 0; i < line.markedSpans.length; ++i) {\n        var mark = line.markedSpans[i].marker;\n        if (mark.readOnly && (!markers || indexOf(markers, mark) == -1))\n          (markers || (markers = [])).push(mark);\n      }\n    });\n    if (!markers) return null;\n    var parts = [{from: from, to: to}];\n    for (var i = 0; i < markers.length; ++i) {\n      var m = markers[i].find();\n      for (var j = 0; j < parts.length; ++j) {\n        var p = parts[j];\n        if (!posLess(m.from, p.to) || posLess(m.to, p.from)) continue;\n        var newParts = [j, 1];\n        if (posLess(p.from, m.from)) newParts.push({from: p.from, to: m.from});\n        if (posLess(m.to, p.to)) newParts.push({from: m.to, to: p.to});\n        parts.splice.apply(parts, newParts);\n        j += newParts.length - 1;\n      }\n    }\n    return parts;\n  }\n\n  function collapsedSpanAt(line, ch) {\n    var sps = sawCollapsedSpans && line.markedSpans, found;\n    if (sps) for (var sp, i = 0; i < sps.length; ++i) {\n      sp = sps[i];\n      if (!sp.marker.collapsed) continue;\n      if ((sp.from == null || sp.from < ch) &&\n          (sp.to == null || sp.to > ch) &&\n          (!found || found.width < sp.marker.width))\n        found = sp.marker;\n    }\n    return found;\n  }\n  function collapsedSpanAtStart(line) { return collapsedSpanAt(line, -1); }\n  function collapsedSpanAtEnd(line) { return collapsedSpanAt(line, line.text.length + 1); }\n\n  function visualLine(doc, line) {\n    var merged;\n    while (merged = collapsedSpanAtStart(line))\n      line = getLine(doc, merged.find().from.line);\n    return line;\n  }\n\n  function lineIsHidden(line) {\n    var sps = sawCollapsedSpans && line.markedSpans;\n    if (sps) for (var sp, i = 0; i < sps.length; ++i) {\n      sp = sps[i];\n      if (!sp.marker.collapsed) continue;\n      if (sp.from == null) return true;\n      if (sp.from == 0 && sp.marker.inclusiveLeft && lineIsHiddenInner(line, sp))\n        return true;\n    }\n  }\n  window.lineIsHidden = lineIsHidden;\n  function lineIsHiddenInner(line, span) {\n    if (span.to == null || span.marker.inclusiveRight && span.to == line.text.length)\n      return true;\n    for (var sp, i = 0; i < line.markedSpans.length; ++i) {\n      sp = line.markedSpans[i];\n      if (sp.marker.collapsed && sp.from == span.to &&\n          (sp.marker.inclusiveLeft || span.marker.inclusiveRight) &&\n          lineIsHiddenInner(line, sp)) return true;\n    }\n  }\n\n  // hl stands for history-line, a data structure that can be either a\n  // string (line without markers) or a {text, markedSpans} object.\n  function hlText(val) { return typeof val == \"string\" ? val : val.text; }\n  function hlSpans(val) {\n    if (typeof val == \"string\") return null;\n    var spans = val.markedSpans, out = null;\n    for (var i = 0; i < spans.length; ++i) {\n      if (spans[i].marker.explicitlyCleared) { if (!out) out = spans.slice(0, i); }\n      else if (out) out.push(spans[i]);\n    }\n    return !out ? spans : out.length ? out : null;\n  }\n  function newHL(text, spans) { return spans ? {text: text, markedSpans: spans} : text; }\n\n  function detachMarkedSpans(line) {\n    var spans = line.markedSpans;\n    if (!spans) return;\n    for (var i = 0; i < spans.length; ++i) {\n      var lines = spans[i].marker.lines;\n      var ix = indexOf(lines, line);\n      lines.splice(ix, 1);\n    }\n    line.markedSpans = null;\n  }\n\n  function attachMarkedSpans(line, spans) {\n    if (!spans) return;\n    for (var i = 0; i < spans.length; ++i)\n      spans[i].marker.lines.push(line);\n    line.markedSpans = spans;\n  }\n\n  // LINE DATA STRUCTURE\n\n  // Line objects. These hold state related to a line, including\n  // highlighting info (the styles array).\n  function makeLine(text, markedSpans, height) {\n    var line = {text: text, height: height};\n    attachMarkedSpans(line, markedSpans);\n    if (lineIsHidden(line)) line.height = 0;\n    return line;\n  }\n\n  function updateLine(cm, line, text, markedSpans) {\n    line.text = text;\n    line.stateAfter = line.styles = null;\n    if (line.order != null) line.order = null;\n    detachMarkedSpans(line);\n    attachMarkedSpans(line, markedSpans);\n    if (lineIsHidden(line)) line.height = 0;\n    else if (!line.height) line.height = textHeight(cm.display);\n    signalLater(cm, line, \"change\");\n  }\n\n  function cleanUpLine(line) {\n    line.parent = null;\n    detachMarkedSpans(line);\n  }\n\n  // Run the given mode's parser over a line, update the styles\n  // array, which contains alternating fragments of text and CSS\n  // classes.\n  function highlightLine(cm, line, state) {\n    var mode = cm.view.mode, flattenSpans = cm.options.flattenSpans;\n    var changed = !line.styles, pos = 0, curText = \"\", curStyle = null;\n    var stream = new StringStream(line.text, cm.options.tabSize), st = line.styles || (line.styles = []);\n    if (line.text == \"\" && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state), substr = stream.current();\n      stream.start = stream.pos;\n      if (!flattenSpans || curStyle != style) {\n        if (curText) {\n          changed = changed || pos >= st.length || curText != st[pos] || curStyle != st[pos+1];\n          st[pos++] = curText; st[pos++] = curStyle;\n        }\n        curText = substr; curStyle = style;\n      } else curText = curText + substr;\n      // Give up when line is ridiculously long\n      if (stream.pos > 5000) break;\n    }\n    if (curText) {\n      changed = changed || pos >= st.length || curText != st[pos] || curStyle != st[pos+1];\n      st[pos++] = curText; st[pos++] = curStyle;\n    }\n    if (stream.pos > 5000) { st[pos++] = line.text.slice(stream.pos); st[pos++] = null; }\n    if (pos != st.length) { st.length = pos; changed = true; }\n    return changed;\n  }\n\n  // Lightweight form of highlight -- proceed over this line and\n  // update state, but don't save a style array.\n  function processLine(cm, line, state) {\n    var mode = cm.view.mode;\n    var stream = new StringStream(line.text, cm.options.tabSize);\n    if (line.text == \"\" && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol() && stream.pos <= 5000) {\n      mode.token(stream, state);\n      stream.start = stream.pos;\n    }\n  }\n\n  var styleToClassCache = {};\n  function styleToClass(style) {\n    if (!style) return null;\n    return styleToClassCache[style] ||\n      (styleToClassCache[style] = \"cm-\" + style.replace(/ +/g, \" cm-\"));\n  }\n\n  function lineContent(cm, realLine, measure) {\n    var merged, line = realLine, lineBefore, sawBefore, simple = true;\n    while (merged = collapsedSpanAtStart(line)) {\n      simple = false;\n      line = getLine(cm.view.doc, merged.find().from.line);\n      if (!lineBefore) lineBefore = line;\n    }\n\n    var builder = {pre: elt(\"pre\"), col: 0, pos: 0, display: !measure,\n                   measure: null, addedOne: false, cm: cm};\n    if (line.textClass) builder.pre.className = line.textClass;\n\n    do {\n      if (!line.styles)\n        highlightLine(cm, line, line.stateAfter = getStateBefore(cm, lineNo(line)));\n      builder.measure = line == realLine && measure;\n      builder.pos = 0;\n      builder.addToken = builder.measure ? buildTokenMeasure : buildToken;\n      if (measure && sawBefore && line != realLine && !builder.addedOne) {\n        measure[0] = builder.pre.appendChild(zeroWidthElement(cm.display.measure));\n        builder.addedOne = true;\n      }\n      var next = insertLineContent(line, builder);\n      sawBefore = line == lineBefore;\n      if (next) {\n        line = getLine(cm.view.doc, next.to.line);\n        simple = false;\n      }\n    } while (next);\n\n    if (measure && !builder.addedOne)\n      measure[0] = builder.pre.appendChild(simple ? elt(\"span\", \"\\u00a0\") : zeroWidthElement(cm.display.measure));\n    if (!builder.pre.firstChild && !lineIsHidden(realLine))\n      builder.pre.appendChild(document.createTextNode(\"\\u00a0\"));\n\n    return builder.pre;\n  }\n\n  var tokenSpecialChars = /[\\t\\u0000-\\u0019\\u200b\\u2028\\u2029\\uFEFF]/g;\n  function buildToken(builder, text, style, startStyle, endStyle) {\n    if (!text) return;\n    if (!tokenSpecialChars.test(text)) {\n      builder.col += text.length;\n      var content = document.createTextNode(text);\n    } else {\n      var content = document.createDocumentFragment(), pos = 0;\n      while (true) {\n        tokenSpecialChars.lastIndex = pos;\n        var m = tokenSpecialChars.exec(text);\n        var skipped = m ? m.index - pos : text.length - pos;\n        if (skipped) {\n          content.appendChild(document.createTextNode(text.slice(pos, pos + skipped)));\n          builder.col += skipped;\n        }\n        if (!m) break;\n        pos += skipped + 1;\n        if (m[0] == \"\\t\") {\n          var tabSize = builder.cm.options.tabSize, tabWidth = tabSize - builder.col % tabSize;\n          content.appendChild(elt(\"span\", spaceStr(tabWidth), \"cm-tab\"));\n          builder.col += tabWidth;\n        } else {\n          var token = elt(\"span\", \"\\u2022\", \"cm-invalidchar\");\n          token.title = \"\\\\u\" + m[0].charCodeAt(0).toString(16);\n          content.appendChild(token);\n          builder.col += 1;\n        }\n      }\n    }\n    if (style || startStyle || endStyle || builder.measure) {\n      var fullStyle = style || \"\";\n      if (startStyle) fullStyle += startStyle;\n      if (endStyle) fullStyle += endStyle;\n      return builder.pre.appendChild(elt(\"span\", [content], fullStyle));\n    }\n    builder.pre.appendChild(content);\n  }\n\n  function buildTokenMeasure(builder, text, style, startStyle, endStyle) {\n    for (var i = 0; i < text.length; ++i) {\n      if (i && i < text.length - 1 &&\n          builder.cm.options.lineWrapping &&\n          spanAffectsWrapping.test(text.slice(i - 1, i + 1)))\n        builder.pre.appendChild(elt(\"wbr\"));\n      builder.measure[builder.pos++] =\n        buildToken(builder, text.charAt(i), style,\n                   i == 0 && startStyle, i == text.length - 1 && endStyle);\n    }\n    if (text.length) builder.addedOne = true;\n  }\n\n  function buildCollapsedSpan(builder, size, widget) {\n    if (widget) {\n      if (!builder.display) widget = widget.cloneNode(true);\n      builder.pre.appendChild(widget);\n      if (builder.measure && size) {\n        builder.measure[builder.pos] = widget;\n        builder.addedOne = true;\n      }\n    }\n    builder.pos += size;\n  }\n\n  // Outputs a number of spans to make up a line, taking highlighting\n  // and marked text into account.\n  function insertLineContent(line, builder) {\n    var st = line.styles, spans = line.markedSpans;\n    if (!spans) {\n      for (var i = 0; i < st.length; i+=2)\n        builder.addToken(builder, st[i], styleToClass(st[i+1]));\n      return;\n    }\n\n    var allText = line.text, len = allText.length;\n    var pos = 0, i = 0, text = \"\", style;\n    var nextChange = 0, spanStyle, spanEndStyle, spanStartStyle, collapsed;\n    for (;;) {\n      if (nextChange == pos) { // Update current marker set\n        spanStyle = spanEndStyle = spanStartStyle = \"\";\n        collapsed = null; nextChange = Infinity;\n        var foundBookmark = null;\n        for (var j = 0; j < spans.length; ++j) {\n          var sp = spans[j], m = sp.marker;\n          if (sp.from <= pos && (sp.to == null || sp.to > pos)) {\n            if (sp.to != null && nextChange > sp.to) { nextChange = sp.to; spanEndStyle = \"\"; }\n            if (m.className) spanStyle += \" \" + m.className;\n            if (m.startStyle && sp.from == pos) spanStartStyle += \" \" + m.startStyle;\n            if (m.endStyle && sp.to == nextChange) spanEndStyle += \" \" + m.endStyle;\n            if (m.collapsed && (!collapsed || collapsed.marker.width < m.width))\n              collapsed = sp;\n          } else if (sp.from > pos && nextChange > sp.from) {\n            nextChange = sp.from;\n          }\n          if (m.type == \"bookmark\" && sp.from == pos && m.replacedWith)\n            foundBookmark = m.replacedWith;\n        }\n        if (collapsed && (collapsed.from || 0) == pos) {\n          buildCollapsedSpan(builder, (collapsed.to == null ? len : collapsed.to) - pos,\n                             collapsed.from != null && collapsed.marker.replacedWith);\n          if (collapsed.to == null) return collapsed.marker.find();\n        }\n        if (foundBookmark && !collapsed) buildCollapsedSpan(builder, 0, foundBookmark);\n      }\n      if (pos >= len) break;\n\n      var upto = Math.min(len, nextChange);\n      while (true) {\n        if (text) {\n          var end = pos + text.length;\n          if (!collapsed) {\n            var tokenText = end > upto ? text.slice(0, upto - pos) : text;\n            builder.addToken(builder, tokenText, style + spanStyle,\n                             spanStartStyle, pos + tokenText.length == nextChange ? spanEndStyle : \"\");\n          }\n          if (end >= upto) {text = text.slice(upto - pos); pos = upto; break;}\n          pos = end;\n          spanStartStyle = \"\";\n        }\n        text = st[i++]; style = styleToClass(st[i++]);\n      }\n    }\n  }\n\n  // DOCUMENT DATA STRUCTURE\n\n  function LeafChunk(lines) {\n    this.lines = lines;\n    this.parent = null;\n    for (var i = 0, e = lines.length, height = 0; i < e; ++i) {\n      lines[i].parent = this;\n      height += lines[i].height;\n    }\n    this.height = height;\n  }\n\n  LeafChunk.prototype = {\n    chunkSize: function() { return this.lines.length; },\n    remove: function(at, n, cm) {\n      for (var i = at, e = at + n; i < e; ++i) {\n        var line = this.lines[i];\n        this.height -= line.height;\n        cleanUpLine(line);\n        signalLater(cm, line, \"delete\");\n      }\n      this.lines.splice(at, n);\n    },\n    collapse: function(lines) {\n      lines.splice.apply(lines, [lines.length, 0].concat(this.lines));\n    },\n    insertHeight: function(at, lines, height) {\n      this.height += height;\n      this.lines = this.lines.slice(0, at).concat(lines).concat(this.lines.slice(at));\n      for (var i = 0, e = lines.length; i < e; ++i) lines[i].parent = this;\n    },\n    iterN: function(at, n, op) {\n      for (var e = at + n; at < e; ++at)\n        if (op(this.lines[at])) return true;\n    }\n  };\n\n  function BranchChunk(children) {\n    this.children = children;\n    var size = 0, height = 0;\n    for (var i = 0, e = children.length; i < e; ++i) {\n      var ch = children[i];\n      size += ch.chunkSize(); height += ch.height;\n      ch.parent = this;\n    }\n    this.size = size;\n    this.height = height;\n    this.parent = null;\n  }\n\n  BranchChunk.prototype = {\n    chunkSize: function() { return this.size; },\n    remove: function(at, n, callbacks) {\n      this.size -= n;\n      for (var i = 0; i < this.children.length; ++i) {\n        var child = this.children[i], sz = child.chunkSize();\n        if (at < sz) {\n          var rm = Math.min(n, sz - at), oldHeight = child.height;\n          child.remove(at, rm, callbacks);\n          this.height -= oldHeight - child.height;\n          if (sz == rm) { this.children.splice(i--, 1); child.parent = null; }\n          if ((n -= rm) == 0) break;\n          at = 0;\n        } else at -= sz;\n      }\n      if (this.size - n < 25) {\n        var lines = [];\n        this.collapse(lines);\n        this.children = [new LeafChunk(lines)];\n        this.children[0].parent = this;\n      }\n    },\n    collapse: function(lines) {\n      for (var i = 0, e = this.children.length; i < e; ++i) this.children[i].collapse(lines);\n    },\n    insert: function(at, lines) {\n      var height = 0;\n      for (var i = 0, e = lines.length; i < e; ++i) height += lines[i].height;\n      this.insertHeight(at, lines, height);\n    },\n    insertHeight: function(at, lines, height) {\n      this.size += lines.length;\n      this.height += height;\n      for (var i = 0, e = this.children.length; i < e; ++i) {\n        var child = this.children[i], sz = child.chunkSize();\n        if (at <= sz) {\n          child.insertHeight(at, lines, height);\n          if (child.lines && child.lines.length > 50) {\n            while (child.lines.length > 50) {\n              var spilled = child.lines.splice(child.lines.length - 25, 25);\n              var newleaf = new LeafChunk(spilled);\n              child.height -= newleaf.height;\n              this.children.splice(i + 1, 0, newleaf);\n              newleaf.parent = this;\n            }\n            this.maybeSpill();\n          }\n          break;\n        }\n        at -= sz;\n      }\n    },\n    maybeSpill: function() {\n      if (this.children.length <= 10) return;\n      var me = this;\n      do {\n        var spilled = me.children.splice(me.children.length - 5, 5);\n        var sibling = new BranchChunk(spilled);\n        if (!me.parent) { // Become the parent node\n          var copy = new BranchChunk(me.children);\n          copy.parent = me;\n          me.children = [copy, sibling];\n          me = copy;\n        } else {\n          me.size -= sibling.size;\n          me.height -= sibling.height;\n          var myIndex = indexOf(me.parent.children, me);\n          me.parent.children.splice(myIndex + 1, 0, sibling);\n        }\n        sibling.parent = me.parent;\n      } while (me.children.length > 10);\n      me.parent.maybeSpill();\n    },\n    iter: function(from, to, op) { this.iterN(from, to - from, op); },\n    iterN: function(at, n, op) {\n      for (var i = 0, e = this.children.length; i < e; ++i) {\n        var child = this.children[i], sz = child.chunkSize();\n        if (at < sz) {\n          var used = Math.min(n, sz - at);\n          if (child.iterN(at, used, op)) return true;\n          if ((n -= used) == 0) break;\n          at = 0;\n        } else at -= sz;\n      }\n    }\n  };\n\n  // LINE UTILITIES\n\n  function getLine(chunk, n) {\n    while (!chunk.lines) {\n      for (var i = 0;; ++i) {\n        var child = chunk.children[i], sz = child.chunkSize();\n        if (n < sz) { chunk = child; break; }\n        n -= sz;\n      }\n    }\n    return chunk.lines[n];\n  }\n\n  function updateLineHeight(line, height) {\n    var diff = height - line.height;\n    for (var n = line; n; n = n.parent) n.height += diff;\n  }\n\n  function lineNo(line) {\n    if (line.parent == null) return null;\n    var cur = line.parent, no = indexOf(cur.lines, line);\n    for (var chunk = cur.parent; chunk; cur = chunk, chunk = chunk.parent) {\n      for (var i = 0;; ++i) {\n        if (chunk.children[i] == cur) break;\n        no += chunk.children[i].chunkSize();\n      }\n    }\n    return no;\n  }\n\n  function lineAtHeight(chunk, h) {\n    var n = 0;\n    outer: do {\n      for (var i = 0, e = chunk.children.length; i < e; ++i) {\n        var child = chunk.children[i], ch = child.height;\n        if (h < ch) { chunk = child; continue outer; }\n        h -= ch;\n        n += child.chunkSize();\n      }\n      return n;\n    } while (!chunk.lines);\n    for (var i = 0, e = chunk.lines.length; i < e; ++i) {\n      var line = chunk.lines[i], lh = line.height;\n      if (h < lh) break;\n      h -= lh;\n    }\n    return n + i;\n  }\n\n  function heightAtLine(cm, lineObj) {\n    lineObj = visualLine(cm.view.doc, lineObj);\n\n    var h = 0, chunk = lineObj.parent;\n    for (var i = 0; i < chunk.lines.length; ++i) {\n      var line = chunk.lines[i];\n      if (line == lineObj) break;\n      else h += line.height;\n    }\n    for (var p = chunk.parent; p; chunk = p, p = chunk.parent) {\n      for (var i = 0; i < p.children.length; ++i) {\n        var cur = p.children[i];\n        if (cur == chunk) break;\n        else h += cur.height;\n      }\n    }\n    return h;\n  }\n\n  function getOrder(line) {\n    var order = line.order;\n    if (order == null) order = line.order = bidiOrdering(line.text);\n    return order;\n  }\n\n  // HISTORY\n\n  function makeHistory() {\n    return {\n      // Arrays of history events. Doing something adds an event to\n      // done and clears undo. Undoing moves events from done to\n      // undone, redoing moves them in the other direction.\n      done: [], undone: [],\n      // Used to track when changes can be merged into a single undo\n      // event\n      lastTime: 0, lastOp: null, lastOrigin: null,\n      // Used by the isClean() method\n      dirtyCounter: 0\n    };\n  }\n\n  function addChange(cm, start, added, old, origin, fromBefore, toBefore, fromAfter, toAfter) {\n    var history = cm.view.history;\n    history.undone.length = 0;\n    var time = +new Date, cur = lst(history.done);\n    \n    if (cur &&\n        (history.lastOp == cm.curOp.id ||\n         history.lastOrigin == origin && (origin == \"input\" || origin == \"delete\") &&\n         history.lastTime > time - 600)) {\n      // Merge this change into the last event\n      var last = lst(cur.events);\n      if (last.start > start + old.length || last.start + last.added < start) {\n        // Doesn't intersect with last sub-event, add new sub-event\n        cur.events.push({start: start, added: added, old: old});\n      } else {\n        // Patch up the last sub-event\n        var startBefore = Math.max(0, last.start - start),\n        endAfter = Math.max(0, (start + old.length) - (last.start + last.added));\n        for (var i = startBefore; i > 0; --i) last.old.unshift(old[i - 1]);\n        for (var i = endAfter; i > 0; --i) last.old.push(old[old.length - i]);\n        if (startBefore) last.start = start;\n        last.added += added - (old.length - startBefore - endAfter);\n      }\n      cur.fromAfter = fromAfter; cur.toAfter = toAfter;\n    } else {\n      // Can not be merged, start a new event.\n      cur = {events: [{start: start, added: added, old: old}],\n             fromBefore: fromBefore, toBefore: toBefore, fromAfter: fromAfter, toAfter: toAfter};\n      history.done.push(cur);\n      while (history.done.length > cm.options.undoDepth)\n        history.done.shift();\n      if (history.dirtyCounter < 0)\n          // The user has made a change after undoing past the last clean state. \n          // We can never get back to a clean state now until markClean() is called.\n          history.dirtyCounter = NaN;\n      else\n        history.dirtyCounter++;\n    }\n    history.lastTime = time;\n    history.lastOp = cm.curOp.id;\n    history.lastOrigin = origin;\n  }\n\n  // EVENT OPERATORS\n\n  function stopMethod() {e_stop(this);}\n  // Ensure an event has a stop method.\n  function addStop(event) {\n    if (!event.stop) event.stop = stopMethod;\n    return event;\n  }\n\n  function e_preventDefault(e) {\n    if (e.preventDefault) e.preventDefault();\n    else e.returnValue = false;\n  }\n  function e_stopPropagation(e) {\n    if (e.stopPropagation) e.stopPropagation();\n    else e.cancelBubble = true;\n  }\n  function e_stop(e) {e_preventDefault(e); e_stopPropagation(e);}\n  CodeMirror.e_stop = e_stop;\n  CodeMirror.e_preventDefault = e_preventDefault;\n  CodeMirror.e_stopPropagation = e_stopPropagation;\n\n  function e_target(e) {return e.target || e.srcElement;}\n  function e_button(e) {\n    var b = e.which;\n    if (b == null) {\n      if (e.button & 1) b = 1;\n      else if (e.button & 2) b = 3;\n      else if (e.button & 4) b = 2;\n    }\n    if (mac && e.ctrlKey && b == 1) b = 3;\n    return b;\n  }\n\n  // Allow 3rd-party code to override event properties by adding an override\n  // object to an event object.\n  function e_prop(e, prop) {\n    var overridden = e.override && e.override.hasOwnProperty(prop);\n    return overridden ? e.override[prop] : e[prop];\n  }\n\n  // EVENT HANDLING\n\n  function on(emitter, type, f) {\n    if (emitter.addEventListener)\n      emitter.addEventListener(type, f, false);\n    else if (emitter.attachEvent)\n      emitter.attachEvent(\"on\" + type, f);\n    else {\n      var map = emitter._handlers || (emitter._handlers = {});\n      var arr = map[type] || (map[type] = []);\n      arr.push(f);\n    }\n  }\n\n  function off(emitter, type, f) {\n    if (emitter.removeEventListener)\n      emitter.removeEventListener(type, f, false);\n    else if (emitter.detachEvent)\n      emitter.detachEvent(\"on\" + type, f);\n    else {\n      var arr = emitter._handlers && emitter._handlers[type];\n      if (!arr) return;\n      for (var i = 0; i < arr.length; ++i)\n        if (arr[i] == f) { arr.splice(i, 1); break; }\n    }\n  }\n\n  function signal(emitter, type /*, values...*/) {\n    var arr = emitter._handlers && emitter._handlers[type];\n    if (!arr) return;\n    var args = Array.prototype.slice.call(arguments, 2);\n    for (var i = 0; i < arr.length; ++i) arr[i].apply(null, args);\n  }\n\n  function signalLater(cm, emitter, type /*, values...*/) {\n    var arr = emitter._handlers && emitter._handlers[type];\n    if (!arr) return;\n    var args = Array.prototype.slice.call(arguments, 3), flist = cm.curOp && cm.curOp.delayedCallbacks;\n    function bnd(f) {return function(){f.apply(null, args);};};\n    for (var i = 0; i < arr.length; ++i)\n      if (flist) flist.push(bnd(arr[i]));\n      else arr[i].apply(null, args);\n  }\n\n  function hasHandler(emitter, type) {\n    var arr = emitter._handlers && emitter._handlers[type];\n    return arr && arr.length > 0;\n  }\n\n  CodeMirror.on = on; CodeMirror.off = off; CodeMirror.signal = signal;\n\n  // MISC UTILITIES\n\n  // Number of pixels added to scroller and sizer to hide scrollbar\n  var scrollerCutOff = 30;\n\n  // Returned or thrown by various protocols to signal 'I'm not\n  // handling this'.\n  var Pass = CodeMirror.Pass = {toString: function(){return \"CodeMirror.Pass\";}};\n\n  function Delayed() {this.id = null;}\n  Delayed.prototype = {set: function(ms, f) {clearTimeout(this.id); this.id = setTimeout(f, ms);}};\n\n  // Counts the column offset in a string, taking tabs into account.\n  // Used mostly to find indentation.\n  function countColumn(string, end, tabSize) {\n    if (end == null) {\n      end = string.search(/[^\\s\\u00a0]/);\n      if (end == -1) end = string.length;\n    }\n    for (var i = 0, n = 0; i < end; ++i) {\n      if (string.charAt(i) == \"\\t\") n += tabSize - (n % tabSize);\n      else ++n;\n    }\n    return n;\n  }\n  CodeMirror.countColumn = countColumn;\n\n  var spaceStrs = [\"\"];\n  function spaceStr(n) {\n    while (spaceStrs.length <= n)\n      spaceStrs.push(lst(spaceStrs) + \" \");\n    return spaceStrs[n];\n  }\n\n  function lst(arr) { return arr[arr.length-1]; }\n\n  function selectInput(node) {\n    if (ios) { // Mobile Safari apparently has a bug where select() is broken.\n      node.selectionStart = 0;\n      node.selectionEnd = node.value.length;\n    } else node.select();\n  }\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  function emptyArray(size) {\n    for (var a = [], i = 0; i < size; ++i) a.push(undefined);\n    return a;\n  }\n\n  function bind(f) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return function(){return f.apply(null, args);};\n  }\n\n  var nonASCIISingleCaseWordChar = /[\\u3040-\\u309f\\u30a0-\\u30ff\\u3400-\\u4db5\\u4e00-\\u9fcc]/;\n  function isWordChar(ch) {\n    return /\\w/.test(ch) || ch > \"\\x80\" &&\n      (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch));\n  }\n\n  function isEmpty(obj) {\n    var c = 0;\n    for (var n in obj) if (obj.hasOwnProperty(n) && obj[n]) ++c;\n    return !c;\n  }\n\n  var isExtendingChar = /[\\u0300-\\u036F\\u0483-\\u0487\\u0488-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1-\\u05C2\\u05C4-\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7-\\u06E8\\u06EA-\\u06ED\\uA66F\\uA670-\\uA672\\uA674-\\uA67D\\uA69F]/;\n\n  // DOM UTILITIES\n\n  function elt(tag, content, className, style) {\n    var e = document.createElement(tag);\n    if (className) e.className = className;\n    if (style) e.style.cssText = style;\n    if (typeof content == \"string\") setTextContent(e, content);\n    else if (content) for (var i = 0; i < content.length; ++i) e.appendChild(content[i]);\n    return e;\n  }\n\n  function removeChildren(e) {\n    e.innerHTML = \"\";\n    return e;\n  }\n\n  function removeChildrenAndAdd(parent, e) {\n    return removeChildren(parent).appendChild(e);\n  }\n\n  function setTextContent(e, str) {\n    if (ie_lt9) {\n      e.innerHTML = \"\";\n      e.appendChild(document.createTextNode(str));\n    } else e.textContent = str;\n  }\n\n  // FEATURE DETECTION\n\n  // Detect drag-and-drop\n  var dragAndDrop = function() {\n    // There is *some* kind of drag-and-drop support in IE6-8, but I\n    // couldn't get it to work yet.\n    if (ie_lt9) return false;\n    var div = elt('div');\n    return \"draggable\" in div || \"dragDrop\" in div;\n  }();\n\n  // For a reason I have yet to figure out, some browsers disallow\n  // word wrapping between certain characters *only* if a new inline\n  // element is started between them. This makes it hard to reliably\n  // measure the position of things, since that requires inserting an\n  // extra span. This terribly fragile set of regexps matches the\n  // character combinations that suffer from this phenomenon on the\n  // various browsers.\n  var spanAffectsWrapping = /^$/; // Won't match any two-character string\n  if (gecko) spanAffectsWrapping = /$'/;\n  else if (safari) spanAffectsWrapping = /\\-[^ \\-?]|\\?[^ !'\\\"\\),.\\-\\/:;\\?\\]\\}]/;\n  else if (chrome) spanAffectsWrapping = /\\-[^ \\-\\.?]|\\?[^ \\-\\.?\\]\\}:;!'\\\"\\),\\/]|[\\.!\\\"#&%\\)*+,:;=>\\]|\\}~][\\(\\{\\[<]|\\$'/;\n\n  var knownScrollbarWidth;\n  function scrollbarWidth(measure) {\n    if (knownScrollbarWidth != null) return knownScrollbarWidth;\n    var test = elt(\"div\", null, null, \"width: 50px; height: 50px; overflow-x: scroll\");\n    removeChildrenAndAdd(measure, test);\n    if (test.offsetWidth)\n      knownScrollbarWidth = test.offsetHeight - test.clientHeight;\n    return knownScrollbarWidth || 0;\n  }\n\n  var zwspSupported;\n  function zeroWidthElement(measure) {\n    if (zwspSupported == null) {\n      var test = elt(\"span\", \"\\u200b\");\n      removeChildrenAndAdd(measure, elt(\"span\", [test, document.createTextNode(\"x\")]));\n      if (measure.firstChild.offsetHeight != 0)\n        zwspSupported = test.offsetWidth <= 1 && test.offsetHeight > 2 && !ie_lt8;\n    }\n    if (zwspSupported) return elt(\"span\", \"\\u200b\");\n    else return elt(\"span\", \"\\u00a0\", null, \"display: inline-block; width: 1px; margin-right: -1px\");\n  }\n\n  // See if \"\".split is the broken IE version, if so, provide an\n  // alternative way to split lines.\n  var splitLines = \"\\n\\nb\".split(/\\n/).length != 3 ? function(string) {\n    var pos = 0, result = [], l = string.length;\n    while (pos <= l) {\n      var nl = string.indexOf(\"\\n\", pos);\n      if (nl == -1) nl = string.length;\n      var line = string.slice(pos, string.charAt(nl - 1) == \"\\r\" ? nl - 1 : nl);\n      var rt = line.indexOf(\"\\r\");\n      if (rt != -1) {\n        result.push(line.slice(0, rt));\n        pos += rt + 1;\n      } else {\n        result.push(line);\n        pos = nl + 1;\n      }\n    }\n    return result;\n  } : function(string){return string.split(/\\r\\n?|\\n/);};\n  CodeMirror.splitLines = splitLines;\n\n  var hasSelection = window.getSelection ? function(te) {\n    try { return te.selectionStart != te.selectionEnd; }\n    catch(e) { return false; }\n  } : function(te) {\n    try {var range = te.ownerDocument.selection.createRange();}\n    catch(e) {}\n    if (!range || range.parentElement() != te) return false;\n    return range.compareEndPoints(\"StartToEnd\", range) != 0;\n  };\n\n  var hasCopyEvent = (function() {\n    var e = elt(\"div\");\n    if (\"oncopy\" in e) return true;\n    e.setAttribute(\"oncopy\", \"return;\");\n    return typeof e.oncopy == 'function';\n  })();\n\n  // KEY NAMING\n\n  var keyNames = {3: \"Enter\", 8: \"Backspace\", 9: \"Tab\", 13: \"Enter\", 16: \"Shift\", 17: \"Ctrl\", 18: \"Alt\",\n                  19: \"Pause\", 20: \"CapsLock\", 27: \"Esc\", 32: \"Space\", 33: \"PageUp\", 34: \"PageDown\", 35: \"End\",\n                  36: \"Home\", 37: \"Left\", 38: \"Up\", 39: \"Right\", 40: \"Down\", 44: \"PrintScrn\", 45: \"Insert\",\n                  46: \"Delete\", 59: \";\", 91: \"Mod\", 92: \"Mod\", 93: \"Mod\", 109: \"-\", 107: \"=\", 127: \"Delete\",\n                  186: \";\", 187: \"=\", 188: \",\", 189: \"-\", 190: \".\", 191: \"/\", 192: \"`\", 219: \"[\", 220: \"\\\\\",\n                  221: \"]\", 222: \"'\", 63276: \"PageUp\", 63277: \"PageDown\", 63275: \"End\", 63273: \"Home\",\n                  63234: \"Left\", 63232: \"Up\", 63235: \"Right\", 63233: \"Down\", 63302: \"Insert\", 63272: \"Delete\"};\n  CodeMirror.keyNames = keyNames;\n  (function() {\n    // Number keys\n    for (var i = 0; i < 10; i++) keyNames[i + 48] = String(i);\n    // Alphabetic keys\n    for (var i = 65; i <= 90; i++) keyNames[i] = String.fromCharCode(i);\n    // Function keys\n    for (var i = 1; i <= 12; i++) keyNames[i + 111] = keyNames[i + 63235] = \"F\" + i;\n  })();\n\n  // BIDI HELPERS\n\n  function iterateBidiSections(order, from, to, f) {\n    if (!order) return f(from, to, \"ltr\");\n    for (var i = 0; i < order.length; ++i) {\n      var part = order[i];\n      if (part.from < to && part.to > from)\n        f(Math.max(part.from, from), Math.min(part.to, to), part.level == 1 ? \"rtl\" : \"ltr\");\n    }\n  }\n\n  function bidiLeft(part) { return part.level % 2 ? part.to : part.from; }\n  function bidiRight(part) { return part.level % 2 ? part.from : part.to; }\n\n  function lineLeft(line) { var order = getOrder(line); return order ? bidiLeft(order[0]) : 0; }\n  function lineRight(line) {\n    var order = getOrder(line);\n    if (!order) return line.text.length;\n    return bidiRight(lst(order));\n  }\n\n  function lineStart(cm, lineN) {\n    var line = getLine(cm.view.doc, lineN);\n    var visual = visualLine(cm.view.doc, line);\n    if (visual != line) lineN = lineNo(visual);\n    var order = getOrder(visual);\n    var ch = !order ? 0 : order[0].level % 2 ? lineRight(visual) : lineLeft(visual);\n    return {line: lineN, ch: ch};\n  }\n  function lineEnd(cm, lineNo) {\n    var merged, line;\n    while (merged = collapsedSpanAtEnd(line = getLine(cm.view.doc, lineNo)))\n      lineNo = merged.find().to.line;\n    var order = getOrder(line);\n    var ch = !order ? line.text.length : order[0].level % 2 ? lineLeft(line) : lineRight(line);\n    return {line: lineNo, ch: ch};\n  }\n\n  // This is somewhat involved. It is needed in order to move\n  // 'visually' through bi-directional text -- i.e., pressing left\n  // should make the cursor go left, even when in RTL text. The\n  // tricky part is the 'jumps', where RTL and LTR text touch each\n  // other. This often requires the cursor offset to move more than\n  // one unit, in order to visually move one unit.\n  function moveVisually(line, start, dir, byUnit) {\n    var bidi = getOrder(line);\n    if (!bidi) return moveLogically(line, start, dir, byUnit);\n    var moveOneUnit = byUnit ? function(pos, dir) {\n      do pos += dir;\n      while (pos > 0 && isExtendingChar.test(line.text.charAt(pos)));\n      return pos;\n    } : function(pos, dir) { return pos + dir; };\n    var linedir = bidi[0].level;\n    for (var i = 0; i < bidi.length; ++i) {\n      var part = bidi[i], sticky = part.level % 2 == linedir;\n      if ((part.from < start && part.to > start) ||\n          (sticky && (part.from == start || part.to == start))) break;\n    }\n    var target = moveOneUnit(start, part.level % 2 ? -dir : dir);\n\n    while (target != null) {\n      if (part.level % 2 == linedir) {\n        if (target < part.from || target > part.to) {\n          part = bidi[i += dir];\n          target = part && (dir > 0 == part.level % 2 ? moveOneUnit(part.to, -1) : moveOneUnit(part.from, 1));\n        } else break;\n      } else {\n        if (target == bidiLeft(part)) {\n          part = bidi[--i];\n          target = part && bidiRight(part);\n        } else if (target == bidiRight(part)) {\n          part = bidi[++i];\n          target = part && bidiLeft(part);\n        } else break;\n      }\n    }\n\n    return target < 0 || target > line.text.length ? null : target;\n  }\n\n  function moveLogically(line, start, dir, byUnit) {\n    var target = start + dir;\n    if (byUnit) while (target > 0 && isExtendingChar.test(line.text.charAt(target))) target += dir;\n    return target < 0 || target > line.text.length ? null : target;\n  }\n\n  // Bidirectional ordering algorithm\n  // See http://unicode.org/reports/tr9/tr9-13.html for the algorithm\n  // that this (partially) implements.\n\n  // One-char codes used for character types:\n  // L (L):   Left-to-Right\n  // R (R):   Right-to-Left\n  // r (AL):  Right-to-Left Arabic\n  // 1 (EN):  European Number\n  // + (ES):  European Number Separator\n  // % (ET):  European Number Terminator\n  // n (AN):  Arabic Number\n  // , (CS):  Common Number Separator\n  // m (NSM): Non-Spacing Mark\n  // b (BN):  Boundary Neutral\n  // s (B):   Paragraph Separator\n  // t (S):   Segment Separator\n  // w (WS):  Whitespace\n  // N (ON):  Other Neutrals\n\n  // Returns null if characters are ordered as they appear\n  // (left-to-right), or an array of sections ({from, to, level}\n  // objects) in the order in which they occur visually.\n  var bidiOrdering = (function() {\n    // Character types for codepoints 0 to 0xff\n    var lowTypes = \"bbbbbbbbbtstwsbbbbbbbbbbbbbbssstwNN%%%NNNNNN,N,N1111111111NNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbbb,N%%%%NNNNLNNNNN%%11NLNNN1LNNNNNLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLL\";\n    // Character types for codepoints 0x600 to 0x6ff\n    var arabicTypes = \"rrrrrrrrrrrr,rNNmmmmmmrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrmmmmmmmmmmmmmmrrrrrrrnnnnnnnnnn%nnrrrmrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrmmmmmmmmmmmmmmmmmmmNmmmmrrrrrrrrrrrrrrrrrr\";\n    function charType(code) {\n      if (code <= 0xff) return lowTypes.charAt(code);\n      else if (0x590 <= code && code <= 0x5f4) return \"R\";\n      else if (0x600 <= code && code <= 0x6ff) return arabicTypes.charAt(code - 0x600);\n      else if (0x700 <= code && code <= 0x8ac) return \"r\";\n      else return \"L\";\n    }\n\n    var bidiRE = /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac]/;\n    var isNeutral = /[stwN]/, isStrong = /[LRr]/, countsAsLeft = /[Lb1n]/, countsAsNum = /[1n]/;\n\n    return function charOrdering(str) {\n      if (!bidiRE.test(str)) return false;\n      var len = str.length, types = [], startType = null;\n      for (var i = 0, type; i < len; ++i) {\n        types.push(type = charType(str.charCodeAt(i)));\n        if (startType == null) {\n          if (type == \"L\") startType = \"L\";\n          else if (type == \"R\" || type == \"r\") startType = \"R\";\n        }\n      }\n      if (startType == null) startType = \"L\";\n\n      // W1. Examine each non-spacing mark (NSM) in the level run, and\n      // change the type of the NSM to the type of the previous\n      // character. If the NSM is at the start of the level run, it will\n      // get the type of sor.\n      for (var i = 0, prev = startType; i < len; ++i) {\n        var type = types[i];\n        if (type == \"m\") types[i] = prev;\n        else prev = type;\n      }\n\n      // W2. Search backwards from each instance of a European number\n      // until the first strong type (R, L, AL, or sor) is found. If an\n      // AL is found, change the type of the European number to Arabic\n      // number.\n      // W3. Change all ALs to R.\n      for (var i = 0, cur = startType; i < len; ++i) {\n        var type = types[i];\n        if (type == \"1\" && cur == \"r\") types[i] = \"n\";\n        else if (isStrong.test(type)) { cur = type; if (type == \"r\") types[i] = \"R\"; }\n      }\n\n      // W4. A single European separator between two European numbers\n      // changes to a European number. A single common separator between\n      // two numbers of the same type changes to that type.\n      for (var i = 1, prev = types[0]; i < len - 1; ++i) {\n        var type = types[i];\n        if (type == \"+\" && prev == \"1\" && types[i+1] == \"1\") types[i] = \"1\";\n        else if (type == \",\" && prev == types[i+1] &&\n                 (prev == \"1\" || prev == \"n\")) types[i] = prev;\n        prev = type;\n      }\n\n      // W5. A sequence of European terminators adjacent to European\n      // numbers changes to all European numbers.\n      // W6. Otherwise, separators and terminators change to Other\n      // Neutral.\n      for (var i = 0; i < len; ++i) {\n        var type = types[i];\n        if (type == \",\") types[i] = \"N\";\n        else if (type == \"%\") {\n          for (var end = i + 1; end < len && types[end] == \"%\"; ++end) {}\n          var replace = (i && types[i-1] == \"!\") || (end < len - 1 && types[end] == \"1\") ? \"1\" : \"N\";\n          for (var j = i; j < end; ++j) types[j] = replace;\n          i = end - 1;\n        }\n      }\n\n      // W7. Search backwards from each instance of a European number\n      // until the first strong type (R, L, or sor) is found. If an L is\n      // found, then change the type of the European number to L.\n      for (var i = 0, cur = startType; i < len; ++i) {\n        var type = types[i];\n        if (cur == \"L\" && type == \"1\") types[i] = \"L\";\n        else if (isStrong.test(type)) cur = type;\n      }\n\n      // N1. A sequence of neutrals takes the direction of the\n      // surrounding strong text if the text on both sides has the same\n      // direction. European and Arabic numbers act as if they were R in\n      // terms of their influence on neutrals. Start-of-level-run (sor)\n      // and end-of-level-run (eor) are used at level run boundaries.\n      // N2. Any remaining neutrals take the embedding direction.\n      for (var i = 0; i < len; ++i) {\n        if (isNeutral.test(types[i])) {\n          for (var end = i + 1; end < len && isNeutral.test(types[end]); ++end) {}\n          var before = (i ? types[i-1] : startType) == \"L\";\n          var after = (end < len - 1 ? types[end] : startType) == \"L\";\n          var replace = before || after ? \"L\" : \"R\";\n          for (var j = i; j < end; ++j) types[j] = replace;\n          i = end - 1;\n        }\n      }\n\n      // Here we depart from the documented algorithm, in order to avoid\n      // building up an actual levels array. Since there are only three\n      // levels (0, 1, 2) in an implementation that doesn't take\n      // explicit embedding into account, we can build up the order on\n      // the fly, without following the level-based algorithm.\n      var order = [], m;\n      for (var i = 0; i < len;) {\n        if (countsAsLeft.test(types[i])) {\n          var start = i;\n          for (++i; i < len && countsAsLeft.test(types[i]); ++i) {}\n          order.push({from: start, to: i, level: 0});\n        } else {\n          var pos = i, at = order.length;\n          for (++i; i < len && types[i] != \"L\"; ++i) {}\n          for (var j = pos; j < i;) {\n            if (countsAsNum.test(types[j])) {\n              if (pos < j) order.splice(at, 0, {from: pos, to: j, level: 1});\n              var nstart = j;\n              for (++j; j < i && countsAsNum.test(types[j]); ++j) {}\n              order.splice(at, 0, {from: nstart, to: j, level: 2});\n              pos = j;\n            } else ++j;\n          }\n          if (pos < i) order.splice(at, 0, {from: pos, to: i, level: 1});\n        }\n      }\n      if (order[0].level == 1 && (m = str.match(/^\\s+/))) {\n        order[0].from = m[0].length;\n        order.unshift({from: 0, to: m[0].length, level: 0});\n      }\n      if (lst(order).level == 1 && (m = str.match(/\\s+$/))) {\n        lst(order).to -= m[0].length;\n        order.push({from: len - m[0].length, to: len, level: 0});\n      }\n      if (order[0].level != lst(order).level)\n        order.push({from: len, to: len, level: order[0].level});\n\n      return order;\n    };\n  })();\n\n  // THE END\n\n  CodeMirror.version = \"3.0\";\n\n  return CodeMirror;\n})();\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/helpers.js":"'lang sweet.js';\n\nvar TypeCodes = {\n  Identifier: 0,\n  Keyword: 1,\n  Punctuator: 2,\n  NumericLiteral: 3,\n  StringLiteral: 4,\n  TemplateElement: 5,\n  Template: 6,\n  RegExp: 7,\n};\n\nfunction check(obj, type) {\n  return obj && obj.type === 'RawSyntax' && obj.value.token.typeCode === type;\n}\n\nexport function unwrap(obj) {\n  var hasTok = obj && obj.value && obj.value.token;\n  if (hasTok && obj.value.token.typeCode === TypeCodes.StringLiteral) {\n    return {\n      value: obj.value.token.str,\n    };\n  } else if (hasTok && obj.value.token.typeCode !== TypeCodes.Template) {\n    return {\n      value: obj.value.token.value,\n    };\n  } else if (hasTok && obj.value.token.typeCode === TypeCodes.Template) {\n    return {\n      value: obj.value.token.items,\n    };\n  } else if (obj && obj.type === 'RawDelimiter') {\n    return {\n      value: obj.inner,\n    };\n  }\n  return {};\n}\n\nexport function isIdentifier(obj) {\n  return check(obj, TypeCodes.Identifier);\n}\n\nexport function fromIdentifier(obj, x) {\n  return obj.value.fromIdentifier(x);\n}\n\nexport function isKeyword(obj) {\n  return check(obj, TypeCodes.Keyword);\n}\n\nexport function fromKeyword(obj, x) {\n  return obj.value.fromKeyword(x);\n}\n\nexport function isPunctuator(obj) {\n  return check(obj, TypeCodes.Punctuator);\n}\n\nexport function fromPunctuator(obj, x) {\n  return obj.value.fromPunctuator(x);\n}\n\nexport function isNumericLiteral(obj) {\n  return check(obj, TypeCodes.NumericLiteral);\n}\n\nexport function fromNumericLiteral(obj, x) {\n  return obj.value.fromNumber(x);\n}\n\nexport function isStringLiteral(obj) {\n  return check(obj, TypeCodes.StringLiteral);\n}\n\nexport function fromStringLiteral(obj, x) {\n  return obj.value.fromString(x);\n}\n\nexport function isTemplateElement(obj) {\n  return check(obj, TypeCodes.TemplateElement);\n}\n\nexport function isTemplate(obj) {\n  return check(obj, TypeCodes.Template);\n}\n\nexport function isRegExp(obj) {\n  return check(obj, TypeCodes.RegExp);\n}\n\nexport function isParens(obj) {\n  return obj && obj.type === 'RawDelimiter' && obj.kind === 'parens';\n}\n\nexport function fromParens(obj, x) {\n  return obj.value.from('parens', x);\n}\n\nexport function isBrackets(obj) {\n  return obj && obj.type === 'RawDelimiter' && obj.kind === 'brackets';\n}\n\nexport function fromBrackets(obj, x) {\n  return obj.value.from('brackets', x);\n}\n\nexport function isBraces(obj) {\n  return obj && obj.type === 'RawDelimiter' && obj.kind === 'braces';\n}\n\nexport function fromBraces(obj, x) {\n  return obj.value.from('braces', x);\n}\n\nexport function isSyntaxTemplate(obj) {\n  return obj && obj.type === 'RawDelimiter' && obj.kind === 'syntaxTemplate';\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/mod.js":"    #lang 'base';\n    export function id(x) {\n      return x;\n    }","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/printAst.js":"var parse = require(\"./build/src/sweet.js\").parse;\nvar readFile = require(\"fs\").readFileSync;\nvar moduleResolver = require('./build/src/node-module-resolver').default;\nvar moduleLoader = require('./build/src/node-module-loader').default;\nvar transform = require('babel-core').transform;\n\nconsole.log(JSON.stringify(parse(readFile(\"test.js\", \"utf8\"), {\n  cwd: __dirname,\n\ttransform: transform,\n\tfilename: './test.js',\n  moduleResolver: moduleResolver,\n  moduleLoader: moduleLoader\n}), null, 2));\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/prism.js":"/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */(function(){var e=/\\blang(?:uage)?-(?!\\*)(\\w+)\\b/i,t=self.Prism={languages:{insertBefore:function(e,n,r,i){i=i||t.languages;var s=i[e],o={};for(var u in s)if(s.hasOwnProperty(u)){if(u==n)for(var a in r)r.hasOwnProperty(a)&&(o[a]=r[a]);o[u]=s[u]}return i[e]=o},DFS:function(e,n){for(var r in e){n.call(e,r,e[r]);Object.prototype.toString.call(e)===\"[object Object]\"&&t.languages.DFS(e[r],n)}}},highlightAll:function(e,n){var r=document.querySelectorAll('code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code');for(var i=0,s;s=r[i++];)t.highlightElement(s,e===!0,n)},highlightElement:function(r,i,s){var o,u,a=r;while(a&&!e.test(a.className))a=a.parentNode;if(a){o=(a.className.match(e)||[,\"\"])[1];u=t.languages[o]}if(!u)return;r.className=r.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+o;a=r.parentNode;/pre/i.test(a.nodeName)&&(a.className=a.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+o);var f=r.textContent.trim();if(!f)return;f=f.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\\u00a0/g,\" \");var l={element:r,language:o,grammar:u,code:f};t.hooks.run(\"before-highlight\",l);if(i&&self.Worker){var c=new Worker(t.filename);c.onmessage=function(e){l.highlightedCode=n.stringify(JSON.parse(e.data));l.element.innerHTML=l.highlightedCode;s&&s.call(l.element);t.hooks.run(\"after-highlight\",l)};c.postMessage(JSON.stringify({language:l.language,code:l.code}))}else{l.highlightedCode=t.highlight(l.code,l.grammar);l.element.innerHTML=l.highlightedCode;s&&s.call(r);t.hooks.run(\"after-highlight\",l)}},highlight:function(e,r){return n.stringify(t.tokenize(e,r))},tokenize:function(e,n){var r=t.Token,i=[e],s=n.rest;if(s){for(var o in s)n[o]=s[o];delete n.rest}e:for(var o in n){if(!n.hasOwnProperty(o)||!n[o])continue;var u=n[o],a=u.inside,f=!!u.lookbehind||0;u=u.pattern||u;for(var l=0;l<i.length;l++){var c=i[l];if(i.length>e.length)break e;if(c instanceof r)continue;u.lastIndex=0;var h=u.exec(c);if(h){f&&(f=h[1].length);var p=h.index-1+f,h=h[0].slice(f),d=h.length,v=p+d,m=c.slice(0,p+1),g=c.slice(v+1),y=[l,1];m&&y.push(m);var b=new r(o,a?t.tokenize(h,a):h);y.push(b);g&&y.push(g);Array.prototype.splice.apply(i,y)}}}return i},hooks:{all:{},add:function(e,n){var r=t.hooks.all;r[e]=r[e]||[];r[e].push(n)},run:function(e,n){var r=t.hooks.all[e];if(!r||!r.length)return;for(var i=0,s;s=r[i++];)s(n)}}},n=t.Token=function(e,t){this.type=e;this.content=t};n.stringify=function(e){if(typeof e==\"string\")return e;if(Object.prototype.toString.call(e)==\"[object Array]\"){for(var r=0;r<e.length;r++)e[r]=n.stringify(e[r]);return e.join(\"\")}var i={type:e.type,content:n.stringify(e.content),tag:\"span\",classes:[\"token\",e.type],attributes:{}};i.type==\"comment\"&&(i.attributes.spellcheck=\"true\");t.hooks.run(\"wrap\",i);var s=\"\";for(var o in i.attributes)s+=o+'=\"'+(i.attributes[o]||\"\")+'\"';return\"<\"+i.tag+' class=\"'+i.classes.join(\" \")+'\" '+s+\">\"+i.content+\"</\"+i.tag+\">\"};if(!self.document){self.addEventListener(\"message\",function(e){var n=JSON.parse(e.data),r=n.language,i=n.code;self.postMessage(JSON.stringify(t.tokenize(i,t.languages[r])));self.close()},!1);return}var r=document.getElementsByTagName(\"script\");r=r[r.length-1];if(r){t.filename=r.src;document.addEventListener&&!r.hasAttribute(\"data-manual\")&&document.addEventListener(\"DOMContentLoaded\",t.highlightAll)}})();\nPrism.languages.markup={comment:/&lt;!--[\\w\\W]*?--(&gt;|&gt;)/g,prolog:/&lt;\\?.+?\\?&gt;/,doctype:/&lt;!DOCTYPE.+?&gt;/,cdata:/&lt;!\\[CDATA\\[[\\w\\W]+?]]&gt;/i,tag:{pattern:/&lt;\\/?[\\w:-]+\\s*[\\w\\W]*?&gt;/gi,inside:{tag:{pattern:/^&lt;\\/?[\\w:-]+/i,inside:{punctuation:/^&lt;\\/?/,namespace:/^[\\w-]+?:/}},\"attr-value\":{pattern:/=(('|\")[\\w\\W]*?(\\2)|[^\\s>]+)/gi,inside:{punctuation:/=/g}},punctuation:/\\/?&gt;/g,\"attr-name\":{pattern:/[\\w:-]+/g,inside:{namespace:/^[\\w-]+?:/}}}},entity:/&amp;#?[\\da-z]{1,8};/gi};Prism.hooks.add(\"wrap\",function(e){e.type===\"entity\"&&(e.attributes.title=e.content.replace(/&amp;/,\"&\"))});\nPrism.languages.javascript={comment:{pattern:/(^|[^\\\\])(\\/\\*[\\w\\W]*?\\*\\/|\\/\\/.*?(\\r?\\n|$))/g,lookbehind:!0},string:/(\"|')(\\\\?.)*?\\1/g,regex:{pattern:/(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/g,lookbehind:!0},keyword:/\\b(var|let|if|else|while|do|for|return|in|instanceof|function|new|with|typeof|try|catch|finally|null|break|continue)\\b/g,\"boolean\":/\\b(true|false)\\b/g,number:/\\b-?(0x)?\\d*\\.?\\d+\\b/g,operator:/[-+]{1,2}|!|=?&lt;|=?&gt;|={1,2}|(&amp;){1,2}|\\|?\\||\\?|\\*|\\//g,ignore:/&(lt|gt|amp);/gi,punctuation:/[{}[\\];(),.:]/g};Prism.languages.markup&&Prism.languages.insertBefore(\"markup\",\"tag\",{script:{pattern:/(&lt;|<)script[\\w\\W]*?(>|&gt;)[\\w\\W]*?(&lt;|<)\\/script(>|&gt;)/ig,inside:{tag:{pattern:/(&lt;|<)script[\\w\\W]*?(>|&gt;)|(&lt;|<)\\/script(>|&gt;)/ig,inside:Prism.languages.markup.tag.inside},rest:Prism.languages.javascript}}});\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/profile.js":"/**\n * Copyright 2015 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar fs = require('fs');\nvar path = require('path');\nvar parse = require('./build/src/sweet').parse;\nvar NodeLoader = require('./build/src/node-loader').default;\n\nfunction benchmarkParsing(fileName) {\n  var loader = new NodeLoader(path.dirname(fs.realpathSync(__filename)));\n  var start = Date.now(), N = 100;\n  for (var i = 0; i < N; i++) {\n    parse(fileName, loader);\n  }\n  var time = Date.now() - start;\n  console.log((time / N).toFixed(2) + \"ms\");\n}\n\nbenchmarkParsing('./node_modules/angular/angular.js');\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/ast-dispatcher.js":"export default class ASTDispatcher {\n  constructor(prefix, errorIfMissing) {\n    this.errorIfMissing = errorIfMissing;\n    this.prefix = prefix;\n  }\n\n  dispatch(term) {\n    let field = this.prefix + term.type;\n    if (typeof this[field] === 'function') {\n      return this[field](term);\n    } else if (!this.errorIfMissing) {\n      return term;\n    }\n    throw new Error(`Missing implementation for: ${field}`);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/binding-map.js":"// @flow\nimport { List } from 'immutable';\nimport { assert } from './errors';\nimport { Maybe } from 'ramda-fantasy';\nimport type { SymbolClass } from './symbol';\nimport Syntax from './syntax';\n\ntype Scopeset = any;\n\ntype ScopesetBinding = {\n  scopes: Scopeset,\n  binding: SymbolClass,\n  alias: Maybe<Syntax>,\n};\n\nexport default class BindingMap {\n  _map: Map<string, List<ScopesetBinding>>;\n\n  constructor() {\n    this._map = new Map();\n  }\n\n  // given a syntax object and a binding,\n  // add the binding to the map associating the binding with the syntax object's\n  // scope set\n  add(\n    stx: Syntax,\n    {\n      binding,\n      phase,\n      skipDup = false,\n    }: { binding: SymbolClass, phase: number | {}, skipDup: boolean },\n  ) {\n    let stxName = stx.val();\n    let allScopeset = stx.scopesets.all;\n    let scopeset = stx.scopesets.phase.has(phase)\n      ? stx.scopesets.phase.get(phase)\n      : List();\n    scopeset = allScopeset.concat(scopeset);\n    assert(phase != null, 'must provide a phase for binding add');\n\n    let scopesetBindingList = this._map.get(stxName);\n    if (scopesetBindingList) {\n      if (skipDup && scopesetBindingList.some(s => s.scopes.equals(scopeset))) {\n        return;\n      }\n      this._map.set(\n        stxName,\n        scopesetBindingList.push({\n          scopes: scopeset,\n          binding: binding,\n          alias: Maybe.Nothing(),\n        }),\n      );\n    } else {\n      this._map.set(\n        stxName,\n        List.of({\n          scopes: scopeset,\n          binding: binding,\n          alias: Maybe.Nothing(),\n        }),\n      );\n    }\n  }\n\n  addForward(\n    stx: Syntax,\n    forwardStx: Syntax,\n    binding: SymbolClass,\n    phase: number | {},\n  ) {\n    let stxName = stx.token.value;\n    let allScopeset = stx.scopesets.all;\n    let scopeset = stx.scopesets.phase.has(phase)\n      ? stx.scopesets.phase.get(phase)\n      : List();\n    scopeset = allScopeset.concat(scopeset);\n    assert(phase != null, 'must provide a phase for binding add');\n\n    let scopesetBindingList = this._map.get(stxName);\n    if (scopesetBindingList) {\n      this._map.set(\n        stxName,\n        scopesetBindingList.push({\n          scopes: scopeset,\n          binding: binding,\n          alias: Maybe.of(forwardStx),\n        }),\n      );\n    } else {\n      this._map.set(\n        stxName,\n        List.of({\n          scopes: scopeset,\n          binding: binding,\n          alias: Maybe.of(forwardStx),\n        }),\n      );\n    }\n  }\n\n  get(stx: Syntax) {\n    return this._map.get(stx.token.value);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/browser-sweet.js":"import { compile as sweetCompile } from './sweet';\nimport StoreLoader from './store-loader';\nimport Store from './store';\n\nclass BrowserStoreLoader extends StoreLoader {\n  store: Map<string, string>;\n\n  constructor(baseDir: string, store: Map<string, string>) {\n    super(baseDir, store, true);\n  }\n\n  fetch({ name, address }: { name: string, address: any }) {\n    if (this.store.has(address.path)) {\n      return this.store.get(address.path);\n    }\n    throw new Error(\n      `The module ${name} is not in the debug store: addr.path is ${address.path}`,\n    );\n  }\n\n  freshStore() {\n    return new Store({});\n  }\n\n  eval(source: string, store: Store) {\n    return (0, eval)(source);\n  }\n}\n\nexport function compile(source, helpers) {\n  let s = new Map();\n  s.set('main.js', source);\n  s.set('sweet.js/helpers.js', helpers);\n  s.set('sweet.js/helpers', helpers);\n  let loader = new BrowserStoreLoader('.', s);\n  return sweetCompile('main.js', loader);\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/codegen.js":"import shiftCodegen, { FormattedCodeGen } from 'shift-codegen';\n\nexport default function codegen(modTerm) {\n  return {\n    code: shiftCodegen(modTerm, new FormattedCodeGen()),\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/compiler.js":"import TermExpander from './term-expander.js';\nimport TokenExpander from './token-expander';\nimport * as _ from 'ramda';\n\nexport default class Compiler {\n  constructor(phase, env, store, context) {\n    this.phase = phase;\n    this.env = env;\n    this.store = store;\n    this.context = context;\n  }\n\n  compile(stxl) {\n    let tokenExpander = new TokenExpander(\n      _.merge(this.context, {\n        phase: this.phase,\n        env: this.env,\n        store: this.store,\n      }),\n    );\n    let termExpander = new TermExpander(\n      _.merge(this.context, {\n        phase: this.phase,\n        env: this.env,\n        store: this.store,\n      }),\n    );\n\n    return tokenExpander.expand(stxl).map(t => termExpander.expand(t));\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/enforester.js":"// @flow\nimport {\n  isIdentifierExpression,\n  isStaticMemberExpression,\n  isComputedMemberExpression,\n} from './terms';\nimport Term, * as T from 'sweet-spec';\nimport { Maybe } from 'ramda-fantasy';\nimport ScopeReducer from './scope-reducer';\nconst Just = Maybe.Just;\nconst Nothing = Maybe.Nothing;\n\nimport {\n  FunctionDeclTransform,\n  VariableDeclTransform,\n  NewTransform,\n  LetDeclTransform,\n  ConstDeclTransform,\n  SyntaxDeclTransform,\n  SyntaxrecDeclTransform,\n  OperatorDeclTransform,\n  ReturnStatementTransform,\n  WhileTransform,\n  IfTransform,\n  ForTransform,\n  SwitchTransform,\n  BreakTransform,\n  ContinueTransform,\n  DoTransform,\n  DebuggerTransform,\n  YieldTransform,\n  WithTransform,\n  ImportTransform,\n  ExportTransform,\n  SuperTransform,\n  ThisTransform,\n  ClassTransform,\n  DefaultTransform,\n  TryTransform,\n  ThrowTransform,\n  CompiletimeTransform,\n  VarBindingTransform,\n  ModuleNamespaceTransform,\n} from './transforms';\nimport { List } from 'immutable';\nimport { expect, assert } from './errors';\nimport {\n  isOperator,\n  isUnaryOperator,\n  getOperatorAssoc,\n  getOperatorPrec,\n  operatorLt,\n} from './operators';\nimport Syntax, { ALL_PHASES } from './syntax';\nimport type { SymbolClass } from './symbol';\n\nimport { freshScope } from './scope';\nimport { sanitizeReplacementValues } from './load-syntax';\n\nimport MacroContext from './macro-context';\n\nconst EXPR_LOOP_OPERATOR = {};\nconst EXPR_LOOP_NO_CHANGE = {};\nconst EXPR_LOOP_EXPANSION = {};\n\nfunction getLineNumber(x: Syntax | T.Term) {\n  let stx;\n  if (x instanceof Syntax) {\n    stx = x;\n  } else if (x instanceof T.RawSyntax) {\n    stx = x.value;\n  } else if (x instanceof T.RawDelimiter) {\n    return getLineNumber(x.inner.first());\n  } else {\n    throw new Error(`Not implemented yet ${x}`);\n  }\n  return stx.lineNumber();\n}\n\nexport class Enforester {\n  done: boolean;\n  term: ?Term;\n  rest: List<Term>;\n  prev: List<Term>;\n  context: {\n    env: Map<string, any>,\n    store: Map<string, any>,\n    phase: number | {},\n    useScope: SymbolClass,\n    bindings: any,\n  };\n  opCtx: {\n    prec: number,\n    combine: (x: any) => any,\n    stack: List<*>,\n  };\n\n  constructor(stxl: List<Term>, prev: List<Term>, context: any) {\n    this.done = false;\n    assert(List.isList(stxl), 'expecting a list of terms to enforest');\n    assert(List.isList(prev), 'expecting a list of terms to enforest');\n    assert(context, 'expecting a context to enforest');\n    this.term = null;\n\n    this.rest = stxl;\n    this.prev = prev;\n\n    this.context = context;\n  }\n\n  peek(n: number = 0): ?Term {\n    return this.rest.get(n);\n  }\n\n  advance() {\n    let ret: ?Term = this.rest.first();\n    this.rest = this.rest.rest();\n    return ret;\n  }\n\n  /*\n   enforest works over:\n   prev - a list of the previously enforest Terms\n   term - the current term being enforested (initially null)\n   rest - remaining Terms to enforest\n   */\n  enforest(type?: 'expression' | 'Module' = 'Module') {\n    // initialize the term\n    this.term = null;\n\n    if (this.rest.size === 0) {\n      this.done = true;\n      return this.term;\n    }\n\n    if (this.isEOF(this.peek())) {\n      this.term = new T.EOF({});\n      this.advance();\n      return this.term;\n    }\n\n    let result;\n    if (type === 'expression') {\n      result = this.enforestExpressionLoop();\n    } else {\n      result = this.enforestModule();\n    }\n\n    if (this.rest.size === 0) {\n      this.done = true;\n    }\n    return result;\n  }\n\n  enforestModule() {\n    return this.enforestBody();\n  }\n\n  enforestBody() {\n    return this.enforestModuleItem();\n  }\n\n  enforestModuleItem() {\n    let lookahead = this.peek();\n\n    if (this.isImportTransform(lookahead)) {\n      this.advance();\n      return this.enforestImportDeclaration();\n    } else if (this.isExportTransform(lookahead)) {\n      this.advance();\n      return this.enforestExportDeclaration();\n    }\n    return this.enforestStatement();\n  }\n\n  enforestExportDeclaration() {\n    let lookahead = this.peek();\n    if (this.isCompiletimeTransform(lookahead)) {\n      this.expandMacro();\n      lookahead = this.peek();\n    }\n\n    if (this.isPunctuator(lookahead, '*')) {\n      this.advance();\n      let moduleSpecifier = this.enforestFromClause();\n      return new T.ExportAllFrom({ moduleSpecifier });\n    } else if (this.isBraces(lookahead)) {\n      let namedExports = this.enforestExportClause();\n      let moduleSpecifier = null;\n      if (this.isIdentifier(this.peek(), 'from')) {\n        moduleSpecifier = this.enforestFromClause();\n      }\n      return new T.ExportFrom({ namedExports, moduleSpecifier });\n    } else if (this.isClassTransform(lookahead)) {\n      return new T.Export({\n        declaration: this.enforestClass({ isExpr: false }),\n      });\n    } else if (this.isFnDeclTransform(lookahead)) {\n      return new T.Export({\n        declaration: this.enforestFunction({ isExpr: false }),\n      });\n    } else if (this.isDefaultTransform(lookahead)) {\n      this.advance();\n      if (this.isCompiletimeTransform(lookahead)) {\n        this.expandMacro();\n        lookahead = this.peek();\n      }\n\n      if (this.isFnDeclTransform(this.peek())) {\n        return new T.ExportDefault({\n          body: this.enforestFunction({ isExpr: false, inDefault: true }),\n        });\n      } else if (this.isClassTransform(this.peek())) {\n        return new T.ExportDefault({\n          body: this.enforestClass({ isExpr: false, inDefault: true }),\n        });\n      } else {\n        let body = this.enforestExpressionLoop();\n        this.consumeSemicolon();\n        return new T.ExportDefault({ body });\n      }\n    } else if (\n      this.isVarDeclTransform(lookahead) ||\n      this.isLetDeclTransform(lookahead) ||\n      this.isConstDeclTransform(lookahead) ||\n      this.isSyntaxrecDeclTransform(lookahead) ||\n      this.isSyntaxDeclTransform(lookahead) ||\n      this.isOperatorDeclTransform(lookahead)\n    ) {\n      return new T.Export({\n        declaration: this.enforestVariableDeclaration(),\n      });\n    }\n    throw this.createError(lookahead, 'unexpected syntax');\n  }\n\n  enforestExportClause() {\n    let enf = new Enforester(this.matchCurlies(), List(), this.context);\n    let result = [];\n    while (enf.rest.size !== 0) {\n      result.push(enf.enforestExportSpecifier());\n      enf.consumeComma();\n    }\n    return List(result);\n  }\n\n  enforestExportSpecifier() {\n    let name = this.enforestIdentifier();\n    if (this.isIdentifier(this.peek(), 'as')) {\n      this.advance();\n      let exportedName = this.enforestIdentifier();\n      return new T.ExportSpecifier({ name, exportedName });\n    }\n    return new T.ExportSpecifier({\n      name: null,\n      exportedName: name,\n    });\n  }\n\n  enforestImportDeclaration() {\n    let lookahead = this.peek();\n    let defaultBinding = null;\n    let namedImports = List();\n    let forSyntax = false;\n\n    if (this.isStringLiteral(lookahead)) {\n      let moduleSpecifier = this.advance();\n      this.consumeSemicolon();\n      return new T.Import({\n        defaultBinding,\n        namedImports,\n        moduleSpecifier,\n        forSyntax,\n      });\n    }\n\n    if (this.isIdentifier(lookahead) || this.isKeyword(lookahead)) {\n      defaultBinding = this.enforestBindingIdentifier();\n      if (!this.isPunctuator(this.peek(), ',')) {\n        let moduleSpecifier = this.enforestFromClause();\n        if (\n          this.isKeyword(this.peek(), 'for') &&\n          this.isIdentifier(this.peek(1), 'syntax')\n        ) {\n          this.advance();\n          this.advance();\n          forSyntax = true;\n        }\n\n        return new T.Import({\n          defaultBinding,\n          moduleSpecifier,\n          namedImports: List(),\n          forSyntax,\n        });\n      }\n    }\n    this.consumeComma();\n    lookahead = this.peek();\n    if (this.isBraces(lookahead)) {\n      let imports = this.enforestNamedImports();\n      let fromClause = this.enforestFromClause();\n      if (\n        this.isKeyword(this.peek(), 'for') &&\n        this.isIdentifier(this.peek(1), 'syntax')\n      ) {\n        this.advance();\n        this.advance();\n        forSyntax = true;\n      }\n\n      return new T.Import({\n        defaultBinding,\n        forSyntax,\n        namedImports: imports,\n        moduleSpecifier: fromClause,\n      });\n    } else if (this.isPunctuator(lookahead, '*')) {\n      let namespaceBinding = this.enforestNamespaceBinding();\n      let moduleSpecifier = this.enforestFromClause();\n      if (\n        this.isKeyword(this.peek(), 'for') &&\n        this.isIdentifier(this.peek(1), 'syntax')\n      ) {\n        this.advance();\n        this.advance();\n        forSyntax = true;\n      }\n      return new T.ImportNamespace({\n        defaultBinding,\n        forSyntax,\n        namespaceBinding,\n        moduleSpecifier,\n      });\n    }\n    throw this.createError(lookahead, 'unexpected syntax');\n  }\n\n  enforestNamespaceBinding() {\n    this.matchPunctuator('*');\n    this.matchIdentifier('as');\n    return this.enforestBindingIdentifier();\n  }\n\n  enforestNamedImports() {\n    let enf = new Enforester(this.matchCurlies(), List(), this.context);\n    let result = [];\n    while (enf.rest.size !== 0) {\n      result.push(enf.enforestImportSpecifiers());\n      enf.consumeComma();\n    }\n    return List(result);\n  }\n\n  enforestImportSpecifiers() {\n    let lookahead = this.peek();\n    let name;\n    if (this.isIdentifier(lookahead) || this.isKeyword(lookahead)) {\n      name = this.matchRawSyntax();\n      if (!this.isIdentifier(this.peek(), 'as')) {\n        return new T.ImportSpecifier({\n          name: null,\n          binding: new T.BindingIdentifier({\n            name: name,\n          }),\n        });\n      } else {\n        this.matchIdentifier('as');\n      }\n    } else {\n      throw this.createError(lookahead, 'unexpected token in import specifier');\n    }\n    return new T.ImportSpecifier({\n      name,\n      binding: this.enforestBindingIdentifier(),\n    });\n  }\n\n  enforestFromClause() {\n    this.matchIdentifier('from');\n    let lookahead = this.matchStringLiteral();\n    this.consumeSemicolon();\n    return lookahead;\n  }\n\n  enforestStatementListItem() {\n    let lookahead = this.peek();\n\n    if (this.isFnDeclTransform(lookahead)) {\n      return this.enforestFunction({ isExpr: false });\n    } else if (this.isClassTransform(lookahead)) {\n      return this.enforestClass({ isExpr: false });\n    } else {\n      return this.enforestStatement();\n    }\n  }\n\n  enforestStatement() {\n    let lookahead = this.peek();\n\n    if (this.term === null && this.isCompiletimeTransform(lookahead)) {\n      this.expandMacro();\n      lookahead = this.peek();\n    }\n\n    if (\n      this.term === null &&\n      this.isTerm(lookahead) &&\n      lookahead instanceof T.Statement\n    ) {\n      // TODO: check that this is actually an statement\n      return this.advance();\n    }\n\n    if (this.term === null && this.isBraces(lookahead)) {\n      return this.enforestBlockStatement();\n    }\n\n    if (this.term === null && this.isWhileTransform(lookahead)) {\n      return this.enforestWhileStatement();\n    }\n\n    if (this.term === null && this.isIfTransform(lookahead)) {\n      return this.enforestIfStatement();\n    }\n    if (this.term === null && this.isForTransform(lookahead)) {\n      return this.enforestForStatement();\n    }\n    if (this.term === null && this.isSwitchTransform(lookahead)) {\n      return this.enforestSwitchStatement();\n    }\n    if (this.term === null && this.isBreakTransform(lookahead)) {\n      return this.enforestBreakStatement();\n    }\n    if (this.term === null && this.isContinueTransform(lookahead)) {\n      return this.enforestContinueStatement();\n    }\n    if (this.term === null && this.isDoTransform(lookahead)) {\n      return this.enforestDoStatement();\n    }\n    if (this.term === null && this.isDebuggerTransform(lookahead)) {\n      return this.enforestDebuggerStatement();\n    }\n    if (this.term === null && this.isWithTransform(lookahead)) {\n      return this.enforestWithStatement();\n    }\n    if (this.term === null && this.isTryTransform(lookahead)) {\n      return this.enforestTryStatement();\n    }\n    if (this.term === null && this.isThrowTransform(lookahead)) {\n      return this.enforestThrowStatement();\n    }\n\n    // TODO: put somewhere else\n    if (this.term === null && this.isKeyword(lookahead, 'class')) {\n      return this.enforestClass({ isExpr: false });\n    }\n\n    if (this.term === null && this.isFnDeclTransform(lookahead)) {\n      return this.enforestFunction({ isExpr: false });\n    }\n\n    if (\n      this.term === null &&\n      this.isIdentifier(lookahead) &&\n      this.isPunctuator(this.peek(1), ':')\n    ) {\n      return this.enforestLabeledStatement();\n    }\n\n    if (\n      this.term === null &&\n      (this.isVarDeclTransform(lookahead) ||\n        this.isLetDeclTransform(lookahead) ||\n        this.isConstDeclTransform(lookahead) ||\n        this.isSyntaxrecDeclTransform(lookahead) ||\n        this.isSyntaxDeclTransform(lookahead) ||\n        this.isOperatorDeclTransform(lookahead))\n    ) {\n      let stmt = new T.VariableDeclarationStatement({\n        declaration: this.enforestVariableDeclaration(),\n      });\n      this.consumeSemicolon();\n      return stmt;\n    }\n\n    if (this.term === null && this.isReturnStmtTransform(lookahead)) {\n      return this.enforestReturnStatement();\n    }\n\n    if (this.term === null && this.isPunctuator(lookahead, ';')) {\n      this.advance();\n      return new T.EmptyStatement({});\n    }\n\n    return this.enforestExpressionStatement();\n  }\n\n  enforestLabeledStatement() {\n    let label = this.matchIdentifier();\n    this.matchPunctuator(':');\n    let stmt = this.enforestStatement();\n\n    return new T.LabeledStatement({\n      label: label,\n      body: stmt,\n    });\n  }\n\n  enforestBreakStatement() {\n    this.matchKeyword('break');\n    let lookahead = this.peek();\n    let label = null;\n    if (this.rest.size === 0 || this.isPunctuator(lookahead, ';')) {\n      this.consumeSemicolon();\n      return new T.BreakStatement({ label });\n    }\n    if (\n      this.isIdentifier(lookahead) ||\n      this.isKeyword(lookahead, 'yield') ||\n      this.isKeyword(lookahead, 'let')\n    ) {\n      label = this.enforestIdentifier();\n    }\n    this.consumeSemicolon();\n\n    return new T.BreakStatement({ label });\n  }\n\n  enforestTryStatement() {\n    this.matchKeyword('try');\n    let body = this.enforestBlock();\n    if (this.isKeyword(this.peek(), 'catch')) {\n      let catchClause = this.enforestCatchClause();\n      if (this.isKeyword(this.peek(), 'finally')) {\n        this.advance();\n        let finalizer = this.enforestBlock();\n        return new T.TryFinallyStatement({\n          body,\n          catchClause,\n          finalizer,\n        });\n      }\n      return new T.TryCatchStatement({ body, catchClause });\n    }\n    if (this.isKeyword(this.peek(), 'finally')) {\n      this.advance();\n      let finalizer = this.enforestBlock();\n      return new T.TryFinallyStatement({ body, catchClause: null, finalizer });\n    }\n    throw this.createError(this.peek(), 'try with no catch or finally');\n  }\n\n  enforestCatchClause() {\n    this.matchKeyword('catch');\n    let bindingParens = this.matchParens();\n    let enf = new Enforester(bindingParens, List(), this.context);\n    let binding = enf.enforestBindingTarget();\n    let body = this.enforestBlock();\n    return new T.CatchClause({ binding, body });\n  }\n\n  enforestThrowStatement() {\n    this.matchKeyword('throw');\n    let expression = this.enforestExpression();\n    this.consumeSemicolon();\n    return new T.ThrowStatement({ expression });\n  }\n\n  enforestWithStatement() {\n    this.matchKeyword('with');\n    let objParens = this.matchParens();\n    let enf = new Enforester(objParens, List(), this.context);\n    let object = enf.enforestExpression();\n    let body = this.enforestStatement();\n    return new T.WithStatement({ object, body });\n  }\n\n  enforestDebuggerStatement() {\n    this.matchKeyword('debugger');\n\n    return new T.DebuggerStatement({});\n  }\n\n  enforestDoStatement() {\n    this.matchKeyword('do');\n    let body = this.enforestStatement();\n    this.matchKeyword('while');\n    let testBody = this.matchParens();\n    let enf = new Enforester(testBody, List(), this.context);\n    let test = enf.enforestExpression();\n    this.consumeSemicolon();\n    return new T.DoWhileStatement({ body, test });\n  }\n\n  enforestContinueStatement() {\n    let kwd = this.matchKeyword('continue');\n    let lookahead = this.peek();\n    let label = null;\n    if (this.rest.size === 0 || this.isPunctuator(lookahead, ';')) {\n      this.consumeSemicolon();\n      return new T.ContinueStatement({ label });\n    }\n    if (\n      lookahead instanceof T.RawSyntax &&\n      this.lineNumberEq(kwd, lookahead) &&\n      (this.isIdentifier(lookahead) ||\n        this.isKeyword(lookahead, 'yield') ||\n        this.isKeyword(lookahead, 'let'))\n    ) {\n      label = this.enforestIdentifier();\n    }\n    this.consumeSemicolon();\n\n    return new T.ContinueStatement({ label });\n  }\n\n  enforestSwitchStatement() {\n    this.matchKeyword('switch');\n    let cond = this.matchParens();\n    let enf = new Enforester(cond, List(), this.context);\n    let discriminant = enf.enforestExpression();\n    let body = this.matchCurlies();\n\n    if (body.size === 0) {\n      return new T.SwitchStatement({\n        discriminant: discriminant,\n        cases: List(),\n      });\n    }\n    enf = new Enforester(body, List(), this.context);\n    let cases = enf.enforestSwitchCases();\n    let lookahead = enf.peek();\n    if (enf.isKeyword(lookahead, 'default')) {\n      let defaultCase = enf.enforestSwitchDefault();\n      let postDefaultCases = enf.enforestSwitchCases();\n      return new T.SwitchStatementWithDefault({\n        discriminant,\n        preDefaultCases: cases,\n        defaultCase,\n        postDefaultCases,\n      });\n    }\n    return new T.SwitchStatement({ discriminant, cases });\n  }\n\n  enforestSwitchCases() {\n    let cases = [];\n    while (!(this.rest.size === 0 || this.isKeyword(this.peek(), 'default'))) {\n      cases.push(this.enforestSwitchCase());\n    }\n    return List(cases);\n  }\n\n  enforestSwitchCase() {\n    this.matchKeyword('case');\n    return new T.SwitchCase({\n      test: this.enforestExpression(),\n      consequent: this.enforestSwitchCaseBody(),\n    });\n  }\n\n  enforestSwitchCaseBody() {\n    this.matchPunctuator(':');\n    return this.enforestStatementListInSwitchCaseBody();\n  }\n\n  enforestStatementListInSwitchCaseBody() {\n    let result = [];\n    while (\n      !(this.rest.size === 0 ||\n        this.isKeyword(this.peek(), 'default') ||\n        this.isKeyword(this.peek(), 'case'))\n    ) {\n      result.push(this.enforestStatementListItem());\n    }\n    return List(result);\n  }\n\n  enforestSwitchDefault() {\n    this.matchKeyword('default');\n    return new T.SwitchDefault({\n      consequent: this.enforestSwitchCaseBody(),\n    });\n  }\n\n  enforestForStatement() {\n    this.matchKeyword('for');\n    let cond = this.matchParens();\n    let enf = new Enforester(cond, List(), this.context);\n    let lookahead, test, init, right, left, update, cnst;\n\n    // case where init is null\n    if (enf.isPunctuator(enf.peek(), ';')) {\n      enf.advance();\n      if (!enf.isPunctuator(enf.peek(), ';')) {\n        test = enf.enforestExpression();\n      }\n      enf.matchPunctuator(';');\n      if (enf.rest.size !== 0) {\n        right = enf.enforestExpression();\n      }\n      return new T.ForStatement({\n        init: null,\n        test: test,\n        update: right,\n        body: this.enforestStatement(),\n      });\n      // case where init is not null\n    } else {\n      // testing\n      lookahead = enf.peek();\n      if (\n        enf.isVarDeclTransform(lookahead) ||\n        enf.isLetDeclTransform(lookahead) ||\n        enf.isConstDeclTransform(lookahead)\n      ) {\n        init = enf.enforestVariableDeclaration();\n        lookahead = enf.peek();\n        if (\n          this.isKeyword(lookahead, 'in') || this.isIdentifier(lookahead, 'of')\n        ) {\n          if (this.isKeyword(lookahead, 'in')) {\n            enf.advance();\n            right = enf.enforestExpression();\n            cnst = T.ForInStatement;\n          } else {\n            assert(\n              this.isIdentifier(lookahead, 'of'),\n              'expecting `of` keyword',\n            );\n            enf.advance();\n            right = enf.enforestExpression();\n            cnst = T.ForOfStatement;\n          }\n          return new cnst({\n            left: init,\n            right,\n            body: this.enforestStatement(),\n          });\n        }\n        enf.matchPunctuator(';');\n        if (enf.isPunctuator(enf.peek(), ';')) {\n          enf.advance();\n          test = null;\n        } else {\n          test = enf.enforestExpression();\n          enf.matchPunctuator(';');\n        }\n        update = enf.enforestExpression();\n      } else {\n        if (\n          this.isKeyword(enf.peek(1), 'in') ||\n          this.isIdentifier(enf.peek(1), 'of')\n        ) {\n          left = enf.enforestBindingIdentifier();\n          let kind = enf.advance();\n          if (this.isKeyword(kind, 'in')) {\n            cnst = T.ForInStatement;\n          } else {\n            cnst = T.ForOfStatement;\n          }\n          right = enf.enforestExpression();\n          return new cnst({\n            left: left,\n            right,\n            body: this.enforestStatement(),\n          });\n        }\n        init = enf.enforestExpression();\n        enf.matchPunctuator(';');\n        if (enf.isPunctuator(enf.peek(), ';')) {\n          enf.advance();\n          test = null;\n        } else {\n          test = enf.enforestExpression();\n          enf.matchPunctuator(';');\n        }\n        update = enf.enforestExpression();\n      }\n      return new T.ForStatement({\n        init,\n        test,\n        update,\n        body: this.enforestStatement(),\n      });\n    }\n  }\n\n  enforestIfStatement() {\n    this.matchKeyword('if');\n    let cond = this.matchParens();\n    let enf = new Enforester(cond, List(), this.context);\n    let lookahead = enf.peek();\n    let test = enf.enforestExpression();\n    if (test === null) {\n      throw enf.createError(lookahead, 'expecting an expression');\n    }\n    let consequent = this.enforestStatement();\n    let alternate = null;\n    if (this.isKeyword(this.peek(), 'else')) {\n      this.advance();\n      alternate = this.enforestStatement();\n    }\n    return new T.IfStatement({ test, consequent, alternate });\n  }\n\n  enforestWhileStatement() {\n    this.matchKeyword('while');\n    let cond = this.matchParens();\n    let enf = new Enforester(cond, List(), this.context);\n    let lookahead = enf.peek();\n    let test = enf.enforestExpression();\n    if (test === null) {\n      throw enf.createError(lookahead, 'expecting an expression');\n    }\n    let body = this.enforestStatement();\n\n    return new T.WhileStatement({ test, body });\n  }\n\n  enforestBlockStatement() {\n    return new T.BlockStatement({\n      block: this.enforestBlock(),\n    });\n  }\n\n  enforestBlock() {\n    return new T.Block({\n      statements: this.matchCurlies(),\n    });\n  }\n\n  enforestClass({\n    isExpr = false,\n    inDefault = false,\n  }: { isExpr?: boolean, inDefault?: boolean }) {\n    let kw = this.matchRawSyntax();\n    let name = null, supr = null;\n\n    if (this.isIdentifier(this.peek())) {\n      name = this.enforestBindingIdentifier();\n    } else if (!isExpr) {\n      if (inDefault) {\n        name = new T.BindingIdentifier({\n          name: Syntax.fromIdentifier('_default', kw),\n        });\n      } else {\n        throw this.createError(this.peek(), 'unexpected syntax');\n      }\n    }\n\n    if (this.isKeyword(this.peek(), 'extends')) {\n      this.advance();\n      supr = this.enforestExpressionLoop();\n    }\n\n    let elements = [];\n    let enf = new Enforester(this.matchCurlies(), List(), this.context);\n    while (enf.rest.size !== 0) {\n      if (enf.isPunctuator(enf.peek(), ';')) {\n        enf.advance();\n        continue;\n      }\n\n      let isStatic = false;\n      let { methodOrKey, kind } = enf.enforestMethodDefinition();\n      if (kind === 'identifier' && methodOrKey.value.val() === 'static') {\n        isStatic = true;\n        ({ methodOrKey, kind } = enf.enforestMethodDefinition());\n      }\n      if (kind === 'method') {\n        elements.push(new T.ClassElement({ isStatic, method: methodOrKey }));\n      } else {\n        throw this.createError(\n          enf.peek(),\n          'Only methods are allowed in classes',\n        );\n      }\n    }\n    return new (isExpr ? T.ClassExpression : T.ClassDeclaration)({\n      name,\n      super: supr,\n      elements: List(elements),\n    });\n  }\n\n  enforestBindingTarget(\n    { allowPunctuator = false }: { allowPunctuator?: boolean } = {},\n  ) {\n    let lookahead = this.peek();\n    if (\n      this.isIdentifier(lookahead) ||\n      this.isKeyword(lookahead) ||\n      (allowPunctuator && this.isPunctuator(lookahead))\n    ) {\n      return this.enforestBindingIdentifier({ allowPunctuator });\n    } else if (this.isBrackets(lookahead)) {\n      return this.enforestArrayBinding();\n    } else if (this.isBraces(lookahead)) {\n      return this.enforestObjectBinding();\n    }\n    assert(false, 'not implemented yet');\n  }\n\n  enforestObjectBinding() {\n    let enf = new Enforester(this.matchCurlies(), List(), this.context);\n    let properties = [];\n\n    //TODO: implement object rest operator when it lands\n    while (enf.rest.size !== 0) {\n      properties.push(enf.enforestBindingProperty());\n\n      if (enf.rest.size > 0 && !enf.isPunctuator(enf.peek(), ',')) {\n        throw enf.createError(enf.peek(), 'unexpected token');\n      }\n\n      enf.consumeComma();\n    }\n\n    return new T.ObjectBinding({\n      properties: List(properties),\n    });\n  }\n\n  enforestBindingProperty() {\n    let lookahead = this.peek();\n    let { name, binding } = this.enforestPropertyName();\n    if (\n      this.isIdentifier(lookahead) ||\n      this.isKeyword(lookahead, 'let') ||\n      this.isKeyword(lookahead, 'yield')\n    ) {\n      if (!this.isPunctuator(this.peek(), ':')) {\n        let defaultValue = null;\n        if (this.isAssign(this.peek())) {\n          this.advance();\n          let expr = this.enforestExpressionLoop();\n          defaultValue = expr;\n        }\n        return new T.BindingPropertyIdentifier({\n          binding,\n          init: defaultValue,\n        });\n      }\n    }\n    this.matchPunctuator(':');\n    binding = this.enforestBindingElement();\n    return new T.BindingPropertyProperty({\n      name,\n      binding,\n    });\n  }\n\n  enforestArrayBinding() {\n    let bracket = this.matchSquares();\n    let enf = new Enforester(bracket, List(), this.context);\n    let elements = [], restElement = null;\n    while (enf.rest.size !== 0) {\n      let el = null;\n      if (!enf.isPunctuator(enf.peek(), ',')) {\n        if (enf.isPunctuator(enf.peek(), '...')) {\n          enf.advance();\n          restElement = enf.enforestBindingTarget();\n          if (enf.rest.size > 0) {\n            throw enf.createError(\n              '',\n              'Rest element must be last element in array',\n            );\n          }\n        } else {\n          el = enf.enforestBindingElement();\n\n          if (el == null) {\n            throw enf.createError(enf.peek(), 'expected expression');\n          }\n          if (enf.rest.size > 0 && !enf.isPunctuator(enf.peek(), ',')) {\n            throw enf.createError(enf.peek(), 'unexpected token');\n          }\n        }\n      }\n      if (restElement == null) {\n        elements.push(el);\n        enf.consumeComma();\n      }\n    }\n    return new T.ArrayBinding({\n      elements: List(elements),\n      restElement,\n    });\n  }\n\n  enforestBindingElement() {\n    let binding = this.enforestBindingTarget();\n\n    if (this.isAssign(this.peek())) {\n      this.advance();\n      let init = this.enforestExpressionLoop();\n      binding = new T.BindingWithDefault({ binding, init });\n    }\n    return binding;\n  }\n\n  enforestBindingIdentifier(\n    { allowPunctuator }: { allowPunctuator?: boolean } = {},\n  ) {\n    let name;\n    if (allowPunctuator && this.isPunctuator(this.peek())) {\n      name = this.enforestPunctuator();\n    } else {\n      name = this.enforestIdentifier();\n    }\n    return new T.BindingIdentifier({ name });\n  }\n\n  enforestPunctuator() {\n    let lookahead = this.peek();\n    if (this.isPunctuator(lookahead)) {\n      return this.matchRawSyntax();\n    }\n    throw this.createError(lookahead, 'expecting a punctuator');\n  }\n\n  enforestIdentifier() {\n    let lookahead = this.peek();\n    if (this.isIdentifier(lookahead) || this.isKeyword(lookahead)) {\n      return this.matchRawSyntax();\n    }\n    throw this.createError(lookahead, 'expecting an identifier');\n  }\n\n  enforestReturnStatement() {\n    let kw = this.matchRawSyntax();\n    let lookahead = this.peek();\n\n    // short circuit for the empty expression case\n    if (\n      this.rest.size === 0 || (lookahead && !this.lineNumberEq(kw, lookahead))\n    ) {\n      return new T.ReturnStatement({\n        expression: null,\n      });\n    }\n\n    let term = null;\n    if (!this.isPunctuator(lookahead, ';')) {\n      term = this.enforestExpression();\n      expect(\n        term != null,\n        'Expecting an expression to follow return keyword',\n        lookahead,\n        this.rest,\n      );\n    }\n\n    this.consumeSemicolon();\n    return new T.ReturnStatement({\n      expression: term,\n    });\n  }\n\n  enforestVariableDeclaration() {\n    let kind;\n    let lookahead = this.advance();\n\n    if (this.isVarDeclTransform(lookahead)) {\n      kind = 'var';\n    } else if (this.isLetDeclTransform(lookahead)) {\n      kind = 'let';\n    } else if (this.isConstDeclTransform(lookahead)) {\n      kind = 'const';\n    } else if (this.isSyntaxDeclTransform(lookahead)) {\n      kind = 'syntax';\n    } else if (this.isSyntaxrecDeclTransform(lookahead)) {\n      kind = 'syntaxrec';\n    } else if (this.isOperatorDeclTransform(lookahead)) {\n      kind = 'operator';\n    }\n\n    let decls = List();\n\n    while (true) {\n      let term = this.enforestVariableDeclarator({\n        isSyntax: kind === 'syntax' ||\n          kind === 'syntaxrec' ||\n          kind === 'operator',\n        isOperator: kind === 'operator',\n      });\n      let lookahead = this.peek();\n      decls = decls.concat(term);\n\n      if (this.isPunctuator(lookahead, ',')) {\n        this.advance();\n      } else {\n        break;\n      }\n    }\n\n    return new T.VariableDeclaration({\n      kind: kind,\n      declarators: decls,\n    });\n  }\n\n  enforestVariableDeclarator({\n    isSyntax,\n    isOperator,\n  }: { isSyntax: boolean, isOperator: boolean }) {\n    let id = this.enforestBindingTarget({ allowPunctuator: isSyntax });\n    const AssocValues = ['left', 'right', 'prefix', 'postfix'];\n\n    let assoc, prec;\n    if (isOperator) {\n      assoc = this.matchIdentifier();\n      if (AssocValues.indexOf(assoc.val()) === -1) {\n        throw this.createError(\n          this.peek(),\n          `Associativity must be one of ${AssocValues.join(',')}`,\n        );\n      }\n      prec = this.matchLiteral();\n    }\n\n    let init;\n    if (this.isPunctuator(this.peek(), '=')) {\n      this.advance();\n      let enf = new Enforester(this.rest, List(), this.context);\n      init = enf.enforest('expression');\n      this.rest = enf.rest;\n    } else {\n      init = null;\n    }\n\n    if (isOperator) {\n      return new T.OperatorDeclarator({\n        binding: id,\n        init,\n        prec,\n        assoc,\n      });\n    }\n    return new T.VariableDeclarator({\n      binding: id,\n      init: init,\n    });\n  }\n\n  enforestExpressionStatement() {\n    let start = this.rest.get(0);\n    let expr = this.enforestExpression();\n    if (expr === null) {\n      throw this.createError(start, 'not a valid expression');\n    }\n    this.consumeSemicolon();\n\n    return new T.ExpressionStatement({\n      expression: expr,\n    });\n  }\n\n  enforestExpression() {\n    let left = this.enforestExpressionLoop();\n    let lookahead = this.peek();\n    if (this.isPunctuator(lookahead, ',')) {\n      while (this.rest.size !== 0) {\n        if (!this.isPunctuator(this.peek(), ',')) {\n          break;\n        }\n        let operator = this.matchRawSyntax();\n        let right = this.enforestExpressionLoop();\n        left = new T.BinaryExpression({\n          left,\n          operator: operator.val(),\n          right,\n        });\n      }\n    }\n    this.term = null;\n    return left;\n  }\n\n  enforestExpressionLoop() {\n    this.term = null;\n    this.opCtx = {\n      prec: 0,\n      combine: x => x,\n      stack: List(),\n    };\n\n    do {\n      let term = this.enforestAssignmentExpression();\n      // no change means we've done as much enforesting as possible\n      // if nothing changed, maybe we just need to pop the expr stack\n      if (term === EXPR_LOOP_NO_CHANGE && this.opCtx.stack.size > 0) {\n        this.term = this.opCtx.combine(this.term);\n        let { prec, combine } = this.opCtx.stack.last();\n        this.opCtx.prec = prec;\n        this.opCtx.combine = combine;\n        this.opCtx.stack = this.opCtx.stack.pop();\n      } else if (term === EXPR_LOOP_NO_CHANGE) {\n        break;\n      } else if (term === EXPR_LOOP_OPERATOR || term === EXPR_LOOP_EXPANSION) {\n        // operator means an opCtx was pushed on the stack\n        this.term = null;\n      } else {\n        this.term = term;\n      }\n    } while (true); // get a fixpoint\n    return this.term;\n  }\n\n  enforestAssignmentExpression() {\n    let lookahead = this.peek();\n\n    if (this.term === null && this.isModuleNamespaceTransform(lookahead)) {\n      // $FlowFixMe: we need to refactor the enforester to make flow work better\n      let namespace = this.getFromCompiletimeEnvironment(this.advance().value);\n      this.matchPunctuator('.');\n      let name = this.matchIdentifier();\n      // $FlowFixMe: we need to refactor the enforester to make flow work better\n      let exportedName = namespace.mod.exportedNames.find(\n        exName => exName.exportedName.val() === name.val(),\n      );\n      this.rest = this.rest.unshift(\n        new T.RawSyntax({\n          value: Syntax.fromIdentifier(name.val(), exportedName.exportedName),\n        }),\n      );\n      lookahead = this.peek();\n    }\n\n    if (this.term === null && this.isCompiletimeTransform(lookahead)) {\n      this.expandMacro();\n      lookahead = this.peek();\n    }\n\n    if (\n      this.term === null &&\n      this.isTerm(lookahead) &&\n      lookahead instanceof T.Expression\n    ) {\n      // TODO: check that this is actually an expression\n      return this.advance();\n    }\n\n    if (this.term === null && this.isYieldTransform(lookahead)) {\n      return this.enforestYieldExpression();\n    }\n\n    if (this.term === null && this.isClassTransform(lookahead)) {\n      return this.enforestClass({ isExpr: true });\n    }\n\n    if (\n      this.term === null &&\n      lookahead &&\n      (this.isIdentifier(lookahead) || this.isParens(lookahead)) &&\n      this.isPunctuator(this.peek(1), '=>') &&\n      this.lineNumberEq(lookahead, this.peek(1))\n    ) {\n      return this.enforestArrowExpression();\n    }\n\n    if (this.term === null && this.isSyntaxTemplate(lookahead)) {\n      return this.enforestSyntaxTemplate();\n    }\n\n    // ($x:expr)\n    if (this.term === null && this.isParens(lookahead)) {\n      return new T.ParenthesizedExpression({\n        inner: this.matchParens(),\n      });\n    }\n\n    if (\n      this.term === null &&\n      (this.isKeyword(lookahead, 'this') ||\n        this.isIdentifier(lookahead) ||\n        this.isKeyword(lookahead, 'let') ||\n        this.isKeyword(lookahead, 'yield') ||\n        this.isNumericLiteral(lookahead) ||\n        this.isStringLiteral(lookahead) ||\n        this.isTemplate(lookahead) ||\n        this.isBooleanLiteral(lookahead) ||\n        this.isNullLiteral(lookahead) ||\n        this.isRegularExpression(lookahead) ||\n        this.isFnDeclTransform(lookahead) ||\n        this.isBraces(lookahead) ||\n        this.isBrackets(lookahead))\n    ) {\n      return this.enforestPrimaryExpression();\n    }\n\n    // prefix unary\n    if (\n      this.term === null &&\n      (this.isOperator(lookahead) || this.isCustomPrefixOperator(lookahead))\n    ) {\n      return this.enforestUnaryExpression();\n    }\n\n    if (\n      this.term === null &&\n      this.isVarBindingTransform(lookahead) &&\n      lookahead instanceof T.RawSyntax\n    ) {\n      let lookstx = lookahead.value;\n      // $FlowFixMe\n      let id = this.getFromCompiletimeEnvironment(lookstx).id;\n      if (id !== lookstx) {\n        this.advance();\n        this.rest = List.of(id).concat(this.rest);\n        return EXPR_LOOP_EXPANSION;\n      }\n    }\n\n    if (\n      (this.term === null &&\n        (this.isNewTransform(lookahead) || this.isSuperTransform(lookahead))) ||\n      // and then check the cases where the term part of p is something...\n      (this.term &&\n        // $x:expr . $prop:ident\n        ((this.isPunctuator(lookahead, '.') &&\n          (this.isIdentifier(this.peek(1)) || this.isKeyword(this.peek(1)))) ||\n          // $x:expr [ $b:expr ]\n          this.isBrackets(lookahead) ||\n          // $x:expr (...)\n          this.isParens(lookahead)))\n    ) {\n      return this.enforestLeftHandSideExpression({ allowCall: true });\n    }\n\n    // $l:expr $op:binaryOperator $r:expr\n    if (this.term && this.isCustomBinaryOperator(lookahead)) {\n      return this.enforestBinaryExpression();\n    }\n\n    // postfix unary\n    if (\n      this.term &&\n      (this.isUpdateOperator(lookahead) ||\n        this.isCustomPostfixOperator(lookahead))\n    ) {\n      return this.enforestUpdateExpression();\n    }\n\n    // $l:expr $op:binaryOperator $r:expr\n    if (\n      this.term &&\n      (this.isOperator(lookahead) || this.isCustomBinaryOperator(lookahead))\n    ) {\n      return this.enforestBinaryExpression();\n    }\n\n    // $x:id `...`\n    if (this.term && this.isTemplate(lookahead)) {\n      return this.enforestTemplateLiteral();\n    }\n\n    // $x:expr = $init:expr\n    if (this.term && this.isAssign(lookahead)) {\n      let binding = this.transformDestructuring(this.term);\n      let op = this.matchRawSyntax();\n\n      let enf = new Enforester(this.rest, List(), this.context);\n      let init = enf.enforest('expression');\n      this.rest = enf.rest;\n\n      if (op.val() === '=') {\n        return new T.AssignmentExpression({\n          binding,\n          expression: init,\n        });\n      } else {\n        return new T.CompoundAssignmentExpression({\n          binding,\n          operator: op.val(),\n          expression: init,\n        });\n      }\n    }\n\n    if (this.term && this.isPunctuator(lookahead, '?')) {\n      return this.enforestConditionalExpression();\n    }\n\n    return EXPR_LOOP_NO_CHANGE;\n  }\n\n  enforestPrimaryExpression() {\n    let lookahead = this.peek();\n    // $x:ThisExpression\n    if (this.term === null && this.isKeyword(lookahead, 'this')) {\n      return this.enforestThisExpression();\n    }\n    // $x:ident\n    if (\n      this.term === null &&\n      (this.isIdentifier(lookahead) ||\n        this.isKeyword(lookahead, 'let') ||\n        this.isKeyword(lookahead, 'yield'))\n    ) {\n      return this.enforestIdentifierExpression();\n    }\n    if (this.term === null && this.isNumericLiteral(lookahead)) {\n      return this.enforestNumericLiteral();\n    }\n    if (this.term === null && this.isStringLiteral(lookahead)) {\n      return this.enforestStringLiteral();\n    }\n    if (this.term === null && this.isTemplate(lookahead)) {\n      return this.enforestTemplateLiteral();\n    }\n    if (this.term === null && this.isBooleanLiteral(lookahead)) {\n      return this.enforestBooleanLiteral();\n    }\n    if (this.term === null && this.isNullLiteral(lookahead)) {\n      return this.enforestNullLiteral();\n    }\n    if (this.term === null && this.isRegularExpression(lookahead)) {\n      return this.enforestRegularExpressionLiteral();\n    }\n    // $x:FunctionExpression\n    if (this.term === null && this.isFnDeclTransform(lookahead)) {\n      return this.enforestFunction({ isExpr: true });\n    }\n    // { $p:prop (,) ... }\n    if (this.term === null && this.isBraces(lookahead)) {\n      return this.enforestObjectExpression();\n    }\n    // [$x:expr (,) ...]\n    if (this.term === null && this.isBrackets(lookahead)) {\n      return this.enforestArrayExpression();\n    }\n    assert(false, 'Not a primary expression');\n  }\n\n  enforestLeftHandSideExpression({ allowCall }: { allowCall: boolean }) {\n    let lookahead = this.peek();\n\n    if (this.isCompiletimeTransform(lookahead)) {\n      this.expandMacro();\n      lookahead = this.peek();\n    }\n\n    if (this.isSuperTransform(lookahead)) {\n      this.advance();\n      this.term = new T.Super({});\n    } else if (this.isNewTransform(lookahead)) {\n      this.term = this.enforestNewExpression();\n    } else if (this.isThisTransform(lookahead)) {\n      this.term = this.enforestThisExpression();\n    }\n\n    while (true) {\n      lookahead = this.peek();\n      if (this.isParens(lookahead)) {\n        if (!allowCall) {\n          // we're dealing with a new expression\n          if (\n            this.term &&\n            (isIdentifierExpression(this.term) ||\n              isStaticMemberExpression(this.term) ||\n              isComputedMemberExpression(this.term))\n          ) {\n            return this.term;\n          }\n          this.term = this.enforestExpressionLoop();\n        } else {\n          this.term = this.enforestCallExpression();\n        }\n      } else if (this.isBrackets(lookahead)) {\n        this.term = this.term\n          ? this.enforestComputedMemberExpression()\n          : this.enforestPrimaryExpression();\n      } else if (\n        this.isPunctuator(lookahead, '.') &&\n        (this.isIdentifier(this.peek(1)) || this.isKeyword(this.peek(1)))\n      ) {\n        this.term = this.enforestStaticMemberExpression();\n      } else if (this.isTemplate(lookahead)) {\n        this.term = this.enforestTemplateLiteral();\n      } else if (this.isBraces(lookahead)) {\n        this.term = this.enforestPrimaryExpression();\n      } else if (this.isIdentifier(lookahead)) {\n        if (this.term) break;\n        this.term = new T.IdentifierExpression({\n          name: this.enforestIdentifier(),\n        });\n      } else {\n        break;\n      }\n    }\n    return this.term;\n  }\n\n  enforestBooleanLiteral() {\n    return new T.LiteralBooleanExpression({\n      value: this.matchRawSyntax().val() === 'true',\n    });\n  }\n\n  enforestTemplateLiteral() {\n    return new T.TemplateExpression({\n      tag: this.term,\n      elements: this.enforestTemplateElements(),\n    });\n  }\n\n  enforestStringLiteral() {\n    return new T.LiteralStringExpression({\n      value: this.matchRawSyntax().val(),\n    });\n  }\n\n  enforestNumericLiteral() {\n    let num = this.matchRawSyntax();\n    if (num.val() === 1 / 0) {\n      return new T.LiteralInfinityExpression({});\n    }\n    return new T.LiteralNumericExpression({\n      value: num.val(),\n    });\n  }\n\n  enforestIdentifierExpression() {\n    return new T.IdentifierExpression({\n      name: this.matchRawSyntax(),\n    });\n  }\n\n  enforestRegularExpressionLiteral() {\n    let reStx = this.matchRawSyntax();\n\n    let lastSlash = reStx.token.value.lastIndexOf('/');\n    let pattern = reStx.token.value.slice(1, lastSlash);\n    let flags = reStx.token.value.slice(lastSlash + 1);\n    return new T.LiteralRegExpExpression({\n      pattern,\n      flags,\n    });\n  }\n\n  enforestNullLiteral() {\n    this.advance();\n    return new T.LiteralNullExpression({});\n  }\n\n  enforestThisExpression() {\n    return new T.ThisExpression({\n      stx: this.matchRawSyntax(),\n    });\n  }\n\n  enforestArgumentList() {\n    let result = [];\n    while (this.rest.size > 0) {\n      let arg;\n      if (this.isPunctuator(this.peek(), '...')) {\n        this.advance();\n        arg = new T.SpreadElement({\n          expression: this.enforestExpressionLoop(),\n        });\n      } else {\n        arg = this.enforestExpressionLoop();\n      }\n      if (this.rest.size > 0) {\n        this.matchPunctuator(',');\n      }\n      result.push(arg);\n    }\n    return List(result);\n  }\n\n  enforestNewExpression() {\n    this.matchKeyword('new');\n    if (\n      this.isPunctuator(this.peek(), '.') &&\n      this.isIdentifier(this.peek(1), 'target')\n    ) {\n      this.advance();\n      this.advance();\n      return new T.NewTargetExpression({});\n    }\n\n    let callee = this.enforestLeftHandSideExpression({ allowCall: false });\n    let args;\n    if (this.isParens(this.peek())) {\n      args = this.matchParens();\n    } else {\n      args = List();\n    }\n    return new T.NewExpression({\n      callee,\n      arguments: args,\n    });\n  }\n\n  enforestComputedMemberExpression() {\n    let enf = new Enforester(this.matchSquares(), List(), this.context);\n    return new T.ComputedMemberExpression({\n      object: this.term,\n      expression: enf.enforestExpression(),\n    });\n  }\n\n  transformDestructuring(term: Term) {\n    switch (term.type) {\n      case 'IdentifierExpression':\n        return new T.BindingIdentifier({ name: term.name });\n\n      case 'ParenthesizedExpression':\n        if (term.inner.size === 1 && this.isIdentifier(term.inner.get(0))) {\n          return new T.BindingIdentifier({ name: term.inner.get(0).value });\n        }\n        return term;\n      case 'DataProperty':\n        return new T.BindingPropertyProperty({\n          name: term.name,\n          binding: this.transformDestructuringWithDefault(term.expression),\n        });\n      case 'ShorthandProperty':\n        return new T.BindingPropertyIdentifier({\n          binding: new T.BindingIdentifier({ name: term.name }),\n          init: null,\n        });\n      case 'ObjectExpression':\n        return new T.ObjectBinding({\n          properties: term.properties.map(t => this.transformDestructuring(t)),\n        });\n      case 'ArrayExpression': {\n        let last = term.elements.last();\n        if (last != null && last.type === 'SpreadElement') {\n          return new T.ArrayBinding({\n            elements: term.elements\n              .slice(0, -1)\n              .map(t => t && this.transformDestructuringWithDefault(t)),\n            restElement: this.transformDestructuringWithDefault(\n              last.expression,\n            ),\n          });\n        } else {\n          return new T.ArrayBinding({\n            elements: term.elements.map(\n              t => t && this.transformDestructuringWithDefault(t),\n            ),\n            restElement: null,\n          });\n        }\n      }\n      case 'StaticPropertyName':\n        return new T.BindingIdentifier({\n          name: term.value,\n        });\n      case 'ComputedMemberExpression':\n      case 'StaticMemberExpression':\n      case 'ArrayBinding':\n      case 'BindingIdentifier':\n      case 'BindingPropertyIdentifier':\n      case 'BindingPropertyProperty':\n      case 'BindingWithDefault':\n      case 'ObjectBinding':\n        return term;\n    }\n    assert(false, 'not implemented yet for ' + term.type);\n  }\n\n  transformDestructuringWithDefault(term: Term) {\n    switch (term.type) {\n      case 'AssignmentExpression':\n        return new T.BindingWithDefault({\n          binding: this.transformDestructuring(term.binding),\n          init: term.expression,\n        });\n    }\n    return this.transformDestructuring(term);\n  }\n\n  enforestCallExpression() {\n    let paren = this.matchParens();\n    return new T.CallExpressionE({\n      callee: this.term,\n      arguments: paren,\n    });\n  }\n\n  enforestArrowExpression() {\n    let enf;\n    if (this.isIdentifier(this.peek())) {\n      enf = new Enforester(List.of(this.advance()), List(), this.context);\n    } else {\n      let p = this.matchParens();\n      enf = new Enforester(p, List(), this.context);\n    }\n    let params = enf.enforestFormalParameters();\n    this.matchPunctuator('=>');\n\n    let body;\n    if (this.isBraces(this.peek())) {\n      body = this.matchCurlies();\n      return new T.ArrowExpressionE({ params, body });\n    } else {\n      enf = new Enforester(this.rest, List(), this.context);\n      body = enf.enforestExpressionLoop();\n      this.rest = enf.rest;\n      return new T.ArrowExpression({ params, body });\n    }\n  }\n\n  enforestYieldExpression() {\n    let kwd = this.matchKeyword('yield');\n    let lookahead = this.peek();\n\n    if (\n      this.rest.size === 0 || (lookahead && !this.lineNumberEq(kwd, lookahead))\n    ) {\n      return new T.YieldExpression({\n        expression: null,\n      });\n    } else {\n      let isGenerator = false;\n      if (this.isPunctuator(this.peek(), '*')) {\n        isGenerator = true;\n        this.advance();\n      }\n      let expr = this.enforestExpression();\n      return new (isGenerator\n        ? T.YieldGeneratorExpression\n        : T.YieldExpression)({\n        expression: expr,\n      });\n    }\n  }\n\n  enforestSyntaxTemplate() {\n    return new T.SyntaxTemplate({\n      template: this.matchRawDelimiter(),\n    });\n  }\n\n  enforestStaticMemberExpression() {\n    let object = this.term;\n    this.advance();\n    let property = this.matchRawSyntax();\n\n    return new T.StaticMemberExpression({\n      object: object,\n      property: property,\n    });\n  }\n\n  enforestArrayExpression() {\n    let arr = this.matchSquares();\n\n    let elements = [];\n\n    let enf = new Enforester(arr, List(), this.context);\n\n    while (enf.rest.size > 0) {\n      let lookahead = enf.peek();\n      let expression = null;\n      if (!enf.isPunctuator(lookahead, ',')) {\n        let isSpread = false;\n        if (enf.isPunctuator(lookahead, '...')) {\n          enf.advance();\n          isSpread = true;\n        }\n        expression = enf.enforestExpressionLoop();\n        if (expression == null) {\n          // this was a macro that expanded to nothing\n          continue;\n        }\n        if (enf.rest.size > 0 && !enf.isPunctuator(enf.peek(), ',')) {\n          throw enf.createError(enf.peek(), 'unexpected token');\n        }\n        if (isSpread) {\n          expression = new T.SpreadElement({ expression });\n        }\n      }\n      enf.consumeComma();\n      elements.push(expression);\n    }\n\n    return new T.ArrayExpression({\n      elements: List(elements),\n    });\n  }\n\n  enforestObjectExpression() {\n    let obj = this.matchCurlies();\n\n    let properties = List();\n\n    let enf = new Enforester(obj, List(), this.context);\n\n    let lastProp = null;\n    //TODO: implement object spread operator when it lands\n    while (enf.rest.size > 0) {\n      let prop = enf.enforestPropertyDefinition();\n\n      if (enf.rest.size > 0 && !enf.isPunctuator(enf.peek(), ',')) {\n        throw enf.createError(enf.peek(), 'unexpected token');\n      }\n\n      enf.consumeComma();\n      properties = properties.concat(prop);\n\n      if (lastProp === prop) {\n        throw enf.createError(prop, 'invalid syntax in object');\n      }\n      lastProp = prop;\n    }\n\n    return new T.ObjectExpression({\n      properties: properties,\n    });\n  }\n\n  enforestPropertyDefinition() {\n    let { methodOrKey, kind } = this.enforestMethodDefinition();\n\n    switch (kind) {\n      case 'method':\n        return methodOrKey;\n      case 'identifier':\n        if (this.isAssign(this.peek())) {\n          this.advance();\n          let init = this.enforestExpressionLoop();\n          return new T.BindingPropertyIdentifier({\n            init,\n            binding: this.transformDestructuring(methodOrKey),\n          });\n        } else if (!this.isPunctuator(this.peek(), ':')) {\n          return new T.ShorthandProperty({\n            name: methodOrKey.value,\n          });\n        }\n    }\n\n    this.matchPunctuator(':');\n    let expr = this.enforestExpressionLoop();\n\n    return new T.DataProperty({\n      name: methodOrKey,\n      expression: expr,\n    });\n  }\n\n  enforestMethodDefinition() {\n    let lookahead = this.peek();\n    let isGenerator = false;\n    if (this.isPunctuator(lookahead, '*')) {\n      isGenerator = true;\n      this.advance();\n    }\n\n    if (\n      this.isIdentifier(lookahead, 'get') && this.isPropertyName(this.peek(1))\n    ) {\n      this.advance();\n      let { name } = this.enforestPropertyName();\n      this.matchParens();\n      let body = this.matchCurlies();\n      return {\n        methodOrKey: new T.Getter({ name, body }),\n        kind: 'method',\n      };\n    } else if (\n      this.isIdentifier(lookahead, 'set') && this.isPropertyName(this.peek(1))\n    ) {\n      this.advance();\n      let { name } = this.enforestPropertyName();\n      let enf = new Enforester(this.matchParens(), List(), this.context);\n      let param = enf.enforestBindingElement();\n      let body = this.matchCurlies();\n      return {\n        methodOrKey: new T.Setter({ name, param, body }),\n        kind: 'method',\n      };\n    }\n    let { name } = this.enforestPropertyName();\n    if (this.isParens(this.peek())) {\n      let params = this.matchParens();\n      let enf = new Enforester(params, List(), this.context);\n      let formalParams = enf.enforestFormalParameters();\n\n      let body = this.matchCurlies();\n      return {\n        methodOrKey: new T.Method({\n          isGenerator,\n          name,\n          params: formalParams,\n          body,\n        }),\n        kind: 'method',\n      };\n    }\n    return {\n      methodOrKey: name,\n      kind: this.isIdentifier(lookahead) || this.isKeyword(lookahead)\n        ? 'identifier'\n        : 'property',\n    };\n  }\n\n  enforestPropertyName() {\n    let lookahead = this.peek();\n\n    if (this.isStringLiteral(lookahead) || this.isNumericLiteral(lookahead)) {\n      return {\n        name: new T.StaticPropertyName({\n          value: this.matchRawSyntax(),\n        }),\n        binding: null,\n      };\n    } else if (this.isBrackets(lookahead)) {\n      let enf = new Enforester(this.matchSquares(), List(), this.context);\n      let expr = enf.enforestExpressionLoop();\n      return {\n        name: new T.ComputedPropertyName({\n          expression: expr,\n        }),\n        binding: null,\n      };\n    }\n    let name = this.matchRawSyntax();\n    return {\n      name: new T.StaticPropertyName({ value: name }),\n      binding: new T.BindingIdentifier({ name }),\n    };\n  }\n\n  enforestFunction({\n    isExpr,\n    inDefault,\n  }: { isExpr?: boolean, inDefault?: boolean }) {\n    let name = null, params, body;\n    let isGenerator = false;\n    // eat the function keyword\n    let fnKeyword = this.matchRawSyntax();\n    let lookahead = this.peek();\n\n    if (this.isPunctuator(lookahead, '*')) {\n      isGenerator = true;\n      this.advance();\n      lookahead = this.peek();\n    }\n\n    if (!this.isParens(lookahead)) {\n      name = this.enforestBindingIdentifier();\n    } else if (inDefault) {\n      name = new T.BindingIdentifier({\n        name: Syntax.fromIdentifier('*default*', fnKeyword),\n      });\n    }\n\n    params = this.matchParens();\n\n    body = this.matchCurlies();\n\n    let enf = new Enforester(params, List(), this.context);\n    let formalParams = enf.enforestFormalParameters();\n\n    return new (isExpr ? T.FunctionExpressionE : T.FunctionDeclarationE)({\n      name: name,\n      isGenerator: isGenerator,\n      params: formalParams,\n      body: body,\n    });\n  }\n\n  enforestFormalParameters() {\n    let items = [];\n    let rest = null;\n    while (this.rest.size !== 0) {\n      let lookahead = this.peek();\n      if (this.isPunctuator(lookahead, '...')) {\n        this.matchPunctuator('...');\n        rest = this.enforestBindingIdentifier();\n        break;\n      }\n      items.push(this.enforestParam());\n      this.consumeComma();\n    }\n    return new T.FormalParameters({\n      items: List(items),\n      rest,\n    });\n  }\n\n  enforestParam() {\n    return this.enforestBindingElement();\n  }\n\n  enforestUpdateExpression() {\n    const lookahead = this.peek();\n    const leftTerm = this.term;\n    if (!lookahead) {\n      throw this.createError(lookahead, 'assertion failure: operator is null');\n    }\n    let operator = this.matchRawSyntax();\n    if (this.isCompiletimeTransform(lookahead)) {\n      const operatorTransform = this.getFromCompiletimeEnvironment(operator);\n      if (!operatorTransform || operatorTransform.value.type !== 'operator') {\n        throw this.createError(lookahead, 'unexpected transform');\n      }\n      let result = operatorTransform.value.f.call(null, leftTerm);\n      let enf = new Enforester(result, List(), this.context);\n      return enf.enforestExpressionLoop();\n    }\n    return new T.UpdateExpression({\n      isPrefix: false,\n      operator: operator.val(),\n      operand: this.transformDestructuring(leftTerm),\n    });\n  }\n\n  enforestUnaryExpression() {\n    const lookahead = this.peek();\n    if (!lookahead) {\n      throw this.createError(lookahead, 'assertion failure: operator is null');\n    }\n    let operator = this.matchRawSyntax();\n    let prec, combine;\n    if (this.isCompiletimeTransform(lookahead)) {\n      const operatorTransform = this.getFromCompiletimeEnvironment(lookahead);\n      if (!operatorTransform || operatorTransform.value.type !== 'operator') {\n        throw this.createError(lookahead, 'unexpected transform');\n      }\n      prec = operatorTransform.value.prec;\n      combine = rightTerm => {\n        return this.expandOperator(lookahead, operatorTransform, [rightTerm]);\n      };\n    } else {\n      // all builtins are 16\n      prec = 16;\n      combine = rightTerm => {\n        if (operator.val() === '++' || operator.val() === '--') {\n          return new T.UpdateExpression({\n            operator: operator.val(),\n            operand: this.transformDestructuring(rightTerm),\n            isPrefix: true,\n          });\n        } else {\n          return new T.UnaryExpression({\n            operator: operator.val(),\n            operand: rightTerm,\n          });\n        }\n      };\n    }\n\n    this.opCtx.stack = this.opCtx.stack.push({\n      prec: this.opCtx.prec,\n      combine: this.opCtx.combine,\n    });\n    this.opCtx.prec = prec;\n    this.opCtx.combine = rightTerm => {\n      return combine(rightTerm);\n    };\n    return EXPR_LOOP_OPERATOR;\n  }\n\n  enforestConditionalExpression() {\n    // first, pop the operator stack\n    let test = this.opCtx.combine(this.term);\n    if (this.opCtx.stack.size > 0) {\n      let { prec, combine } = this.opCtx.stack.last();\n      this.opCtx.stack = this.opCtx.stack.pop();\n      this.opCtx.prec = prec;\n      this.opCtx.combine = combine;\n    }\n\n    this.matchPunctuator('?');\n    let enf = new Enforester(this.rest, List(), this.context);\n    let consequent = enf.enforestExpressionLoop();\n    enf.matchPunctuator(':');\n    enf = new Enforester(enf.rest, List(), this.context);\n    let alternate = enf.enforestExpressionLoop();\n    this.rest = enf.rest;\n    return new T.ConditionalExpression({\n      test,\n      consequent,\n      alternate,\n    });\n  }\n\n  enforestBinaryExpression() {\n    let leftTerm = this.term;\n    const opStx = this.peek();\n    if (!opStx) {\n      throw this.createError(opStx, 'assertion failure: opStx is null');\n    }\n\n    let prec, assoc, combine;\n    if (this.isCompiletimeTransform(this.peek())) {\n      const operatorTransform = this.getFromCompiletimeEnvironment(opStx.value);\n      if (!operatorTransform || operatorTransform.value.type !== 'operator') {\n        throw this.createError(opStx.value, 'unexpected transform');\n      }\n      prec = operatorTransform.value.prec;\n      assoc = operatorTransform.value.assoc;\n      combine = (left, right) => {\n        return this.expandOperator(opStx, operatorTransform, [left, right]);\n      };\n    } else {\n      prec = getOperatorPrec(opStx.value.val());\n      assoc = getOperatorAssoc(opStx.value.val());\n      combine = (left, right) =>\n        new T.BinaryExpression({\n          left,\n          right,\n          operator: opStx.value.val(),\n        });\n    }\n\n    if (operatorLt(this.opCtx.prec, prec, assoc)) {\n      this.opCtx.stack = this.opCtx.stack.push({\n        prec: this.opCtx.prec,\n        combine: this.opCtx.combine,\n      });\n      this.opCtx.prec = prec;\n      this.opCtx.combine = rightTerm => {\n        return combine(leftTerm, rightTerm);\n      };\n      this.advance();\n      return EXPR_LOOP_OPERATOR;\n    } else {\n      let term = this.opCtx.combine(leftTerm);\n      // this.rest does not change\n      let { prec, combine } = this.opCtx.stack.last();\n      this.opCtx.stack = this.opCtx.stack.pop();\n      this.opCtx.prec = prec;\n      this.opCtx.combine = combine;\n      return term;\n    }\n  }\n\n  enforestTemplateElements() {\n    let lookahead = this.matchTemplate();\n    let elements = lookahead.token.items.map(it => {\n      if (this.isDelimiter(it)) {\n        let enf = new Enforester(\n          it.inner.slice(1, it.inner.size - 1),\n          List(),\n          this.context,\n        );\n        return enf.enforest('expression');\n      }\n      return new T.TemplateElement({\n        rawValue: it.value.token.slice.text,\n      });\n    });\n    return elements;\n  }\n\n  expandMacro() {\n    let lookahead = this.peek();\n    while (this.isCompiletimeTransform(lookahead)) {\n      let name = this.matchRawSyntax();\n\n      let syntaxTransform = this.getFromCompiletimeEnvironment(name);\n      if (syntaxTransform == null) {\n        throw this.createError(\n          name,\n          `The macro ${name.resolve(this.context.phase)} does not have a bound value`,\n        );\n      } else if (typeof syntaxTransform.value.f !== 'function') {\n        throw this.createError(\n          name,\n          `The macro ${name.resolve(this.context.phase)} was not bound to a callable value: ${syntaxTransform.value.f}`,\n        );\n      }\n      let useSiteScope = freshScope('u');\n      let introducedScope = freshScope('i');\n      // TODO: needs to be a list of scopes I think\n      this.context.useScope = useSiteScope;\n\n      let ctx = new MacroContext(\n        this,\n        name,\n        this.context,\n        useSiteScope,\n        introducedScope,\n      );\n\n      let result = sanitizeReplacementValues(\n        syntaxTransform.value.f.call(null, ctx),\n      );\n      if (!List.isList(result)) {\n        throw this.createError(\n          name,\n          'macro must return a list but got: ' + result,\n        );\n      }\n      let scopeReducer = new ScopeReducer(\n        [{ scope: introducedScope, phase: ALL_PHASES, flip: true }],\n        this.context.bindings,\n        true,\n      );\n      result = result.map(terms => {\n        if (terms instanceof Syntax) {\n          return new T.RawSyntax({\n            value: terms,\n          }).reduce(scopeReducer);\n        } else if (!(terms instanceof Term)) {\n          throw this.createError(\n            name,\n            'macro must return syntax objects or terms but got: ' + terms,\n          );\n        }\n        return terms.reduce(scopeReducer);\n      });\n\n      this.rest = result.concat(ctx._rest(this));\n      lookahead = this.peek();\n    }\n  }\n\n  expandOperator(name: Term, operatorTransform: any, args: Array<Term>) {\n    let useSiteScope = freshScope('u');\n    let introducedScope = freshScope('i');\n    // TODO: needs to be a list of scopes I think\n    this.context.useScope = useSiteScope;\n    args = args.map(arg => {\n      return arg.reduce(\n        new ScopeReducer(\n          [\n            { scope: useSiteScope, phase: ALL_PHASES, flip: false },\n            { scope: introducedScope, phase: ALL_PHASES, flip: true },\n          ],\n          this.context.bindings,\n        ),\n      );\n    });\n    let result = sanitizeReplacementValues(\n      operatorTransform.value.f.apply(null, args),\n    );\n    let scopeReducer = new ScopeReducer(\n      [{ scope: introducedScope, phase: ALL_PHASES, flip: true }],\n      this.context.bindings,\n      true,\n    );\n    result = result.map(terms => {\n      if (terms instanceof Syntax) {\n        return new T.RawSyntax({\n          value: terms,\n        }).reduce(scopeReducer);\n      } else if (!(terms instanceof Term)) {\n        throw this.createError(\n          name,\n          'macro must return syntax objects or terms but got: ' + terms,\n        );\n      }\n      return terms.reduce(scopeReducer);\n    });\n    let enf = new Enforester(result, List(), this.context);\n    return enf.enforestExpressionLoop();\n  }\n\n  consumeSemicolon() {\n    let lookahead = this.peek();\n\n    if (lookahead && this.isPunctuator(lookahead, ';')) {\n      this.advance();\n    }\n  }\n\n  consumeComma() {\n    let lookahead = this.peek();\n\n    if (lookahead && this.isPunctuator(lookahead, ',')) {\n      this.advance();\n    }\n  }\n\n  safeCheck(obj: Syntax | Term, type: any, val: ?string = null) {\n    if (obj instanceof Term) {\n      if (obj instanceof T.RawSyntax) {\n        return (\n          obj.value &&\n          (typeof obj.value.match === 'function'\n            ? obj.value.match(type, val)\n            : false)\n        );\n      } else if (obj instanceof T.RawDelimiter) {\n        return type === 'delimiter' || obj.kind === type;\n      }\n    }\n    return (\n      obj && (typeof obj.match === 'function' ? obj.match(type, val) : false)\n    );\n  }\n\n  isTerm(term: any) {\n    return term && term instanceof Term;\n  }\n\n  isEOF(obj: Syntax | Term) {\n    return this.safeCheck(obj, 'eof');\n  }\n\n  isIdentifier(obj: Syntax | Term, val: ?string = null) {\n    return this.safeCheck(obj, 'identifier', val);\n  }\n\n  isPropertyName(obj: Syntax | Term) {\n    return (\n      this.isIdentifier(obj) ||\n      this.isKeyword(obj) ||\n      this.isNumericLiteral(obj) ||\n      this.isStringLiteral(obj) ||\n      this.isBrackets(obj)\n    );\n  }\n\n  isNumericLiteral(obj: Syntax | Term, val: ?string = null) {\n    return this.safeCheck(obj, 'number', val);\n  }\n\n  isStringLiteral(obj: Syntax | Term, val: ?string = null) {\n    return this.safeCheck(obj, 'string', val);\n  }\n\n  isTemplate(obj: Syntax | Term, val: ?string = null) {\n    return this.safeCheck(obj, 'template', val);\n  }\n\n  isSyntaxTemplate(obj: Syntax | Term) {\n    return this.safeCheck(obj, 'syntaxTemplate');\n  }\n\n  isBooleanLiteral(obj: Syntax | Term, val: ?string = null) {\n    return this.safeCheck(obj, 'boolean', val);\n  }\n\n  isNullLiteral(obj: Syntax | Term, val: ?string = null) {\n    return this.safeCheck(obj, 'null', val);\n  }\n\n  isRegularExpression(obj: Syntax | Term, val: ?string = null) {\n    return this.safeCheck(obj, 'regularExpression', val);\n  }\n\n  isDelimiter(obj: Syntax | Term) {\n    return this.safeCheck(obj, 'delimiter');\n  }\n\n  isParens(obj: Syntax | Term) {\n    return this.safeCheck(obj, 'parens');\n  }\n\n  isBraces(obj: Syntax | Term) {\n    return this.safeCheck(obj, 'braces');\n  }\n\n  isBrackets(obj: Syntax | Term) {\n    return this.safeCheck(obj, 'brackets');\n  }\n\n  isAssign(obj: Syntax | Term, val: ?string = null) {\n    return this.safeCheck(obj, 'assign', val);\n  }\n\n  isKeyword(obj: Syntax | Term, val: ?string = null) {\n    return this.safeCheck(obj, 'keyword', val);\n  }\n\n  isPunctuator(obj: Syntax | Term, val: ?string = null) {\n    return this.safeCheck(obj, 'punctuator', val);\n  }\n\n  isOperator(obj: Syntax | Term) {\n    return (\n      (this.safeCheck(obj, 'punctuator') ||\n        this.safeCheck(obj, 'identifier') ||\n        this.safeCheck(obj, 'keyword')) &&\n      ((obj instanceof T.RawSyntax && isOperator(obj.value)) ||\n        (obj instanceof Syntax && isOperator(obj)))\n    );\n  }\n\n  isCustomPrefixOperator(obj: Term) {\n    if (this.isCompiletimeTransform(obj)) {\n      let t = this.getFromCompiletimeEnvironment(obj.value);\n      return t && t.value.assoc === 'prefix';\n    }\n    return false;\n  }\n\n  isCustomPostfixOperator(obj: Term) {\n    if (this.isCompiletimeTransform(obj)) {\n      let t = this.getFromCompiletimeEnvironment(obj.value);\n      return t && t.value.assoc === 'postfix';\n    }\n    return false;\n  }\n\n  isCustomBinaryOperator(obj: Term) {\n    if (this.isCompiletimeTransform(obj)) {\n      let t = this.getFromCompiletimeEnvironment(obj.value);\n      return t && (t.value.assoc === 'left' || t.value.assoc === 'right');\n    }\n    return false;\n  }\n\n  isUpdateOperator(obj: Syntax | Term) {\n    return (\n      this.safeCheck(obj, 'punctuator', '++') ||\n      this.safeCheck(obj, 'punctuator', '--')\n    );\n  }\n\n  safeResolve(obj: Syntax | Term, phase: number | {}) {\n    if (obj instanceof T.RawSyntax) {\n      return typeof obj.value.resolve === 'function'\n        ? Just(obj.value.resolve(phase))\n        : Nothing();\n    } else if (obj instanceof Syntax) {\n      return typeof obj.resolve === 'function'\n        ? Just(obj.resolve(phase))\n        : Nothing();\n    }\n    return Nothing();\n  }\n\n  isTransform(obj: Syntax | Term, trans: any) {\n    return this.safeResolve(obj, this.context.phase)\n      .map(\n        name =>\n          this.context.env.get(name) === trans ||\n          this.context.store.get(name) === trans,\n      )\n      .getOrElse(false);\n  }\n\n  isTransformInstance(obj: Syntax | Term, trans: any) {\n    return this.safeResolve(obj, this.context.phase)\n      .map(\n        name =>\n          this.context.env.get(name) instanceof trans ||\n          this.context.store.get(name) instanceof trans,\n      )\n      .getOrElse(false);\n  }\n\n  isFnDeclTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, FunctionDeclTransform);\n  }\n\n  isVarDeclTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, VariableDeclTransform);\n  }\n\n  isLetDeclTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, LetDeclTransform);\n  }\n\n  isConstDeclTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, ConstDeclTransform);\n  }\n\n  isSyntaxDeclTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, SyntaxDeclTransform);\n  }\n\n  isSyntaxrecDeclTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, SyntaxrecDeclTransform);\n  }\n\n  isReturnStmtTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, ReturnStatementTransform);\n  }\n\n  isWhileTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, WhileTransform);\n  }\n\n  isForTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, ForTransform);\n  }\n\n  isSwitchTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, SwitchTransform);\n  }\n\n  isBreakTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, BreakTransform);\n  }\n\n  isContinueTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, ContinueTransform);\n  }\n\n  isDoTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, DoTransform);\n  }\n\n  isDebuggerTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, DebuggerTransform);\n  }\n\n  isWithTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, WithTransform);\n  }\n\n  isImportTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, ImportTransform);\n  }\n\n  isExportTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, ExportTransform);\n  }\n\n  isTryTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, TryTransform);\n  }\n\n  isThrowTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, ThrowTransform);\n  }\n\n  isOperatorDeclTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, OperatorDeclTransform);\n  }\n\n  isIfTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, IfTransform);\n  }\n\n  isNewTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, NewTransform);\n  }\n\n  isSuperTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, SuperTransform);\n  }\n\n  isThisTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, ThisTransform);\n  }\n\n  isClassTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, ClassTransform);\n  }\n\n  isYieldTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, YieldTransform);\n  }\n\n  isDefaultTransform(obj: Syntax | Term) {\n    return this.isTransform(obj, DefaultTransform);\n  }\n\n  isCompiletimeTransform(obj: Syntax | Term) {\n    return this.isTransformInstance(obj, CompiletimeTransform);\n  }\n\n  isModuleNamespaceTransform(obj: Term) {\n    return this.isTransformInstance(obj, ModuleNamespaceTransform);\n  }\n\n  isVarBindingTransform(obj: Syntax | Term) {\n    return this.isTransformInstance(obj, VarBindingTransform);\n  }\n\n  getFromCompiletimeEnvironment(term: Syntax) {\n    if (this.context.env.has(term.resolve(this.context.phase))) {\n      return this.context.env.get(term.resolve(this.context.phase));\n    }\n    return this.context.store.get(term.resolve(this.context.phase));\n  }\n\n  lineNumberEq(a: ?(T.Term | Syntax), b: ?(Syntax | T.Term)) {\n    if (!(a && b)) {\n      return false;\n    }\n    return getLineNumber(a) === getLineNumber(b);\n  }\n\n  matchRawDelimiter(): List<T.SyntaxTerm> {\n    let lookahead = this.advance();\n    if (lookahead instanceof T.RawDelimiter) {\n      return lookahead.inner;\n    }\n    throw this.createError(lookahead, 'expecting a RawDelimiter');\n  }\n\n  matchRawSyntax(): Syntax {\n    let lookahead = this.advance();\n    if (lookahead instanceof T.RawSyntax) {\n      return lookahead.value;\n    }\n    throw this.createError(lookahead, 'expecting a RawSyntax');\n  }\n\n  matchIdentifier(val?: string) {\n    let lookahead = this.peek();\n    if (this.isIdentifier(lookahead, val)) {\n      return this.matchRawSyntax();\n    }\n    throw this.createError(lookahead, 'expecting an identifier');\n  }\n\n  matchKeyword(val: string) {\n    let lookahead = this.peek();\n    if (this.isKeyword(lookahead, val)) {\n      return this.matchRawSyntax();\n    }\n    throw this.createError(lookahead, 'expecting ' + val);\n  }\n\n  matchLiteral() {\n    let lookahead = this.peek();\n    if (\n      this.isNumericLiteral(lookahead) ||\n      this.isStringLiteral(lookahead) ||\n      this.isBooleanLiteral(lookahead) ||\n      this.isNullLiteral(lookahead) ||\n      this.isTemplate(lookahead) ||\n      this.isRegularExpression(lookahead)\n    ) {\n      return this.matchRawSyntax();\n    }\n    throw this.createError(lookahead, 'expecting a literal');\n  }\n\n  matchStringLiteral() {\n    let lookahead = this.peek();\n    if (this.isStringLiteral(lookahead)) {\n      return this.matchRawSyntax();\n    }\n    throw this.createError(lookahead, 'expecting a string literal');\n  }\n\n  matchTemplate() {\n    let lookahead = this.peek();\n    if (this.isTemplate(lookahead)) {\n      return this.matchRawSyntax();\n    }\n    throw this.createError(lookahead, 'expecting a template literal');\n  }\n\n  matchParens(): List<T.SyntaxTerm> {\n    let lookahead = this.peek();\n    if (this.isParens(lookahead)) {\n      let inner = this.matchRawDelimiter();\n      return inner.slice(1, inner.size - 1);\n    }\n    throw this.createError(lookahead, 'expecting parens');\n  }\n\n  matchCurlies() {\n    let lookahead = this.peek();\n    if (this.isBraces(lookahead)) {\n      let inner = this.matchRawDelimiter();\n      return inner.slice(1, inner.size - 1);\n    }\n    throw this.createError(lookahead, 'expecting curly braces');\n  }\n\n  matchSquares(): List<T.SyntaxTerm> {\n    let lookahead = this.peek();\n    if (this.isBrackets(lookahead)) {\n      let inner = this.matchRawDelimiter();\n      return inner.slice(1, inner.size - 1);\n    }\n    throw this.createError(lookahead, 'expecting square braces');\n  }\n\n  matchUnaryOperator() {\n    let lookahead = this.matchRawSyntax();\n    if (isUnaryOperator(lookahead)) {\n      return lookahead;\n    }\n    throw this.createError(lookahead, 'expecting a unary operator');\n  }\n\n  matchPunctuator(val: string) {\n    let lookahead = this.matchRawSyntax();\n    if (this.isPunctuator(lookahead)) {\n      if (typeof val !== 'undefined') {\n        if (lookahead.val() === val) {\n          return lookahead;\n        } else {\n          throw this.createError(\n            lookahead,\n            'expecting a ' + val + ' punctuator',\n          );\n        }\n      }\n      return lookahead;\n    }\n    throw this.createError(lookahead, 'expecting a punctuator');\n  }\n\n  createError(stx: Syntax | Term, message: string) {\n    let ctx = '';\n    let offending = stx;\n    if (this.rest.size > 0) {\n      ctx = this.rest\n        .slice(0, 20)\n        .map(term => {\n          if (term instanceof T.RawDelimiter) {\n            return term.inner;\n          }\n          return List.of(term);\n        })\n        .flatten()\n        .map(s => {\n          let sval = s instanceof T.RawSyntax ? s.value.val() : s.toString();\n          if (s === offending) {\n            return '__' + sval + '__';\n          }\n          return sval;\n        })\n        .join(' ');\n    } else {\n      ctx = offending.toString();\n    }\n    return new Error(message + '\\n' + ctx);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/env.js":"import {\n  FunctionDeclTransform,\n  VariableDeclTransform,\n  LetDeclTransform,\n  ConstDeclTransform,\n  SyntaxDeclTransform,\n  SyntaxrecDeclTransform,\n  OperatorDeclTransform,\n  ReturnStatementTransform,\n  IfTransform,\n  ForTransform,\n  SwitchTransform,\n  BreakTransform,\n  ContinueTransform,\n  DoTransform,\n  DebuggerTransform,\n  WithTransform,\n  ImportTransform,\n  ExportTransform,\n  SuperTransform,\n  ThisTransform,\n  YieldTransform,\n  ClassTransform,\n  DefaultTransform,\n  TryTransform,\n  ThrowTransform,\n  NewTransform,\n  WhileTransform,\n} from './transforms';\n\nexport default class Env {\n  constructor() {\n    this.map = new Map();\n    this.map.set('function', FunctionDeclTransform);\n    this.map.set('var', VariableDeclTransform);\n    this.map.set('let', LetDeclTransform);\n    this.map.set('const', ConstDeclTransform);\n    this.map.set('syntaxrec', SyntaxrecDeclTransform);\n    this.map.set('syntax', SyntaxDeclTransform);\n    this.map.set('operator', OperatorDeclTransform);\n    this.map.set('return', ReturnStatementTransform);\n    this.map.set('while', WhileTransform);\n    this.map.set('if', IfTransform);\n    this.map.set('for', ForTransform);\n    this.map.set('switch', SwitchTransform);\n    this.map.set('break', BreakTransform);\n    this.map.set('continue', ContinueTransform);\n    this.map.set('do', DoTransform);\n    this.map.set('debugger', DebuggerTransform);\n    this.map.set('with', WithTransform);\n    this.map.set('import', ImportTransform);\n    this.map.set('export', ExportTransform);\n    this.map.set('super', SuperTransform);\n    this.map.set('this', ThisTransform);\n    this.map.set('class', ClassTransform);\n    this.map.set('default', DefaultTransform);\n    this.map.set('try', TryTransform);\n    this.map.set('yield', YieldTransform);\n    this.map.set('throw', ThrowTransform);\n    this.map.set('new', NewTransform);\n  }\n\n  has(key) {\n    return this.map.has(key);\n  }\n\n  get(key) {\n    return this.map.get(key);\n  }\n\n  set(key, val) {\n    return this.map.set(key, val);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/errors.js":"export function expect(cond, message, offendingSyntax, rest) {\n  if (!cond) {\n    let ctx = '';\n    if (rest) {\n      ctx = rest\n        .slice(0, 20)\n        .map(s => {\n          let val = s.isDelimiter() ? '( ... )' : s.val();\n          if (s === offendingSyntax) {\n            return '__' + val + '__';\n          }\n          return val;\n        })\n        .join(' ');\n    }\n    throw new Error('[error]: ' + message + '\\n' + ctx);\n  }\n}\n\nexport function assert(cond, message) {\n  if (!cond) {\n    throw new Error('[assertion error]: ' + message);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/hygiene-utils.js":"import { List } from 'immutable';\n\nimport ASTDispatcher from './ast-dispatcher';\n\nexport class CollectBindingSyntax extends ASTDispatcher {\n  constructor() {\n    super('collect', true);\n    this.names = List();\n  }\n\n  // registerSyntax(stx) {\n  //   let newBinding = gensym(stx.val());\n  //   this.context.bindings.add(stx, {\n  //     binding: newBinding,\n  //     phase: this.context.phase,\n  //     // skip dup because js allows variable redeclarations\n  //     // (technically only for `var` but we can let later stages of the pipeline\n  //     // handle incorrect redeclarations of `const` and `let`)\n  //     skipDup: true\n  //   });\n  //   return stx;\n  // }\n\n  collect(term) {\n    return this.dispatch(term);\n  }\n\n  collectBindingIdentifier(term) {\n    return this.names.concat(term.name);\n  }\n\n  collectBindingPropertyIdentifier(term) {\n    return this.collect(term.binding);\n  }\n\n  collectBindingPropertyProperty(term) {\n    return this.collect(term.binding);\n  }\n\n  collectArrayBinding(term) {\n    let restElement = null;\n    if (term.restElement != null) {\n      restElement = this.collect(term.restElement);\n    }\n    return this.names\n      .concat(restElement)\n      .concat(\n        term.elements.filter(el => el != null).flatMap(el => this.collect(el)),\n      );\n  }\n\n  collectObjectBinding() {\n    // return term.properties.flatMap(prop => this.collect(prop));\n    return List();\n  }\n\n  // registerVariableDeclaration(term) {\n  //   let declarators = term.declarators.map(decl => {\n  //     return decl.extend({\n  //       binding: this.register(decl.binding)\n  //     });\n  //   });\n  //   return term.extend({ declarators });\n  // }\n  //\n  // registerFunctionDeclaration(term) {\n  //   return term.extend({\n  //     name: this.register(term.name)\n  //   });\n  // }\n  //\n  // registerExport(term) {\n  //   return term.extend({\n  //     declaration: this.register(term.declaration)\n  //   });\n  // }\n}\n\nexport function collectBindings(term) {\n  return new CollectBindingSyntax().collect(term);\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/load-syntax.js":"import * as S from 'sweet-spec';\nimport * as _ from 'ramda';\nimport { List } from 'immutable';\nimport Syntax from './syntax';\nimport codegen, { FormattedCodeGen } from 'shift-codegen';\nimport SweetToShiftReducer from './sweet-to-shift-reducer';\nimport TermExpander from './term-expander';\nimport Env from './env';\n\nimport { replaceTemplate } from './template-processor';\n\nexport function expandCompiletime(term, context) {\n  // each compiletime value needs to be expanded with a fresh\n  // environment and in the next higher phase\n  let syntaxExpander = new TermExpander(\n    _.merge(context, {\n      phase: context.phase + 1,\n      env: new Env(),\n      store: context.store,\n    }),\n  );\n\n  return syntaxExpander.expand(term);\n}\n\nexport function sanitizeReplacementValues(values) {\n  if (Array.isArray(values)) {\n    return sanitizeReplacementValues(List(values));\n  } else if (List.isList(values)) {\n    return values.map(sanitizeReplacementValues);\n  } else if (values == null) {\n    throw new Error(\n      'replacement values for syntax template must not be null or undefined',\n    );\n  } else if (typeof values.next === 'function') {\n    return sanitizeReplacementValues(List(values));\n  }\n  return values;\n}\n\n// (Expression, Context) -> [function]\nexport function evalCompiletimeValue(expr: S.Expression, context: any) {\n  let sandbox = {\n    syntaxTemplate: function(ident, ...values) {\n      return replaceTemplate(\n        context.templateMap.get(ident),\n        sanitizeReplacementValues(values),\n      );\n    },\n  };\n\n  let sandboxKeys = List(Object.keys(sandbox));\n  let sandboxVals = sandboxKeys.map(k => sandbox[k]).toArray();\n\n  let parsed = new S.Module({\n    directives: List(),\n    items: List.of(\n      new S.ExpressionStatement({\n        expression: new S.FunctionExpression({\n          isGenerator: false,\n          name: null,\n          params: new S.FormalParameters({\n            items: sandboxKeys.map(param => {\n              return new S.BindingIdentifier({\n                name: Syntax.from('identifier', param),\n              });\n            }),\n            rest: null,\n          }),\n          body: new S.FunctionBody({\n            directives: List.of(\n              new S.Directive({\n                rawValue: 'use strict',\n              }),\n            ),\n            statements: List.of(\n              new S.ReturnStatement({\n                expression: expr,\n              }),\n            ),\n          }),\n        }),\n      }),\n    ),\n  }).reduce(new SweetToShiftReducer(context.phase));\n\n  let gen = codegen(parsed, new FormattedCodeGen());\n  let result = context.transform(gen);\n\n  let val = context.loader.eval(result.code, context.store);\n  return val.apply(undefined, sandboxVals);\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/macro-context.js":"import { expect } from './errors';\nimport { List } from 'immutable';\nimport { Enforester } from './enforester';\nimport { ALL_PHASES } from './syntax';\nimport * as _ from 'ramda';\nimport ScopeReducer from './scope-reducer';\nimport * as T from 'sweet-spec';\nimport Term, * as S from 'sweet-spec';\nimport Syntax from './syntax';\nimport { isTemplate, isDelimiter, getKind } from './tokens';\nimport type { TokenTree } from './tokens';\n\nexport function wrapInTerms(stx: List<TokenTree>): List<Term> {\n  return stx.map(s => {\n    if (isTemplate(s)) {\n      if (s.items) {\n        s.items = wrapInTerms(s.items);\n        return new T.RawSyntax({\n          value: new Syntax(s),\n        });\n      }\n      return new T.RawSyntax({\n        value: new Syntax(s),\n      });\n    } else if (isDelimiter(s)) {\n      return new S.RawDelimiter({\n        kind: getKind(s),\n        inner: wrapInTerms(s),\n      });\n    }\n    return new S.RawSyntax({\n      value: new Syntax(s),\n    });\n  });\n}\n\nconst privateData = new WeakMap();\n\nfunction cloneEnforester(enf) {\n  const { rest, prev, context } = enf;\n  return new Enforester(rest, prev, context);\n}\n\nfunction Marker() {}\n\n/*\nctx :: {\n  of: (Syntax) -> ctx\n  next: (String) -> Syntax or Term\n}\n*/\nexport default class MacroContext {\n  constructor(enf, name, context, useScope, introducedScope) {\n    const startMarker = new Marker();\n    const startEnf = cloneEnforester(enf);\n    const priv = {\n      name,\n      context,\n      enf: startEnf,\n      startMarker,\n      markers: new Map([[startMarker, enf]]),\n    };\n\n    if (useScope && introducedScope) {\n      priv.noScopes = false;\n      priv.useScope = useScope;\n      priv.introducedScope = introducedScope;\n    } else {\n      priv.noScopes = true;\n    }\n    privateData.set(this, priv);\n    this.reset(); // set current enforester\n\n    this[Symbol.iterator] = () => this;\n  }\n\n  name() {\n    const { name } = privateData.get(this);\n    return new T.RawSyntax({ value: name });\n  }\n\n  contextify(delim: any) {\n    if (!(delim instanceof T.RawDelimiter)) {\n      throw new Error(`Can only contextify a delimiter but got ${delim}`);\n    }\n    const { context } = privateData.get(this);\n\n    let enf = new Enforester(\n      delim.inner.slice(1, delim.inner.size - 1),\n      List(),\n      context,\n    );\n    return new MacroContext(enf, 'inner', context);\n  }\n\n  expand(type) {\n    const { enf } = privateData.get(this);\n    if (enf.rest.size === 0) {\n      return {\n        done: true,\n        value: null,\n      };\n    }\n    enf.expandMacro();\n    let originalRest = enf.rest;\n    let value;\n    switch (type) {\n      case 'AssignmentExpression':\n      case 'expr':\n        value = enf.enforestExpressionLoop();\n        break;\n      case 'Expression':\n        value = enf.enforestExpression();\n        break;\n      case 'Statement':\n      case 'stmt':\n        value = enf.enforestStatement();\n        break;\n      case 'BlockStatement':\n      case 'WhileStatement':\n      case 'IfStatement':\n      case 'ForStatement':\n      case 'SwitchStatement':\n      case 'BreakStatement':\n      case 'ContinueStatement':\n      case 'DebuggerStatement':\n      case 'WithStatement':\n      case 'TryStatement':\n      case 'ThrowStatement':\n      case 'ClassDeclaration':\n      case 'FunctionDeclaration':\n      case 'LabeledStatement':\n      case 'VariableDeclarationStatement':\n      case 'ReturnStatement':\n      case 'ExpressionStatement':\n        value = enf.enforestStatement();\n        expect(\n          _.whereEq({ type }, value),\n          `Expecting a ${type}`,\n          value,\n          originalRest,\n        );\n        break;\n      case 'YieldExpression':\n        value = enf.enforestYieldExpression();\n        break;\n      case 'ClassExpression':\n        value = enf.enforestClass({ isExpr: true });\n        break;\n      case 'ArrowExpression':\n        value = enf.enforestArrowExpression();\n        break;\n      case 'NewExpression':\n        value = enf.enforestNewExpression();\n        break;\n      case 'ThisExpression':\n      case 'FunctionExpression':\n      case 'IdentifierExpression':\n      case 'LiteralNumericExpression':\n      case 'LiteralInfinityExpression':\n      case 'LiteralStringExpression':\n      case 'TemplateExpression':\n      case 'LiteralBooleanExpression':\n      case 'LiteralNullExpression':\n      case 'LiteralRegExpExpression':\n      case 'ObjectExpression':\n      case 'ArrayExpression':\n        value = enf.enforestPrimaryExpression();\n        break;\n      case 'UnaryExpression':\n      case 'UpdateExpression':\n      case 'BinaryExpression':\n      case 'StaticMemberExpression':\n      case 'ComputedMemberExpression':\n      case 'CompoundAssignmentExpression':\n      case 'ConditionalExpression':\n        value = enf.enforestExpressionLoop();\n        expect(\n          _.whereEq({ type }, value),\n          `Expecting a ${type}`,\n          value,\n          originalRest,\n        );\n        break;\n      default:\n        throw new Error('Unknown term type: ' + type);\n    }\n    return {\n      done: false,\n      value: value,\n    };\n  }\n\n  _rest(enf) {\n    const priv = privateData.get(this);\n    if (priv.markers.get(priv.startMarker) === enf) {\n      return priv.enf.rest;\n    }\n    throw Error('Unauthorized access!');\n  }\n\n  reset(marker) {\n    const priv = privateData.get(this);\n    let enf;\n    if (marker == null) {\n      // go to the beginning\n      enf = priv.markers.get(priv.startMarker);\n    } else if (marker && marker instanceof Marker) {\n      // marker could be from another context\n      if (priv.markers.has(marker)) {\n        enf = priv.markers.get(marker);\n      } else {\n        throw new Error('marker must originate from this context');\n      }\n    } else {\n      throw new Error('marker must be an instance of Marker');\n    }\n    priv.enf = cloneEnforester(enf);\n  }\n\n  mark() {\n    const priv = privateData.get(this);\n    let marker;\n\n    // the idea here is that marking at the beginning shouldn't happen more than once.\n    // We can reuse startMarker.\n    if (priv.enf.rest === priv.markers.get(priv.startMarker).rest) {\n      marker = priv.startMarker;\n    } else if (priv.enf.rest.isEmpty()) {\n      // same reason as above\n      if (!priv.endMarker) priv.endMarker = new Marker();\n      marker = priv.endMarker;\n    } else {\n      //TODO(optimization/dubious): check that there isn't already a marker for this index?\n      marker = new Marker();\n    }\n    if (!priv.markers.has(marker)) {\n      priv.markers.set(marker, cloneEnforester(priv.enf));\n    }\n    return marker;\n  }\n\n  next() {\n    const {\n      enf,\n      noScopes,\n      useScope,\n      introducedScope,\n      context,\n    } = privateData.get(this);\n    if (enf.rest.size === 0) {\n      return {\n        done: true,\n        value: null,\n      };\n    }\n    let value = enf.advance();\n    if (!noScopes) {\n      value = value.reduce(\n        new ScopeReducer(\n          [\n            { scope: useScope, phase: ALL_PHASES, flip: false },\n            { scope: introducedScope, phase: ALL_PHASES, flip: true },\n          ],\n          context.bindings,\n        ),\n      );\n    }\n    return {\n      done: false,\n      value: value,\n    };\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/module-visitor.js":"// @flow\nimport { evalCompiletimeValue } from './load-syntax';\nimport * as _ from 'ramda';\nimport * as T from 'sweet-spec';\nimport * as S from './sweet-spec-utils';\nimport { gensym } from './symbol';\nimport { ModuleNamespaceTransform, CompiletimeTransform } from './transforms';\nimport { collectBindings } from './hygiene-utils';\nimport SweetModule from './sweet-module';\nimport { List } from 'immutable';\nimport SweetToShiftReducer from './sweet-to-shift-reducer';\nimport codegen, { FormattedCodeGen } from 'shift-codegen';\n\nimport type { Context } from './sweet-loader';\n\nexport function bindImports(\n  impTerm: T.ImportDeclaration,\n  exModule: SweetModule,\n  phase: any,\n  context: Context,\n) {\n  let names = [];\n  let phaseToBind = impTerm.forSyntax ? phase + 1 : phase;\n  if (impTerm.defaultBinding != null) {\n    let exportName = exModule.exportedNames.find(\n      exName => exName.exportedName.val() === '_default',\n    );\n    let name = impTerm.defaultBinding.name;\n    if (exportName != null) {\n      let newBinding = gensym('_default');\n      let toForward = exportName.exportedName;\n      context.bindings.addForward(name, toForward, newBinding, phaseToBind);\n      names.push(name);\n    }\n  }\n  if (impTerm.namedImports) {\n    impTerm.namedImports.forEach(specifier => {\n      let name = specifier.binding.name;\n      let exportName = exModule.exportedNames.find(\n        exName => exName.exportedName.val() === name.val(),\n      );\n      if (exportName != null) {\n        let newBinding = gensym(name.val());\n        let toForward = exportName.name\n          ? exportName.name\n          : exportName.exportedName;\n        context.bindings.addForward(name, toForward, newBinding, phaseToBind);\n        names.push(name);\n      }\n    });\n  }\n  if (impTerm.namespaceBinding) {\n    let name = impTerm.namespaceBinding.name;\n    let newBinding = gensym(name.val());\n    context.store.set(\n      newBinding.toString(),\n      new ModuleNamespaceTransform(name, exModule),\n    );\n    context.bindings.add(name, {\n      binding: newBinding,\n      phase: phaseToBind,\n      skipDup: false,\n    });\n\n    names.push(name);\n  }\n  return List(names);\n}\n\nexport default class {\n  context: Context;\n\n  constructor(context: Context) {\n    this.context = context;\n  }\n\n  visit(mod: SweetModule, phase: any, store: any) {\n    mod.imports.forEach(imp => {\n      if (imp.forSyntax) {\n        let mod = this.context.loader.get(\n          imp.moduleSpecifier.val(),\n          phase + 1,\n          '',\n        );\n        this.visit(mod, phase + 1, store);\n        this.invoke(mod, phase + 1, store);\n      } else {\n        let mod = this.context.loader.get(imp.moduleSpecifier.val(), phase, '');\n        this.visit(mod, phase, store);\n      }\n      bindImports(imp, mod, phase, this.context);\n    });\n    for (let term of mod.compiletimeItems()) {\n      if (S.isSyntaxDeclarationStatement(term)) {\n        this.registerSyntaxDeclaration(term.declaration, phase, store);\n      }\n    }\n    return store;\n  }\n\n  invoke(mod: any, phase: any, store: any) {\n    mod.imports.forEach(imp => {\n      if (!imp.forSyntax) {\n        let mod = this.context.loader.get(imp.moduleSpecifier.val(), phase, '');\n        this.invoke(mod, phase, store);\n        bindImports(imp, mod, phase, this.context);\n      }\n    });\n    let items = mod.runtimeItems();\n    for (let term of items) {\n      if (S.isVariableDeclarationStatement(term)) {\n        this.registerVariableDeclaration(term.declaration, phase, store);\n      } else if (S.isFunctionDeclaration(term)) {\n        this.registerFunctionOrClass(term, phase, store);\n      }\n    }\n    let parsed = new T.Module({\n      directives: List(),\n      items,\n    }).reduce(new SweetToShiftReducer(phase));\n\n    let gen = codegen(parsed, new FormattedCodeGen());\n    let result = this.context.transform(gen);\n\n    this.context.loader.eval(result.code, store);\n    return store;\n  }\n\n  registerSyntaxDeclaration(\n    term: T.VariableDeclarationStatement,\n    phase: any,\n    store: any,\n  ) {\n    term.declarators.forEach(decl => {\n      let val = evalCompiletimeValue(\n        decl.init,\n        _.merge(this.context, {\n          phase: phase + 1,\n          store,\n        }),\n      );\n\n      collectBindings(decl.binding).forEach(stx => {\n        if (phase !== 0) {\n          // phase 0 bindings extend the binding map during compilation\n          let newBinding = gensym(stx.val());\n          this.context.bindings.add(stx, {\n            binding: newBinding,\n            phase: phase,\n            skipDup: false,\n          });\n        }\n        let resolvedName = stx.resolve(phase);\n        store.set(\n          resolvedName,\n          new CompiletimeTransform({ type: 'syntax', f: val }),\n        );\n      });\n    });\n  }\n\n  registerVariableDeclaration(term: any, phase: any, store: any) {\n    term.declarators.forEach(decl => {\n      collectBindings(decl.binding).forEach(stx => {\n        if (phase !== 0) {\n          // phase 0 bindings extend the binding map during compilation\n          let newBinding = gensym(stx.val());\n          this.context.bindings.add(stx, {\n            binding: newBinding,\n            phase: phase,\n            skipDup: term.kind === 'var',\n          });\n        }\n      });\n    });\n  }\n\n  registerFunctionOrClass(term: any, phase: any, store: any) {\n    collectBindings(term.name).forEach(stx => {\n      if (phase !== 0) {\n        let newBinding = gensym(stx.val());\n        this.context.bindings.add(stx, {\n          binding: newBinding,\n          phase: phase,\n          skipDup: false,\n        });\n      }\n    });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/node-loader.js":"// @flow\nimport SweetLoader, { phaseInModulePathRegexp } from './sweet-loader';\nimport { readFileSync } from 'fs';\nimport { dirname } from 'path';\nimport resolve from 'resolve';\nimport vm from 'vm';\nimport Store from './store';\nimport type { LoaderOptions } from './sweet-loader';\n\ntype NodeLoaderOptions = LoaderOptions & { extensions?: Array<string> };\n\nexport default class NodeLoader extends SweetLoader {\n  extensions: Array<string>;\n\n  constructor(baseDir: string, options: NodeLoaderOptions = {}) {\n    super(baseDir, options);\n    this.extensions = options.extensions || [];\n  }\n\n  normalize(name: string, refererName?: string, refererAddress?: string) {\n    let normName = super.normalize(name, refererName, refererAddress);\n    let match = normName.match(phaseInModulePathRegexp);\n    if (match && match.length >= 3) {\n      let resolvedName = resolve.sync(match[1], {\n        basedir: refererName ? dirname(refererName) : this.baseDir,\n        extensions: this.extensions ? this.extensions : ['.js'],\n      });\n      return `${resolvedName}:${match[2]}`;\n    }\n    throw new Error(`Module ${name} is missing phase information`);\n  }\n\n  fetch(\n    {\n      name,\n      address,\n      metadata,\n    }: { name: string, address: { path: string, phase: number }, metadata: {} },\n  ) {\n    let src = this.sourceCache.get(address.path);\n    if (src != null) {\n      return src;\n    } else {\n      src = readFileSync(address.path, 'utf8');\n      this.sourceCache.set(address.path, src);\n      return src;\n    }\n  }\n\n  freshStore() {\n    let sandbox = {\n      process: global.process,\n      console: global.console,\n    };\n    return new Store(vm.createContext(sandbox));\n  }\n\n  eval(source: string, store: Store) {\n    return vm.runInContext(source, store.getBackingObject());\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/node-module-loader.js":"import { readFileSync } from 'fs';\n\nexport default function moduleLoader(path) {\n  try {\n    return readFileSync(path, 'utf8');\n  } catch (e) {\n    return '';\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/node-module-resolver.js":"import resolve from 'resolve';\n\nexport default function resolveModule(path, cwd) {\n  return resolve.sync(path, { basedir: cwd });\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/operators.js":"const unaryOperators = {\n  '+': true,\n  '-': true,\n  '!': true,\n  '~': true,\n  '++': true,\n  '--': true,\n  typeof: true,\n  void: true,\n  delete: true,\n};\nconst binaryOperatorPrecedence = {\n  '*': 14,\n  '/': 14,\n  '%': 14,\n  '+': 13,\n  '-': 13,\n  '>>': 12,\n  '<<': 12,\n  '>>>': 12,\n  '<': 11,\n  '<=': 11,\n  '>': 11,\n  '>=': 11,\n  in: 11,\n  instanceof: 11,\n  '==': 10,\n  '!=': 10,\n  '===': 10,\n  '!==': 10,\n  '&': 9,\n  '^': 8,\n  '|': 7,\n  '&&': 6,\n  '||': 5,\n};\n\nvar operatorAssoc = {\n  '*': 'left',\n  '/': 'left',\n  '%': 'left',\n  '+': 'left',\n  '-': 'left',\n  '>>': 'left',\n  '<<': 'left',\n  '>>>': 'left',\n  '<': 'left',\n  '<=': 'left',\n  '>': 'left',\n  '>=': 'left',\n  in: 'left',\n  instanceof: 'left',\n  '==': 'left',\n  '!=': 'left',\n  '===': 'left',\n  '!==': 'left',\n  '&': 'left',\n  '^': 'left',\n  '|': 'left',\n  '&&': 'left',\n  '||': 'left',\n};\n\nexport function operatorLt(left, right, assoc) {\n  if (assoc === 'left') {\n    return left < right;\n  } else {\n    return left <= right;\n  }\n}\n\nexport function getOperatorPrec(op) {\n  return binaryOperatorPrecedence[op];\n}\nexport function getOperatorAssoc(op) {\n  return operatorAssoc[op];\n}\n\nexport function isUnaryOperator(op) {\n  return (op.match('punctuator') ||\n    op.match('identifier') ||\n    op.match('keyword')) &&\n    unaryOperators.hasOwnProperty(op.val());\n}\n\nexport function isOperator(op) {\n  if (op.match('punctuator') || op.match('identifier') || op.match('keyword')) {\n    return binaryOperatorPrecedence.hasOwnProperty(op) ||\n      unaryOperators.hasOwnProperty(op.val());\n  }\n  return false;\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/scope-reducer.js":"// @flow\nimport Term, * as S from 'sweet-spec';\nimport type Syntax from './syntax';\nimport type { SymbolClass } from './symbol';\nimport type BindingMap from './binding-map';\n\nexport default class extends Term.CloneReducer {\n  scopes: Array<{ scope: SymbolClass, phase: number | {}, flip: boolean }>;\n  bindings: BindingMap;\n\n  constructor(\n    scopes: Array<{ scope: SymbolClass, phase: number | {}, flip: boolean }>,\n    bindings: BindingMap,\n  ) {\n    super();\n    this.scopes = scopes;\n    this.bindings = bindings;\n  }\n\n  applyScopes(s: Syntax) {\n    return this.scopes.reduce(\n      (acc, sc) => {\n        return acc.addScope(sc.scope, this.bindings, sc.phase, {\n          flip: sc.flip,\n        });\n      },\n      s,\n    );\n  }\n\n  reduceBindingIdentifier(t: Term, s: { name: Syntax }) {\n    return new S.BindingIdentifier({\n      name: this.applyScopes(s.name),\n    });\n  }\n\n  reduceIdentifierExpression(t: Term, s: { name: Syntax }) {\n    return new S.IdentifierExpression({\n      name: this.applyScopes(s.name),\n    });\n  }\n\n  reduceRawSyntax(t: Term, s: { value: Syntax }) {\n    // TODO: fix this once reading tokens is reasonable\n    if (s.value.isTemplate() && s.value.items) {\n      s.value.token.items = s.value.token.items.map(t => {\n        if (t instanceof Term) {\n          return t.reduce(this);\n        }\n        return t;\n      });\n    }\n    return new S.RawSyntax({\n      value: this.applyScopes(s.value),\n    });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/scope.js":"// @flow\nimport { Symbol } from './symbol';\n\nlet scopeIndex = 0;\n\nexport function freshScope(name: string = 'scope') {\n  scopeIndex++;\n  return Symbol(name + '_' + scopeIndex);\n}\n\nexport function Scope(name: string) {\n  return Symbol(name);\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/store-loader.js":"// @flow\nimport SweetLoader from './sweet-loader';\nimport vm from 'vm';\nimport Store from './store';\n\nexport default class extends SweetLoader {\n  store: Map<string, string>;\n\n  constructor(\n    baseDir: string,\n    store: Map<string, string>,\n    noBabel: boolean = false,\n  ) {\n    super(baseDir, { noBabel });\n    this.store = store;\n  }\n\n  fetch({ name, address }: { name: string, address: any }) {\n    if (this.store.has(address.path)) {\n      return this.store.get(address.path);\n    }\n    throw new Error(\n      `The module ${name} is not in the debug store: addr.path is ${address.path}`,\n    );\n  }\n\n  freshStore() {\n    return new Store(vm.createContext());\n  }\n\n  eval(source: string, store: Store) {\n    return vm.runInContext(source, store.getBackingObject());\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/store.js":"export default class Store extends Map {\n  constructor(backingObject) {\n    super();\n    this.backingObject = backingObject;\n  }\n\n  set(key, val) {\n    super.set(key, val);\n    this.backingObject[key] = val;\n  }\n\n  getBackingObject() {\n    return this.backingObject;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/sweet-module.js":"// @flow\nimport * as T from 'sweet-spec';\nimport * as _ from 'ramda';\nimport * as S from './sweet-spec-utils';\nimport codegen from './codegen';\nimport { List } from 'immutable';\nimport SweetToShiftReducer from './sweet-to-shift-reducer.js';\nimport Syntax from './syntax';\n\nconst extractDeclaration = _.cond([\n  [S.isExport, _.prop('declaration')],\n  [S.isExportDefault, _.prop('body')],\n  [\n    _.T,\n    term => {\n      throw new Error(`Expecting an Export or ExportDefault but got ${term}`);\n    },\n  ],\n]);\n\nconst ExpSpec = x => ({ exportedName: x });\n\nconst extractDeclarationNames = _.cond([\n  [S.isVariableDeclarator, ({ binding }) => List.of(ExpSpec(binding.name))],\n  [\n    S.isVariableDeclaration,\n    ({ declarators }) => declarators.flatMap(extractDeclarationNames),\n  ],\n  [S.isFunctionDeclaration, ({ name }) => List.of(ExpSpec(name.name))],\n  [S.isClassDeclaration, ({ name }) => List.of(ExpSpec(name.name))],\n]);\n\ntype ExportSpecifier = {\n  name?: Syntax,\n  exportedName: Syntax,\n};\n\nfunction extractNames(term: T.ExportDeclaration): List<ExportSpecifier> {\n  if (S.isExport(term)) {\n    return extractDeclarationNames(term.declaration);\n  } else if (S.isExportDefault(term)) {\n    return List();\n  } else if (S.isExportFrom(term)) {\n    return term.namedExports;\n  }\n  throw new Error(`Unknown export type`);\n}\n\nfunction wrapStatement(declaration: T.Term) {\n  if (S.isVariableDeclaration(declaration)) {\n    return new T.VariableDeclarationStatement({ declaration });\n  }\n  return declaration;\n}\n\nconst memoSym = Symbol('memo');\n\nfunction makeVarDeclStmt(name: T.BindingIdentifier, expr: T.Expression) {\n  return new T.VariableDeclarationStatement({\n    declaration: new T.VariableDeclaration({\n      kind: 'var',\n      declarators: List.of(\n        new T.VariableDeclarator({\n          binding: name,\n          init: expr,\n        }),\n      ),\n    }),\n  });\n}\n\nexport default class SweetModule {\n  items: List<T.Term>;\n  imports: List<T.ImportDeclaration>;\n  exports: List<T.ExportDeclaration>;\n  exportedNames: List<ExportSpecifier>;\n\n  runtime: List<T.Term>;\n  compiletime: List<T.Term>;\n\n  constructor(items: List<T.Term>) {\n    let body = [];\n    let imports = [];\n    let exports = [];\n    this.exportedNames = List();\n    for (let item of items) {\n      if (S.isImportDeclaration(item)) {\n        imports.push(item);\n      } else if (S.isExportDeclaration(item)) {\n        exports.push(item);\n        this.exportedNames = this.exportedNames.concat(extractNames(item));\n        if (S.isExport(item)) {\n          body.push(wrapStatement(extractDeclaration(item)));\n        } else if (S.isExportDefault(item)) {\n          let decl = extractDeclaration(item);\n          let defStx = Syntax.fromIdentifier('_default');\n          let def = new T.BindingIdentifier({\n            name: defStx,\n          });\n          this.exportedNames = this.exportedNames.push(ExpSpec(defStx));\n          if (S.isFunctionDeclaration(decl) || S.isClassDeclaration(decl)) {\n            body.push(decl);\n            // extract name and bind it to _default\n            body.push(\n              makeVarDeclStmt(\n                def,\n                new T.IdentifierExpression({ name: decl.name.name }),\n              ),\n            );\n          } else {\n            // expression so bind it to _default\n            body.push(makeVarDeclStmt(def, decl));\n          }\n        }\n      } else {\n        body.push(item);\n      }\n    }\n    this.items = List(body);\n    this.imports = List(imports);\n    this.exports = List(exports);\n  }\n\n  // $FlowFixMe: flow doesn't support computed property keys yet\n  [memoSym]() {\n    let runtime = [], compiletime = [];\n    for (let item of this.items) {\n      if (S.isCompiletimeStatement(item)) {\n        compiletime.push(item);\n      } else {\n        runtime.push(item);\n      }\n    }\n    this.runtime = List(runtime);\n    this.compiletime = List(compiletime);\n  }\n\n  runtimeItems() {\n    if (this.runtime == null) {\n      // $FlowFixMe: flow doesn't support computed property keys yet\n      this[memoSym]();\n    }\n    return this.runtime;\n  }\n\n  compiletimeItems() {\n    if (this.compiletime == null) {\n      // $FlowFixMe: flow doesn't support computed property keys yet\n      this[memoSym]();\n    }\n    return this.compiletime;\n  }\n\n  parse() {\n    return new T.Module({\n      items: this.items,\n      directives: List(),\n    }).reduce(new SweetToShiftReducer(0));\n  }\n\n  codegen() {\n    return codegen(this.parse()).code;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/sweet-spec-utils.js":"// @flow\n\nimport * as T from 'sweet-spec';\nimport * as _ from 'ramda';\n\nexport const isImportDeclaration = _.is(T.ImportDeclaration);\n\nexport const isExportDeclaration = _.is(T.ExportDeclaration);\nexport const isExport = _.is(T.Export);\nexport const isExportDefault = _.is(T.ExportDefault);\nexport const isExportFrom = _.is(T.ExportFrom);\n\nexport const isVariableDeclaration = _.is(T.VariableDeclaration);\nexport const isVariableDeclarator = _.is(T.VariableDeclarator);\nexport const isSyntaxVariableDeclartion = _.both(\n  isVariableDeclaration,\n  _.either(_.propEq('kind', 'syntax'), _.propEq('kind', 'syntaxrec')),\n);\n\nexport const isVariableDeclarationStatement = _.is(\n  T.VariableDeclarationStatement,\n);\nexport const isSyntaxDeclarationStatement = (term: any) => {\n  // syntax m = ...\n  // syntaxrec m = ...\n  return isVariableDeclarationStatement(term) &&\n    isSyntaxVariableDeclartion(term.declaration);\n};\n\nexport const isCompiletimeStatement = isSyntaxDeclarationStatement;\n\nexport const isFunctionDeclaration = _.is(T.FunctionDeclaration);\nexport const isClassDeclaration = _.is(T.ClassDeclaration);\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/sweet-to-shift-reducer.js":"// @flow\nimport Term, * as S from 'sweet-spec';\nimport { complement } from 'ramda';\nimport { List } from 'immutable';\n\nimport { isEmptyStatement } from './terms';\n\nimport type Syntax from './syntax.js';\n\nconst notEmptyStatement = complement(isEmptyStatement);\n\nexport default class extends Term.CloneReducer {\n  phase: number;\n\n  constructor(phase: number) {\n    super();\n    this.phase = phase;\n  }\n\n  reduceModule(t: Term, s: { directives: List<any>, items: List<any> }) {\n    return new S.Module({\n      directives: s.directives.toArray(),\n      items: s.items.toArray().filter(notEmptyStatement),\n    });\n  }\n\n  reduceIdentifierExpression(t: Term, s: { name: Syntax }) {\n    return new S.IdentifierExpression({\n      name: s.name.resolve(this.phase),\n    });\n  }\n\n  reduceStaticPropertyName(t: Term, s: { value: Syntax }) {\n    return new S.StaticPropertyName({\n      value: s.value.val().toString(),\n    });\n  }\n\n  reduceBindingIdentifier(t: Term, s: { name: Syntax }) {\n    return new S.BindingIdentifier({\n      name: s.name.resolve(this.phase),\n    });\n  }\n\n  reduceStaticMemberExpression(t: Term, s: { object: any, property: Syntax }) {\n    return new S.StaticMemberExpression({\n      object: s.object,\n      property: s.property.val(),\n    });\n  }\n\n  reduceFunctionBody(\n    t: Term,\n    s: { statements: List<any>, directives: List<any> },\n  ) {\n    return new S.FunctionBody({\n      directives: s.directives.toArray(),\n      statements: s.statements.toArray().filter(notEmptyStatement),\n    });\n  }\n\n  reduceVariableDeclarationStatement(t: Term, s: { declaration: any }) {\n    if (\n      t.declaration.kind === 'syntax' ||\n      t.declaration.kind === 'syntaxrec' ||\n      t.declaration.kind === 'operator'\n    ) {\n      return new S.EmptyStatement();\n    }\n    return new S.VariableDeclarationStatement({\n      declaration: s.declaration,\n    });\n  }\n\n  reduceVariableDeclaration(t: Term, s: { kind: any, declarators: List<any> }) {\n    return new S.VariableDeclaration({\n      kind: s.kind,\n      declarators: s.declarators.toArray(),\n    });\n  }\n\n  reduceCallExpression(t: Term, s: { callee: any, arguments: List<any> }) {\n    return new S.CallExpression({\n      callee: s.callee,\n      arguments: s.arguments.toArray(),\n    });\n  }\n\n  reduceArrayExpression(t: Term, s: { elements: List<any> }) {\n    return new S.ArrayExpression({\n      elements: s.elements.toArray(),\n    });\n  }\n\n  reduceImport() {\n    return new S.EmptyStatement({});\n  }\n\n  reduceBlock(t: Term, s: { statements: List<any> }) {\n    return new S.Block({\n      statements: s.statements.toArray().filter(notEmptyStatement),\n    });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/symbol.js":"// @flow\nlet internedMap: Map<string, Symbol> = new Map();\n\nlet counter = 0;\n\nexport function gensym(name: string) {\n  let prefix = name == null ? 's_' : name + '_';\n  let sym = new Symbol(prefix + counter);\n  counter++;\n  return sym;\n}\n\nclass Symbol {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n  toString() {\n    return this.name;\n  }\n}\n\nfunction makeSymbol(name: string): Symbol {\n  let s = internedMap.get(name);\n  if (s) {\n    return s;\n  } else {\n    let sym = new Symbol(name);\n    internedMap.set(name, sym);\n    return sym;\n  }\n}\n\nexport { makeSymbol as Symbol, Symbol as SymbolClass };\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/syntax.js":"// @flow\nimport { List, Map } from 'immutable';\nimport { assert } from './errors';\nimport BindingMap from './binding-map';\nimport { Maybe } from 'ramda-fantasy';\nimport * as _ from 'ramda';\nimport * as T from 'sweet-spec';\n\nimport { TokenType, TokenClass, TypeCodes } from './tokens';\n\ntype Token = {\n  type: any,\n  value: any,\n  slice: any,\n};\n\ntype TokenTag =\n  | 'null'\n  | 'number'\n  | 'string'\n  | 'punctuator'\n  | 'keyword'\n  | 'identifier'\n  | 'regularExpression'\n  | 'boolean'\n  | 'braces'\n  | 'parens'\n  | 'delimiter'\n  | 'eof'\n  | 'template'\n  | 'assign'\n  | 'syntaxTemplate'\n  | 'brackets';\n\nfunction getFirstSlice(stx: ?Syntax) {\n  if (!stx || typeof stx.isDelimiter !== 'function') return null; // TODO: should not have to do this\n  if (!stx.isDelimiter()) {\n    return stx.token.slice;\n  }\n  return stx.token.get(0).token.slice;\n}\n\nfunction sizeDecending(a, b) {\n  if (a.scopes.size > b.scopes.size) {\n    return -1;\n  } else if (b.scopes.size > a.scopes.size) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\ntype TypesHelper = {\n  [key: TokenTag]: {\n    match(token: any): boolean,\n    create?: (value: any, stx: ?Syntax) => Syntax,\n  },\n};\n\nexport let Types: TypesHelper = {\n  null: {\n    match: token =>\n      !Types.delimiter.match(token) && token.type === TokenType.NULL,\n    create: (value, stx) =>\n      new Syntax(\n        {\n          type: TokenType.NULL,\n          value: null,\n          typeCode: TypeCodes.Keyword,\n        },\n        stx,\n      ),\n  },\n  number: {\n    match: token =>\n      !Types.delimiter.match(token) &&\n      token.type.klass === TokenClass.NumericLiteral,\n    create: (value, stx) =>\n      new Syntax(\n        {\n          type: TokenType.NUMBER,\n          value,\n          typeCode: TypeCodes.NumericLiteral,\n        },\n        stx,\n      ),\n  },\n  string: {\n    match: token =>\n      !Types.delimiter.match(token) &&\n      token.type.klass === TokenClass.StringLiteral,\n    create: (value, stx) =>\n      new Syntax(\n        {\n          type: TokenType.STRING,\n          str: value,\n          typeCode: TypeCodes.StringLiteral,\n        },\n        stx,\n      ),\n  },\n  punctuator: {\n    match: token =>\n      !Types.delimiter.match(token) &&\n      token.type.klass === TokenClass.Punctuator,\n    create: (value, stx) =>\n      new Syntax(\n        {\n          type: {\n            klass: TokenClass.Punctuator,\n            name: value,\n          },\n          typeCode: TypeCodes.Punctuator,\n          value,\n        },\n        stx,\n      ),\n  },\n  keyword: {\n    match: token =>\n      !Types.delimiter.match(token) && token.type.klass === TokenClass.Keyword,\n    create: (value, stx) =>\n      new Syntax(\n        {\n          type: {\n            klass: TokenClass.Keyword,\n            name: value,\n          },\n          typeCode: TypeCodes.Keyword,\n          value,\n        },\n        stx,\n      ),\n  },\n  identifier: {\n    match: token =>\n      !Types.delimiter.match(token) && token.type.klass === TokenClass.Ident,\n    create: (value, stx) =>\n      new Syntax(\n        {\n          type: TokenType.IDENTIFIER,\n          value,\n          typeCode: TypeCodes.Identifier,\n        },\n        stx,\n      ),\n  },\n  regularExpression: {\n    match: token =>\n      !Types.delimiter.match(token) &&\n      token.type.klass === TokenClass.RegularExpression,\n    create: (value, stx) =>\n      new Syntax(\n        {\n          type: TokenType.REGEXP,\n          value,\n          typeCode: TypeCodes.RegExp,\n        },\n        stx,\n      ),\n  },\n  braces: {\n    match: token =>\n      Types.delimiter.match(token) &&\n      token.get(0).token.type === TokenType.LBRACE,\n    create: (inner, stx) => {\n      let left = new T.RawSyntax({\n        value: new Syntax({\n          type: TokenType.LBRACE,\n          typeCode: TypeCodes.Punctuator,\n          value: '{',\n          slice: getFirstSlice(stx),\n        }),\n      });\n      let right = new T.RawSyntax({\n        value: new Syntax({\n          type: TokenType.RBRACE,\n          typeCode: TypeCodes.Punctuator,\n          value: '}',\n          slice: getFirstSlice(stx),\n        }),\n      });\n      return new T.RawDelimiter({\n        kind: 'braces',\n        inner: List.of(left).concat(inner).push(right),\n      });\n    },\n  },\n  brackets: {\n    match: token =>\n      Types.delimiter.match(token) &&\n      token.get(0).token.type === TokenType.LBRACK,\n    create: (inner, stx) => {\n      let left = new T.RawSyntax({\n        value: new Syntax({\n          type: TokenType.LBRACK,\n          typeCode: TypeCodes.Punctuator,\n          value: '[',\n          slice: getFirstSlice(stx),\n        }),\n      });\n      let right = new T.RawSyntax({\n        value: new Syntax({\n          type: TokenType.RBRACK,\n          typeCode: TypeCodes.Punctuator,\n          value: ']',\n          slice: getFirstSlice(stx),\n        }),\n      });\n      return new T.RawDelimiter({\n        kind: 'brackets',\n        inner: List.of(left).concat(inner).push(right),\n      });\n    },\n  },\n  parens: {\n    match: token =>\n      Types.delimiter.match(token) &&\n      token.get(0).token.type === TokenType.LPAREN,\n    create: (inner, stx) => {\n      let left = new T.RawSyntax({\n        value: new Syntax({\n          type: TokenType.LPAREN,\n          typeCode: TypeCodes.Punctuator,\n          value: '(',\n          slice: getFirstSlice(stx),\n        }),\n      });\n      let right = new T.RawSyntax({\n        value: new Syntax({\n          type: TokenType.RPAREN,\n          typeCode: TypeCodes.Punctuator,\n          value: ')',\n          slice: getFirstSlice(stx),\n        }),\n      });\n      return new T.RawDelimiter({\n        kind: 'parens',\n        inner: List.of(left).concat(inner).push(right),\n      });\n    },\n  },\n\n  assign: {\n    match: token => {\n      if (Types.punctuator.match(token)) {\n        switch (token.value) {\n          case '=':\n          case '|=':\n          case '^=':\n          case '&=':\n          case '<<=':\n          case '>>=':\n          case '>>>=':\n          case '+=':\n          case '-=':\n          case '*=':\n          case '/=':\n          case '%=':\n            return true;\n          default:\n            return false;\n        }\n      }\n      return false;\n    },\n  },\n\n  boolean: {\n    match: token =>\n      (!Types.delimiter.match(token) && token.type === TokenType.TRUE) ||\n      token.type === TokenType.FALSE,\n  },\n\n  template: {\n    match: token =>\n      !Types.delimiter.match(token) && token.type === TokenType.TEMPLATE,\n  },\n\n  delimiter: {\n    match: token => List.isList(token),\n  },\n\n  syntaxTemplate: {\n    match: token => Types.delimiter.match(token) && token.get(0).val() === '#`',\n  },\n\n  eof: {\n    match: token =>\n      !Types.delimiter.match(token) && token.type === TokenType.EOS,\n  },\n};\nexport const ALL_PHASES = {};\n\ntype Scopeset = {\n  all: List<any>,\n  phase: Map<number | {}, any>,\n};\n\nexport default class Syntax {\n  // token: Token | List<Token>;\n  token: any;\n  bindings: BindingMap;\n  scopesets: Scopeset;\n\n  constructor(token: any, oldstx: ?{ bindings: any, scopesets: any }) {\n    this.token = token;\n    this.bindings = oldstx && oldstx.bindings != null\n      ? oldstx.bindings\n      : new BindingMap();\n    this.scopesets = oldstx && oldstx.scopesets != null\n      ? oldstx.scopesets\n      : {\n          all: List(),\n          phase: Map(),\n        };\n    Object.freeze(this);\n  }\n\n  static of(token: Token, stx: ?Syntax) {\n    return new Syntax(token, stx);\n  }\n\n  static from(type, value, stx: ?Syntax) {\n    if (!Types[type]) {\n      throw new Error(type + ' is not a valid type');\n    } else if (!Types[type].create) {\n      throw new Error('Cannot create a syntax from type ' + type);\n    }\n    let newstx = Types[type].create(value, stx);\n    let slice = getFirstSlice(stx);\n    if (slice != null && newstx.token != null) {\n      newstx.token.slice = slice;\n    }\n    return newstx;\n  }\n\n  from(type: TokenTag, value: any) {\n    // TODO: this is gross, fix\n    let s = Syntax.from(type, value, this);\n    if (s instanceof Syntax) {\n      return new T.RawSyntax({ value: s });\n    }\n    return s;\n  }\n\n  fromNull() {\n    return this.from('null', null);\n  }\n\n  fromNumber(value: number) {\n    return this.from('number', value);\n  }\n\n  fromString(value: string) {\n    return this.from('string', value);\n  }\n\n  fromPunctuator(value: string) {\n    return this.from('punctuator', value);\n  }\n\n  fromKeyword(value: string) {\n    return this.from('keyword', value);\n  }\n\n  fromIdentifier(value: string) {\n    return this.from('identifier', value);\n  }\n\n  fromRegularExpression(value: any) {\n    return this.from('regularExpression', value);\n  }\n\n  static fromNull(stx: Syntax) {\n    return Syntax.from('null', null, stx);\n  }\n\n  static fromNumber(value, stx) {\n    return Syntax.from('number', value, stx);\n  }\n\n  static fromString(value, stx) {\n    return Syntax.from('string', value, stx);\n  }\n\n  static fromPunctuator(value, stx) {\n    return Syntax.from('punctuator', value, stx);\n  }\n\n  static fromKeyword(value, stx) {\n    return Syntax.from('keyword', value, stx);\n  }\n\n  static fromIdentifier(value, stx) {\n    return Syntax.from('identifier', value, stx);\n  }\n\n  static fromRegularExpression(value, stx) {\n    return Syntax.from('regularExpression', value, stx);\n  }\n\n  // () -> string\n  resolve(phase: any) {\n    assert(phase != null, 'must provide a phase to resolve');\n    let allScopes = this.scopesets.all;\n    let stxScopes = this.scopesets.phase.has(phase)\n      ? this.scopesets.phase.get(phase)\n      : List();\n    stxScopes = allScopes.concat(stxScopes);\n    if (\n      stxScopes.size === 0 ||\n      !(this.match('identifier') ||\n        this.match('keyword') ||\n        this.match('punctuator'))\n    ) {\n      return this.token.value;\n    }\n    let scope = stxScopes.last();\n    let bindings = this.bindings;\n    if (scope) {\n      // List<{ scopes: List<Scope>, binding: Symbol }>\n      let scopesetBindingList = bindings.get(this);\n\n      if (scopesetBindingList) {\n        // { scopes: List<Scope>, binding: Symbol }\n        let biggestBindingPair = scopesetBindingList\n          .filter(({ scopes }) => {\n            return scopes.isSubset(stxScopes);\n          })\n          .sort(sizeDecending);\n\n        if (\n          biggestBindingPair.size >= 2 &&\n          biggestBindingPair.get(0).scopes.size ===\n            biggestBindingPair.get(1).scopes.size\n        ) {\n          let debugBase = '{' +\n            stxScopes.map(s => s.toString()).join(', ') +\n            '}';\n          let debugAmbigousScopesets = biggestBindingPair\n            .map(({ scopes }) => {\n              return '{' + scopes.map(s => s.toString()).join(', ') + '}';\n            })\n            .join(', ');\n          throw new Error(\n            'Scopeset ' +\n              debugBase +\n              ' has ambiguous subsets ' +\n              debugAmbigousScopesets,\n          );\n        } else if (biggestBindingPair.size !== 0) {\n          let bindingStr = biggestBindingPair.get(0).binding.toString();\n          if (Maybe.isJust(biggestBindingPair.get(0).alias)) {\n            // null never happens because we just checked if it is a Just\n            return biggestBindingPair\n              .get(0)\n              .alias.getOrElse(null)\n              .resolve(phase);\n          }\n          return bindingStr;\n        }\n      }\n    }\n    return this.token.value;\n  }\n\n  val(): any {\n    assert(!this.match('delimiter'), 'cannot get the val of a delimiter');\n    if (this.match('string')) {\n      return this.token.str;\n    }\n    if (this.match('template')) {\n      if (!this.token.items) return this.token.value;\n      return this.token.items\n        .map(el => {\n          if (typeof el.match === 'function' && el.match('delimiter')) {\n            return '${...}';\n          }\n          return el.slice.text;\n        })\n        .join('');\n    }\n    return this.token.value;\n  }\n\n  lineNumber() {\n    if (!this.match('delimiter')) {\n      return this.token.slice.startLocation.line;\n    } else {\n      return this.token.get(0).lineNumber();\n    }\n  }\n\n  setLineNumber(line: number) {\n    let newTok = {};\n    if (this.isDelimiter()) {\n      newTok = this.token.map(s => s.setLineNumber(line));\n    } else {\n      for (let key of Object.keys(this.token)) {\n        newTok[key] = this.token[key];\n      }\n      assert(\n        newTok.slice && newTok.slice.startLocation,\n        'all tokens must have line info',\n      );\n      newTok.slice.startLocation.line = line;\n    }\n    return new Syntax(newTok, this);\n  }\n\n  // () -> List<Syntax>\n  // inner() {\n  //   assert(this.match(\"delimiter\"), \"can only get the inner of a delimiter\");\n  //   return this.token.slice(1, this.token.size - 1);\n  // }\n\n  addScope(\n    scope: any,\n    bindings: any,\n    phase: number | {},\n    options: any = { flip: false },\n  ) {\n    let token = this.match('delimiter')\n      ? this.token.map(s => s.addScope(scope, bindings, phase, options))\n      : this.token;\n    if (this.match('template')) {\n      token = _.merge(token, {\n        items: token.items.map(it => {\n          if (it instanceof Syntax && it.match('delimiter')) {\n            return it.addScope(scope, bindings, phase, options);\n          }\n          return it;\n        }),\n      });\n    }\n    let oldScopeset;\n    if (phase === ALL_PHASES) {\n      oldScopeset = this.scopesets.all;\n    } else {\n      oldScopeset = this.scopesets.phase.has(phase)\n        ? this.scopesets.phase.get(phase)\n        : List();\n    }\n    let newScopeset;\n    if (options.flip) {\n      let index = oldScopeset.indexOf(scope);\n      if (index !== -1) {\n        newScopeset = oldScopeset.remove(index);\n      } else {\n        newScopeset = oldScopeset.push(scope);\n      }\n    } else {\n      newScopeset = oldScopeset.push(scope);\n    }\n    let newstx = {\n      bindings,\n      scopesets: {\n        all: this.scopesets.all,\n        phase: this.scopesets.phase,\n      },\n    };\n\n    if (phase === ALL_PHASES) {\n      newstx.scopesets.all = newScopeset;\n    } else {\n      newstx.scopesets.phase = newstx.scopesets.phase.set(phase, newScopeset);\n    }\n    return new Syntax(token, newstx);\n  }\n\n  removeScope(scope: any, phase: number) {\n    let token = this.match('delimiter')\n      ? this.token.map(s => s.removeScope(scope, phase))\n      : this.token;\n    let phaseScopeset = this.scopesets.phase.has(phase)\n      ? this.scopesets.phase.get(phase)\n      : List();\n    let allScopeset = this.scopesets.all;\n    let newstx = {\n      bindings: this.bindings,\n      scopesets: {\n        all: this.scopesets.all,\n        phase: this.scopesets.phase,\n      },\n    };\n\n    let phaseIndex = phaseScopeset.indexOf(scope);\n    let allIndex = allScopeset.indexOf(scope);\n    if (phaseIndex !== -1) {\n      newstx.scopesets.phase = this.scopesets.phase.set(\n        phase,\n        phaseScopeset.remove(phaseIndex),\n      );\n    } else if (allIndex !== -1) {\n      newstx.scopesets.all = allScopeset.remove(allIndex);\n    }\n    return new Syntax(token, newstx);\n  }\n\n  match(type: TokenTag, value: any) {\n    if (!Types[type]) {\n      throw new Error(type + ' is an invalid type');\n    }\n    return Types[type].match(this.token) &&\n      (value == null ||\n        (value instanceof RegExp\n          ? value.test(this.val())\n          : this.val() == value));\n  }\n\n  isIdentifier(value: string) {\n    return this.match('identifier', value);\n  }\n\n  isAssign(value: string) {\n    return this.match('assign', value);\n  }\n\n  isBooleanLiteral(value: boolean) {\n    return this.match('boolean', value);\n  }\n\n  isKeyword(value: string) {\n    return this.match('keyword', value);\n  }\n\n  isNullLiteral(value: any) {\n    return this.match('null', value);\n  }\n\n  isNumericLiteral(value: number) {\n    return this.match('number', value);\n  }\n\n  isPunctuator(value: string) {\n    return this.match('punctuator', value);\n  }\n\n  isStringLiteral(value: string) {\n    return this.match('string', value);\n  }\n\n  isRegularExpression(value: any) {\n    return this.match('regularExpression', value);\n  }\n\n  isTemplate(value: any) {\n    return this.match('template', value);\n  }\n\n  isDelimiter(value: any) {\n    return this.match('delimiter', value);\n  }\n\n  isParens(value: any) {\n    return this.match('parens', value);\n  }\n\n  isBraces(value: any) {\n    return this.match('braces', value);\n  }\n\n  isBrackets(value: any) {\n    return this.match('brackets', value);\n  }\n\n  isSyntaxTemplate(value: any) {\n    return this.match('syntaxTemplate', value);\n  }\n\n  isEOF(value: any) {\n    return this.match('eof', value);\n  }\n\n  toString() {\n    if (this.match('delimiter')) {\n      return this.token.map(s => s.toString()).join(' ');\n    }\n    if (this.match('string')) {\n      return `'${this.token.str}'`;\n    }\n    if (this.match('template')) {\n      return this.val();\n    }\n    return this.token.value;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/template-processor.js":"// @flow\nimport { List } from 'immutable';\nimport _ from 'ramda';\nimport { assert } from './errors';\nimport * as T from 'sweet-spec';\nimport Syntax from './syntax';\n\n/*\nGiven a syntax list like:\n\n  [foo, bar, $, { 42, +, 24 }, baz]\n\nconvert it to:\n\n  [foo, bar, $, { 0 }, baz]\n\nand return another list with the interpolated values at the corresponding\npositions.\n\nRequires either lookahead/lookbehind of one (to see the $).\n*/\n\nconst isDolar = (s: T.SyntaxTerm) =>\n  s instanceof T.RawSyntax &&\n  typeof s.value.match === 'function' &&\n  s.value.match('identifier') &&\n  s.value.val() === '$';\nconst isDelimiter = (s: T.SyntaxTerm) => s instanceof T.RawDelimiter;\nconst isBraces = (s: T.SyntaxTerm) =>\n  s instanceof T.RawDelimiter && s.kind === 'braces';\nconst isParens = (s: T.SyntaxTerm) =>\n  s instanceof T.RawDelimiter && s.kind === 'parens';\nconst isBrackets = (s: T.SyntaxTerm) =>\n  s instanceof T.RawDelimiter && s.kind === 'brackets';\n\ntype DelimKind = 'braces' | 'parens' | 'brackets';\n\nconst mkDelimiter = (\n  kind: DelimKind,\n  inner: List<T.SyntaxTerm>,\n  from: T.RawDelimiter,\n) => {\n  return new T.RawDelimiter({\n    kind,\n    inner: List.of(from.inner.first()).concat(inner).concat(from.inner.last()),\n  });\n};\n\nconst insertIntoDelimiter = _.cond([\n  [isBraces, (s, r) => mkDelimiter('braces', r, s)],\n  [isParens, (s, r) => mkDelimiter('parens', r, s)],\n  [isBrackets, (s, r) => mkDelimiter('brackets', r, s)],\n]);\n\nconst process = (\n  acc: { template: List<T.SyntaxTerm>, interp: List<List<T.SyntaxTerm>> },\n  s: T.SyntaxTerm,\n) => {\n  if (isBraces(s) && isDolar(acc.template.last())) {\n    let idx = Syntax.fromNumber(acc.interp.size, s.inner.first().value);\n    return {\n      template: acc.template.push(\n        mkDelimiter(\n          'braces',\n          List.of(\n            new T.RawSyntax({\n              value: idx,\n            }),\n          ),\n          s,\n        ),\n      ),\n      interp: acc.interp.push(s.inner.slice(1, s.inner.size - 1)),\n    };\n  } else if (isDelimiter(s)) {\n    let innerResult = processTemplate(\n      s.inner.slice(1, s.inner.size - 1),\n      acc.interp,\n    );\n    return {\n      template: acc.template.push(insertIntoDelimiter(s, innerResult.template)),\n      interp: innerResult.interp,\n    };\n  } else {\n    return {\n      template: acc.template.push(s),\n      interp: acc.interp,\n    };\n  }\n};\n\nfunction getLineNumber(t: T.SyntaxTerm) {\n  if (t instanceof T.RawSyntax) {\n    return t.value.lineNumber();\n  }\n  return t.inner.first().value.lineNumber();\n}\n\nfunction setLineNumber(t: T.Term | List<T.Term>, lineNumber: number) {\n  if (t instanceof T.RawSyntax) {\n    return t.extend({\n      value: t.value.setLineNumber(lineNumber),\n    });\n  } else if (t instanceof T.RawDelimiter) {\n    return t.extend({\n      inner: t.inner.map(tt => setLineNumber(tt, lineNumber)),\n    });\n  } else if (List.isList(t)) {\n    return t.map(tt => setLineNumber(tt, lineNumber));\n  }\n  // TODO: need to handle line numbers for all AST nodes\n  return t;\n}\n\nfunction cloneLineNumber(to: T.Term, from: T.SyntaxTerm) {\n  if (from && to) {\n    return setLineNumber(to, getLineNumber(from));\n  }\n  return to;\n}\n\nconst replace = (\n  acc: { template: List<T.SyntaxTerm>, rep: List<T.Term | List<T.Term>> },\n  s: T.SyntaxTerm,\n) => {\n  let last = acc.template.get(-1);\n  let beforeLast = acc.template.get(-2);\n  if (isBraces(s) && isDolar(last)) {\n    let index = s.inner.get(1).value.val();\n    assert(acc.rep.size > index, 'unknown replacement value');\n    // TODO: figure out holistic solution to line nubmers and ASI\n    let replacement = cloneLineNumber(acc.rep.get(index), beforeLast);\n    // let replacement = acc.rep.get(index);\n    return {\n      template: acc.template.pop().concat(replacement),\n      rep: acc.rep,\n    };\n  } else if (isDelimiter(s)) {\n    let innerResult = replaceTemplate(\n      s.inner.slice(1, s.inner.size - 1),\n      acc.rep,\n    );\n    return {\n      template: acc.template.push(insertIntoDelimiter(s, innerResult)),\n      rep: acc.rep,\n    };\n  } else {\n    return {\n      template: acc.template.push(s),\n      rep: acc.rep,\n    };\n  }\n};\n\nexport function processTemplate(\n  temp: List<T.SyntaxTerm>,\n  interp: List<T.SyntaxTerm> = List(),\n) {\n  return temp.reduce(process, { template: List(), interp });\n}\n\nexport function replaceTemplate(temp: List<T.SyntaxTerm>, rep: any) {\n  return temp.reduce(replace, { template: List(), rep }).template;\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/term-expander.js":"import { List } from 'immutable';\nimport { isExpressionStatement, isLiteralStringExpression } from './terms';\nimport Term, * as T from 'sweet-spec';\nimport { freshScope } from './scope';\nimport Compiler from './compiler';\nimport { ALL_PHASES } from './syntax';\nimport { Enforester } from './enforester';\nimport { processTemplate } from './template-processor';\nimport ASTDispatcher from './ast-dispatcher';\nimport ScopeReducer from './scope-reducer';\nimport { gensym } from './symbol';\nimport { VarBindingTransform } from './transforms';\nimport Syntax from './syntax';\n\nexport default class TermExpander extends ASTDispatcher {\n  constructor(context) {\n    super('expand', true);\n    this.context = context;\n  }\n\n  expand(term) {\n    return this.dispatch(term);\n  }\n\n  expandRawSyntax(term) {\n    return term;\n  }\n\n  expandRawDelimiter(term) {\n    return term;\n  }\n\n  expandTemplateExpression(term) {\n    return new T.TemplateExpression({\n      tag: term.tag == null ? null : this.expand(term.tag),\n      elements: term.elements.toArray(),\n    });\n  }\n\n  expandBreakStatement(term) {\n    return new T.BreakStatement({\n      label: term.label ? term.label.val() : null,\n    });\n  }\n\n  expandDoWhileStatement(term) {\n    return new T.DoWhileStatement({\n      body: this.expand(term.body),\n      test: this.expand(term.test),\n    });\n  }\n\n  expandWithStatement(term) {\n    return new T.WithStatement({\n      body: this.expand(term.body),\n      object: this.expand(term.object),\n    });\n  }\n\n  expandDebuggerStatement(term) {\n    return term;\n  }\n\n  expandContinueStatement(term) {\n    return new T.ContinueStatement({\n      label: term.label ? term.label.val() : null,\n    });\n  }\n\n  expandSwitchStatementWithDefault(term) {\n    return new T.SwitchStatementWithDefault({\n      discriminant: this.expand(term.discriminant),\n      preDefaultCases: term.preDefaultCases.map(c => this.expand(c)).toArray(),\n      defaultCase: this.expand(term.defaultCase),\n      postDefaultCases: term.postDefaultCases\n        .map(c => this.expand(c))\n        .toArray(),\n    });\n  }\n\n  expandComputedMemberExpression(term) {\n    return new T.ComputedMemberExpression({\n      object: this.expand(term.object),\n      expression: this.expand(term.expression),\n    });\n  }\n\n  expandSwitchStatement(term) {\n    return new T.SwitchStatement({\n      discriminant: this.expand(term.discriminant),\n      cases: term.cases.map(c => this.expand(c)).toArray(),\n    });\n  }\n\n  expandFormalParameters(term) {\n    let rest = term.rest == null ? null : this.expand(term.rest);\n    return new T.FormalParameters({\n      items: term.items.map(i => this.expand(i)),\n      rest,\n    });\n  }\n\n  expandArrowExpressionE(term) {\n    return this.doFunctionExpansion(term, 'ArrowExpression');\n  }\n\n  expandArrowExpression(term) {\n    return this.doFunctionExpansion(term, 'ArrowExpression');\n  }\n\n  expandSwitchDefault(term) {\n    return new T.SwitchDefault({\n      consequent: term.consequent.map(c => this.expand(c)).toArray(),\n    });\n  }\n\n  expandSwitchCase(term) {\n    return new T.SwitchCase({\n      test: this.expand(term.test),\n      consequent: term.consequent.map(c => this.expand(c)).toArray(),\n    });\n  }\n\n  expandForInStatement(term) {\n    return new T.ForInStatement({\n      left: this.expand(term.left),\n      right: this.expand(term.right),\n      body: this.expand(term.body),\n    });\n  }\n\n  expandTryCatchStatement(term) {\n    return new T.TryCatchStatement({\n      body: this.expand(term.body),\n      catchClause: this.expand(term.catchClause),\n    });\n  }\n\n  expandTryFinallyStatement(term) {\n    let catchClause = term.catchClause == null\n      ? null\n      : this.expand(term.catchClause);\n    return new T.TryFinallyStatement({\n      body: this.expand(term.body),\n      catchClause,\n      finalizer: this.expand(term.finalizer),\n    });\n  }\n\n  expandCatchClause(term) {\n    return new T.CatchClause({\n      binding: this.expand(term.binding),\n      body: this.expand(term.body),\n    });\n  }\n\n  expandThrowStatement(term) {\n    return new T.ThrowStatement({\n      expression: this.expand(term.expression),\n    });\n  }\n\n  expandForOfStatement(term) {\n    return new T.ForOfStatement({\n      left: this.expand(term.left),\n      right: this.expand(term.right),\n      body: this.expand(term.body),\n    });\n  }\n\n  expandBindingIdentifier(term) {\n    return term;\n  }\n\n  expandBindingPropertyIdentifier(term) {\n    return term;\n  }\n  expandBindingPropertyProperty(term) {\n    return new T.BindingPropertyProperty({\n      name: this.expand(term.name),\n      binding: this.expand(term.binding),\n    });\n  }\n\n  expandComputedPropertyName(term) {\n    return new T.ComputedPropertyName({\n      expression: this.expand(term.expression),\n    });\n  }\n\n  expandObjectBinding(term) {\n    return new T.ObjectBinding({\n      properties: term.properties.map(t => this.expand(t)).toArray(),\n    });\n  }\n\n  expandArrayBinding(term) {\n    let restElement = term.restElement == null\n      ? null\n      : this.expand(term.restElement);\n    return new T.ArrayBinding({\n      elements: term.elements\n        .map(t => t == null ? null : this.expand(t))\n        .toArray(),\n      restElement,\n    });\n  }\n\n  expandBindingWithDefault(term) {\n    return new T.BindingWithDefault({\n      binding: this.expand(term.binding),\n      init: this.expand(term.init),\n    });\n  }\n\n  expandShorthandProperty(term) {\n    // because hygiene, shorthand properties must turn into DataProperties\n    return new T.DataProperty({\n      name: new T.StaticPropertyName({\n        value: term.name,\n      }),\n      expression: new T.IdentifierExpression({\n        name: term.name,\n      }),\n    });\n  }\n\n  expandForStatement(term) {\n    let init = term.init == null ? null : this.expand(term.init);\n    let test = term.test == null ? null : this.expand(term.test);\n    let update = term.update == null ? null : this.expand(term.update);\n    let body = this.expand(term.body);\n    return new T.ForStatement({ init, test, update, body });\n  }\n\n  expandYieldExpression(term) {\n    let expr = term.expression == null ? null : this.expand(term.expression);\n    return new T.YieldExpression({\n      expression: expr,\n    });\n  }\n\n  expandYieldGeneratorExpression(term) {\n    let expr = term.expression == null ? null : this.expand(term.expression);\n    return new T.YieldGeneratorExpression({\n      expression: expr,\n    });\n  }\n\n  expandWhileStatement(term) {\n    return new T.WhileStatement({\n      test: this.expand(term.test),\n      body: this.expand(term.body),\n    });\n  }\n\n  expandIfStatement(term) {\n    let consequent = term.consequent == null\n      ? null\n      : this.expand(term.consequent);\n    let alternate = term.alternate == null ? null : this.expand(term.alternate);\n    return new T.IfStatement({\n      test: this.expand(term.test),\n      consequent: consequent,\n      alternate: alternate,\n    });\n  }\n\n  expandBlockStatement(term) {\n    return new T.BlockStatement({\n      block: this.expand(term.block),\n    });\n  }\n\n  expandBlock(term) {\n    let scope = freshScope('block');\n    this.context.currentScope.push(scope);\n    let compiler = new Compiler(\n      this.context.phase,\n      this.context.env,\n      this.context.store,\n      this.context,\n    );\n\n    let markedBody, bodyTerm;\n    markedBody = term.statements.map(b =>\n      b.reduce(\n        new ScopeReducer(\n          [{ scope, phase: ALL_PHASES, flip: false }],\n          this.context.bindings,\n        ),\n      ));\n    bodyTerm = new T.Block({\n      statements: compiler.compile(markedBody),\n    });\n    this.context.currentScope.pop();\n    return bodyTerm;\n  }\n\n  expandVariableDeclarationStatement(term) {\n    return new T.VariableDeclarationStatement({\n      declaration: this.expand(term.declaration),\n    });\n  }\n  expandReturnStatement(term) {\n    if (term.expression == null) {\n      return term;\n    }\n    return new T.ReturnStatement({\n      expression: this.expand(term.expression),\n    });\n  }\n\n  expandClassDeclaration(term) {\n    return new T.ClassDeclaration({\n      name: term.name == null ? null : this.expand(term.name),\n      super: term.super == null ? null : this.expand(term.super),\n      elements: term.elements.map(el => this.expand(el)).toArray(),\n    });\n  }\n\n  expandClassExpression(term) {\n    return new T.ClassExpression({\n      name: term.name == null ? null : this.expand(term.name),\n      super: term.super == null ? null : this.expand(term.super),\n      elements: term.elements.map(el => this.expand(el)).toArray(),\n    });\n  }\n\n  expandClassElement(term) {\n    return new T.ClassElement({\n      isStatic: term.isStatic,\n      method: this.expand(term.method),\n    });\n  }\n\n  expandThisExpression(term) {\n    return term;\n  }\n\n  expandSyntaxTemplate(term) {\n    let r = processTemplate(term.template.slice(1, term.template.size - 1));\n    let ident = this.context.getTemplateIdentifier();\n    this.context.templateMap.set(ident, r.template);\n    let name = Syntax.fromIdentifier(\n      'syntaxTemplate',\n      term.template.first().value,\n    );\n    let callee = new T.IdentifierExpression({\n      name: name,\n    });\n\n    let expandedInterps = r.interp.map(i => {\n      let enf = new Enforester(i, List(), this.context);\n      return this.expand(enf.enforest('expression'));\n    });\n\n    let args = List.of(new T.LiteralNumericExpression({ value: ident })).concat(\n      expandedInterps,\n    );\n\n    return new T.CallExpression({\n      callee,\n      arguments: args,\n    });\n  }\n\n  expandStaticMemberExpression(term) {\n    return new T.StaticMemberExpression({\n      object: this.expand(term.object),\n      property: term.property,\n    });\n  }\n\n  expandArrayExpression(term) {\n    return new T.ArrayExpression({\n      elements: term.elements.map(t => t == null ? t : this.expand(t)),\n    });\n  }\n\n  expandImport(term) {\n    return term;\n  }\n\n  expandImportNamespace(term) {\n    return term;\n  }\n\n  expandExport(term) {\n    return new T.Export({\n      declaration: this.expand(term.declaration),\n    });\n  }\n\n  expandExportDefault(term) {\n    return new T.ExportDefault({\n      body: this.expand(term.body),\n    });\n  }\n\n  expandExportFrom(term) {\n    return term;\n  }\n\n  expandExportAllFrom(term) {\n    return term;\n  }\n\n  expandExportSpecifier(term) {\n    return term;\n  }\n\n  expandStaticPropertyName(term) {\n    return term;\n  }\n\n  expandDataProperty(term) {\n    return new T.DataProperty({\n      name: this.expand(term.name),\n      expression: this.expand(term.expression),\n    });\n  }\n\n  expandObjectExpression(term) {\n    return new T.ObjectExpression({\n      properties: term.properties.map(t => this.expand(t)),\n    });\n  }\n\n  expandVariableDeclarator(term) {\n    let init = term.init == null ? null : this.expand(term.init);\n    return new T.VariableDeclarator({\n      binding: this.expand(term.binding),\n      init: init,\n    });\n  }\n\n  expandVariableDeclaration(term) {\n    if (\n      term.kind === 'syntax' ||\n      term.kind === 'syntaxrec' ||\n      term.kind === 'operator'\n    ) {\n      return term;\n    }\n    return new T.VariableDeclaration({\n      kind: term.kind,\n      declarators: term.declarators.map(d => this.expand(d)),\n    });\n  }\n\n  expandParenthesizedExpression(term) {\n    if (term.inner.size === 0) {\n      throw new Error('unexpected end of input');\n    }\n    let enf = new Enforester(term.inner, List(), this.context);\n    let lookahead = enf.peek();\n    let t = enf.enforestExpression();\n    if (t == null || enf.rest.size > 0) {\n      if (enf.rest.size === 0) {\n        throw enf.createError(')', 'unexpected token');\n      }\n      throw enf.createError(lookahead, 'unexpected syntax');\n    }\n    return this.expand(t);\n  }\n\n  expandUnaryExpression(term) {\n    return new T.UnaryExpression({\n      operator: term.operator,\n      operand: this.expand(term.operand),\n    });\n  }\n\n  expandUpdateExpression(term) {\n    return new T.UpdateExpression({\n      isPrefix: term.isPrefix,\n      operator: term.operator,\n      operand: this.expand(term.operand),\n    });\n  }\n\n  expandBinaryExpression(term) {\n    let left = this.expand(term.left);\n    let right = this.expand(term.right);\n    return new T.BinaryExpression({\n      left: left,\n      operator: term.operator,\n      right: right,\n    });\n  }\n\n  expandConditionalExpression(term) {\n    return new T.ConditionalExpression({\n      test: this.expand(term.test),\n      consequent: this.expand(term.consequent),\n      alternate: this.expand(term.alternate),\n    });\n  }\n\n  expandNewTargetExpression(term) {\n    return term;\n  }\n\n  expandNewExpression(term) {\n    let callee = this.expand(term.callee);\n    let enf = new Enforester(term.arguments, List(), this.context);\n    let args = enf.enforestArgumentList().map(arg => this.expand(arg));\n    return new T.NewExpression({\n      callee,\n      arguments: args.toArray(),\n    });\n  }\n\n  expandSuper(term) {\n    return term;\n  }\n\n  expandCallExpressionE(term) {\n    let callee = this.expand(term.callee);\n    let enf = new Enforester(term.arguments, List(), this.context);\n    let args = enf.enforestArgumentList().map(arg => this.expand(arg));\n    return new T.CallExpression({\n      callee: callee,\n      arguments: args,\n    });\n  }\n\n  expandSpreadElement(term) {\n    return new T.SpreadElement({\n      expression: this.expand(term.expression),\n    });\n  }\n\n  expandExpressionStatement(term) {\n    let child = this.expand(term.expression);\n    return new T.ExpressionStatement({\n      expression: child,\n    });\n  }\n\n  expandLabeledStatement(term) {\n    return new T.LabeledStatement({\n      label: term.label.val(),\n      body: this.expand(term.body),\n    });\n  }\n\n  doFunctionExpansion(term, type) {\n    let scope = freshScope('fun');\n    let params;\n    let self = this;\n    if (type !== 'Getter' && type !== 'Setter') {\n      // TODO: need to register the parameter bindings again\n      params = term.params.reduce(\n        new class extends Term.CloneReducer {\n          reduceBindingIdentifier(term) {\n            let name = term.name.addScope(\n              scope,\n              self.context.bindings,\n              ALL_PHASES,\n            );\n            let newBinding = gensym(name.val());\n\n            self.context.env.set(\n              newBinding.toString(),\n              new VarBindingTransform(name),\n            );\n            self.context.bindings.add(name, {\n              binding: newBinding,\n              phase: self.context.phase,\n              skipDup: true,\n            });\n            return new T.BindingIdentifier({ name });\n          }\n        }(),\n      );\n      params = this.expand(params);\n    }\n    this.context.currentScope.push(scope);\n    let compiler = new Compiler(\n      this.context.phase,\n      this.context.env,\n      this.context.store,\n      this.context,\n    );\n\n    let bodyTerm;\n    let scopeReducer = new ScopeReducer(\n      [{ scope, phase: ALL_PHASES, flip: false }],\n      this.context.bindings,\n    );\n    if (term.body instanceof Term) {\n      // Arrow functions have a single term as their body\n      bodyTerm = this.expand(term.body.reduce(scopeReducer));\n    } else {\n      let compiledBody = compiler.compile(\n        term.body.map(b => b.reduce(scopeReducer)),\n      );\n      const directives = compiledBody\n        .takeWhile(\n          s =>\n            isExpressionStatement(s) && isLiteralStringExpression(s.expression),\n        )\n        .map(s => new T.Directive({ rawValue: s.expression.value }));\n      bodyTerm = new T.FunctionBody({\n        directives: directives,\n        statements: compiledBody.slice(directives.size),\n      });\n    }\n    this.context.currentScope.pop();\n\n    switch (type) {\n      case 'Getter':\n        return new T.Getter({\n          name: this.expand(term.name),\n          body: bodyTerm,\n        });\n      case 'Setter':\n        return new T.Setter({\n          name: this.expand(term.name),\n          param: term.param,\n          body: bodyTerm,\n        });\n      case 'Method':\n        return new T.Method({\n          name: term.name,\n          isGenerator: term.isGenerator,\n          params: params,\n          body: bodyTerm,\n        });\n      case 'ArrowExpression':\n        return new T.ArrowExpression({\n          params: params,\n          body: bodyTerm,\n        });\n      case 'FunctionExpression':\n        return new T.FunctionExpression({\n          name: term.name,\n          isGenerator: term.isGenerator,\n          params: params,\n          body: bodyTerm,\n        });\n      case 'FunctionDeclaration':\n        return new T.FunctionDeclaration({\n          name: term.name,\n          isGenerator: term.isGenerator,\n          params: params,\n          body: bodyTerm,\n        });\n      default:\n        throw new Error(`Unknown function type: ${type}`);\n    }\n  }\n\n  expandMethod(term) {\n    return this.doFunctionExpansion(term, 'Method');\n  }\n\n  expandSetter(term) {\n    return this.doFunctionExpansion(term, 'Setter');\n  }\n\n  expandGetter(term) {\n    return this.doFunctionExpansion(term, 'Getter');\n  }\n\n  expandFunctionDeclarationE(term) {\n    return this.doFunctionExpansion(term, 'FunctionDeclaration');\n  }\n\n  expandFunctionExpressionE(term) {\n    return this.doFunctionExpansion(term, 'FunctionExpression');\n  }\n\n  expandCompoundAssignmentExpression(term) {\n    return new T.CompoundAssignmentExpression({\n      binding: this.expand(term.binding),\n      operator: term.operator,\n      expression: this.expand(term.expression),\n    });\n  }\n\n  expandAssignmentExpression(term) {\n    return new T.AssignmentExpression({\n      binding: this.expand(term.binding),\n      expression: this.expand(term.expression),\n    });\n  }\n\n  expandEmptyStatement(term) {\n    return term;\n  }\n\n  expandLiteralBooleanExpression(term) {\n    return term;\n  }\n\n  expandLiteralNumericExpression(term) {\n    return term;\n  }\n  expandLiteralInfinityExpression(term) {\n    return term;\n  }\n\n  expandIdentifierExpression(term) {\n    let trans = this.context.env.get(term.name.resolve(this.context.phase));\n    if (trans) {\n      return new T.IdentifierExpression({\n        name: trans.id,\n      });\n    }\n    return term;\n  }\n\n  expandLiteralNullExpression(term) {\n    return term;\n  }\n\n  expandLiteralStringExpression(term) {\n    return term;\n  }\n\n  expandLiteralRegExpExpression(term) {\n    return term;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/terms.js":"import * as R from 'ramda';\nimport Term from 'sweet-spec';\n\n// bindings\nexport const isBindingWithDefault = R.whereEq({ type: 'BindingWithDefault' });\nexport const isBindingIdentifier = R.whereEq({ type: 'BindingIdentifier' });\nexport const isArrayBinding = R.whereEq({ type: 'ArrayBinding' });\nexport const isObjectBinding = R.whereEq({ type: 'ObjectBinding' });\nexport const isBindingPropertyIdentifier = R.whereEq({\n  type: 'BindingPropertyIdentifier',\n});\nexport const isBindingPropertyProperty = R.whereEq({\n  type: 'BindingPropertyIdentifier',\n});\n\n// class\nexport const isClassExpression = R.whereEq({ type: 'ClassExpression' });\nexport const isClassDeclaration = R.whereEq({ type: 'ClassDeclaration' });\nexport const isClassElement = R.whereEq({ type: 'ClassElement' });\n\n// modules\nexport const isModule = R.whereEq({ type: 'Module' });\nexport const isImport = R.whereEq({ type: 'Import' });\nexport const isImportNamespace = R.whereEq({ type: 'ImportNamespace' });\nexport const isImportSpecifier = R.whereEq({ type: 'ImportSpecifier' });\nexport const isExportAllFrom = R.whereEq({ type: 'ExportAllFrom' });\nexport const isExportFrom = R.whereEq({ type: 'ExportFrom' });\nexport const isExport = R.whereEq({ type: 'Export' });\nexport const isExportDefault = R.whereEq({ type: 'ExportDefault' });\nexport const isExportSpecifier = R.whereEq({ type: 'ExportSpecifier' });\n\n// property definition\nexport const isMethod = R.whereEq({ type: 'Method' });\nexport const isGetter = R.whereEq({ type: 'Getter' });\nexport const isSetter = R.whereEq({ type: 'Setter' });\nexport const isDataProperty = R.whereEq({ type: 'DataProperty' });\nexport const isShorthandProperty = R.whereEq({ type: 'ShorthandProperty' });\nexport const isComputedPropertyName = R.whereEq({\n  type: 'ComputedPropertyName',\n});\nexport const isStaticPropertyName = R.whereEq({ type: 'StaticPropertyName' });\n\n// literals\nexport const isLiteralBooleanExpression = R.whereEq({\n  type: 'LiteralBooleanExpression',\n});\nexport const isLiteralInfinityExpression = R.whereEq({\n  type: 'LiteralInfinityExpression',\n});\nexport const isLiteralNullExpression = R.whereEq({\n  type: 'LiteralNullExpression',\n});\nexport const isLiteralNumericExpression = R.whereEq({\n  type: 'LiteralNumericExpression',\n});\nexport const isLiteralRegExpExpression = R.whereEq({\n  type: 'LiteralRegExpExpression',\n});\nexport const isLiteralStringExpression = R.whereEq({\n  type: 'LiteralStringExpression',\n});\n\n// expressions\nexport const isArrayExpression = R.whereEq({ type: 'ArrayExpression' });\nexport const isArrowExpression = R.whereEq({ type: 'ArrowExpression' });\nexport const isAssignmentExpression = R.whereEq({\n  type: 'AssignmentExpression',\n});\nexport const isBinaryExpression = R.whereEq({ type: 'BinaryExpression' });\nexport const isCallExpression = R.whereEq({ type: 'CallExpression' });\nexport const isComputedAssignmentExpression = R.whereEq({\n  type: 'ComputedAssignmentExpression',\n});\nexport const isComputedMemberExpression = R.whereEq({\n  type: 'ComputedMemberExpression',\n});\nexport const isConditionalExpression = R.whereEq({\n  type: 'ConditionalExpression',\n});\nexport const isFunctionExpression = R.whereEq({ type: 'FunctionExpression' });\nexport const isIdentifierExpression = R.whereEq({\n  type: 'IdentifierExpression',\n});\nexport const isNewExpression = R.whereEq({ type: 'NewExpression' });\nexport const isNewTargetExpression = R.whereEq({ type: 'NewTargetExpression' });\nexport const isObjectExpression = R.whereEq({ type: 'ObjectExpression' });\nexport const isUnaryExpression = R.whereEq({ type: 'UnaryExpression' });\nexport const isStaticMemberExpression = R.whereEq({\n  type: 'StaticMemberExpression',\n});\nexport const isTemplateExpression = R.whereEq({ type: 'TemplateExpression' });\nexport const isThisExpression = R.whereEq({ type: 'ThisExpression' });\nexport const isUpdateExpression = R.whereEq({ type: 'UpdateExpression' });\nexport const isYieldExpression = R.whereEq({ type: 'YieldExpression' });\nexport const isYieldGeneratorExpression = R.whereEq({\n  type: 'YieldGeneratorExpression',\n});\n\n// statements\nexport const isBlockStatement = R.whereEq({ type: 'BlockStatement' });\nexport const isBreakStatement = R.whereEq({ type: 'BreakStatement' });\nexport const isContinueStatement = R.whereEq({ type: 'ContinueStatement' });\nexport const isCompoundAssignmentExpression = R.whereEq({\n  type: 'CompoundAssignmentExpression',\n});\nexport const isDebuggerStatement = R.whereEq({ type: 'DebuggerStatement' });\nexport const isDoWhileStatement = R.whereEq({ type: 'DoWhileStatement' });\nexport const isEmptyStatement = R.whereEq({ type: 'EmptyStatement' });\nexport const isExpressionStatement = R.whereEq({ type: 'ExpressionStatement' });\nexport const isForInStatement = R.whereEq({ type: 'ForInStatement' });\nexport const isForOfStatement = R.whereEq({ type: 'ForOfStatement' });\nexport const isForStatement = R.whereEq({ type: 'ForStatement' });\nexport const isIfStatement = R.whereEq({ type: 'IfStatement' });\nexport const isLabeledStatement = R.whereEq({ type: 'LabeledStatement' });\nexport const isReturnStatement = R.whereEq({ type: 'ReturnStatement' });\nexport const isSwitchStatement = R.whereEq({ type: 'SwitchStatement' });\nexport const isSwitchStatementWithDefault = R.whereEq({\n  type: 'SwitchStatementWithDefault',\n});\nexport const isThrowStatement = R.whereEq({ type: 'ThrowStatement' });\nexport const isTryCatchStatement = R.whereEq({ type: 'TryCatchStatement' });\nexport const isTryFinallyStatement = R.whereEq({ type: 'TryFinallyStatement' });\nexport const isVariableDeclarationStatement = R.whereEq({\n  type: 'VariableDeclarationStatement',\n});\nexport const isWhileStatement = R.whereEq({ type: 'WhileStatement' });\nexport const isWithStatement = R.whereEq({ type: 'WithStatement' });\n\n// other\nexport const isBlock = R.whereEq({ type: 'Block' });\nexport const isCatchClause = R.whereEq({ type: 'CatchClause' });\nexport const isDirective = R.whereEq({ type: 'Directive' });\nexport const isFormalParameters = R.whereEq({ type: 'FormalParameters' });\nexport const isFunctionBody = R.whereEq({ type: 'FunctionBody' });\nexport const isFunctionDeclaration = R.whereEq({ type: 'FunctionDeclaration' });\nexport const isScript = R.whereEq({ type: 'Script' });\nexport const isSpreadElement = R.whereEq({ type: 'SpreadElement' });\nexport const isSuper = R.whereEq({ type: 'Super' });\nexport const isSwitchCase = R.whereEq({ type: 'SwitchCase' });\nexport const isSwitchDefault = R.whereEq({ type: 'SwitchDefault' });\nexport const isTemplateElement = R.whereEq({ type: 'TemplateElement' });\nexport const isSyntaxTemplate = R.whereEq({ type: 'SyntaxTemplate' });\nexport const isVariableDeclaration = R.whereEq({ type: 'VariableDeclaration' });\nexport const isVariableDeclarator = R.whereEq({ type: 'VariableDeclarator' });\nexport const isEOF = R.whereEq({ type: 'EOF' });\nexport const isSyntaxDeclaration = R.both(\n  isVariableDeclaration,\n  R.whereEq({ kind: 'syntax' }),\n);\nexport const isSyntaxrecDeclaration = R.both(\n  isVariableDeclaration,\n  R.whereEq({ kind: 'syntaxrec' }),\n);\nexport const isFunctionTerm = R.either(\n  isFunctionDeclaration,\n  isFunctionExpression,\n);\nexport const isFunctionWithName = R.and(\n  isFunctionTerm,\n  R.complement(R.where({ name: R.isNil })),\n);\nexport const isParenthesizedExpression = R.whereEq({\n  type: 'ParenthesizedExpression',\n});\nexport const isExportSyntax = R.both(isExport, exp =>\n  R.or(\n    isSyntaxDeclaration(exp.declaration),\n    isSyntaxrecDeclaration(exp.declaration),\n  ));\nexport const isSyntaxDeclarationStatement = R.both(\n  isVariableDeclarationStatement,\n  decl => isCompiletimeDeclaration(decl.declaration),\n);\n\nexport const isCompiletimeDeclaration = R.either(\n  isSyntaxDeclaration,\n  isSyntaxrecDeclaration,\n);\nexport const isCompiletimeStatement = term => {\n  return term instanceof Term &&\n    isVariableDeclarationStatement(term) &&\n    isCompiletimeDeclaration(term.declaration);\n};\nexport const isImportDeclaration = R.either(isImport, isImportNamespace);\nexport const isExportDeclaration = R.either(\n  isExport,\n  isExportDefault,\n  isExportFrom,\n  isExportAllFrom,\n);\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/token-expander.js":"// @flow\nimport Term, * as S from 'sweet-spec';\nimport { List } from 'immutable';\nimport { Enforester } from './enforester';\nimport TermExpander from './term-expander.js';\nimport Env from './env';\nimport * as _ from 'ramda';\nimport * as T from './terms';\nimport { gensym } from './symbol';\nimport { VarBindingTransform, CompiletimeTransform } from './transforms';\nimport { evalCompiletimeValue } from './load-syntax';\nimport { freshScope } from './scope';\nimport { ALL_PHASES } from './syntax';\nimport ASTDispatcher from './ast-dispatcher';\nimport Syntax from './syntax.js';\nimport ScopeReducer from './scope-reducer';\nimport ModuleVisitor, { bindImports } from './module-visitor';\n\nclass RegisterBindingsReducer extends Term.CloneReducer {\n  useScope: any;\n  phase: number;\n  bindings: any;\n  skipDup: boolean;\n  env: Env;\n\n  constructor(\n    useScope: any,\n    phase: number,\n    skipDup: boolean,\n    bindings: any,\n    env: Env,\n  ) {\n    super();\n    this.useScope = useScope;\n    this.phase = phase;\n    this.bindings = bindings;\n    this.skipDup = skipDup;\n    this.env = env;\n  }\n\n  reduceBindingIdentifier(t: Term, s: { name: Syntax }) {\n    let newName = s.name.removeScope(this.useScope, this.phase);\n    let newBinding = gensym(newName.val());\n    this.bindings.add(newName, {\n      binding: newBinding,\n      phase: this.phase,\n      skipDup: this.skipDup,\n    });\n    this.env.set(newBinding.toString(), new VarBindingTransform(newName));\n    return t.extend({\n      name: newName,\n    });\n  }\n}\n\nclass RegisterSyntaxBindingsReducer extends Term.CloneReducer {\n  useScope: any;\n  phase: number;\n  bindings: any;\n  env: Env;\n  val: any;\n\n  constructor(useScope: any, phase: number, bindings: any, env: Env, val: any) {\n    super();\n    this.useScope = useScope;\n    this.phase = phase;\n    this.bindings = bindings;\n    this.env = env;\n    this.val = val;\n  }\n\n  reduceBindingIdentifier(t: Term, s: { name: Syntax }) {\n    let newName = s.name.removeScope(this.useScope, this.phase);\n    let newBinding = gensym(newName.val());\n    this.bindings.add(newName, {\n      binding: newBinding,\n      phase: this.phase,\n      skipDup: false,\n    });\n    let resolvedName = newName.resolve(this.phase);\n    this.env.set(resolvedName, new CompiletimeTransform(this.val));\n    return t.extend({\n      name: newName,\n    });\n  }\n}\n\nexport default class TokenExpander extends ASTDispatcher {\n  constructor(context: any) {\n    super('expand', false);\n    this.context = context;\n  }\n\n  expand(stxl: List<Syntax>) {\n    let result = [];\n    if (stxl.size === 0) {\n      return List(result);\n    }\n    let prev = List();\n    let enf = new Enforester(stxl, prev, this.context);\n\n    while (!enf.done) {\n      result.push(this.dispatch(enf.enforest()));\n    }\n\n    return List(result);\n  }\n\n  expandVariableDeclarationStatement(term: S.VariableDeclarationStatement) {\n    return term.extend({\n      declaration: this.registerVariableDeclaration(term.declaration),\n    });\n  }\n\n  expandFunctionDeclaration(term: Term) {\n    return this.registerFunctionOrClass(term);\n  }\n\n  // TODO: think about function expressions\n\n  registerImport(term: S.Import | S.ImportNamespace) {\n    let path = term.moduleSpecifier.val();\n    let mod;\n    let visitor = new ModuleVisitor(this.context);\n    if (term.forSyntax) {\n      mod = this.context.loader.get(\n        path,\n        this.context.phase + 1,\n        this.context.cwd,\n      );\n      this.context.store = visitor.visit(\n        mod,\n        this.context.phase + 1,\n        this.context.store,\n      );\n      this.context.store = visitor.invoke(\n        mod,\n        this.context.phase + 1,\n        this.context.store,\n      );\n    } else {\n      mod = this.context.loader.get(path, this.context.phase, this.context.cwd);\n      this.context.store = visitor.visit(\n        mod,\n        this.context.phase,\n        this.context.store,\n      );\n    }\n    bindImports(term, mod, this.context.phase, this.context);\n    return term;\n  }\n\n  expandImport(term: S.Import) {\n    return this.registerImport(term);\n  }\n\n  expandImportNamespace(term: S.ImportNamespace) {\n    return this.registerImport(term);\n  }\n\n  expandExport(term: Term) {\n    if (\n      T.isFunctionDeclaration(term.declaration) ||\n      T.isClassDeclaration(term.declaration)\n    ) {\n      return term.extend({\n        declaration: this.registerFunctionOrClass(term.declaration),\n      });\n    } else if (T.isVariableDeclaration(term.declaration)) {\n      return term.extend({\n        declaration: this.registerVariableDeclaration(term.declaration),\n      });\n    }\n    return term;\n  }\n\n  registerFunctionOrClass(term: Term) {\n    let red = new RegisterBindingsReducer(\n      this.context.useScope,\n      this.context.phase,\n      false,\n      this.context.bindings,\n      this.context.env,\n    );\n    return term.extend({\n      name: term.name.reduce(red),\n    });\n  }\n\n  registerVariableDeclaration(term: Term) {\n    if (\n      term.kind === 'syntax' ||\n      term.kind === 'syntaxrec' ||\n      term.kind === 'operator'\n    ) {\n      return this.registerSyntaxDeclaration(term);\n    }\n    let red = new RegisterBindingsReducer(\n      this.context.useScope,\n      this.context.phase,\n      term.kind === 'var',\n      this.context.bindings,\n      this.context.env,\n    );\n    return term.extend({\n      declarators: term.declarators.map(decl => {\n        return decl.extend({\n          binding: decl.binding.reduce(red),\n        });\n      }),\n    });\n  }\n\n  registerSyntaxDeclaration(term: Term) {\n    if (term.kind === 'syntax' || term.kind === 'operator') {\n      // syntax id^{a, b} = <init>^{a, b}\n      // ->\n      // syntaxrec id^{a,b,c} = function() { return <<id^{a}>> }\n      // syntaxrec id^{a,b} = <init>^{a,b,c}\n      let scope = freshScope('nonrec');\n      let scopeReducer = new ScopeReducer(\n        [{ scope: scope, phase: ALL_PHASES, flip: false }],\n        this.context.bindings,\n      );\n      term = term.extend({\n        declarators: term.declarators.map(decl => {\n          let name = decl.binding.name;\n          let nameAdded = name.addScope(\n            scope,\n            this.context.bindings,\n            ALL_PHASES,\n          );\n          let nameRemoved = name.removeScope(\n            this.context.currentScope[this.context.currentScope.length - 1],\n            this.context.phase,\n          );\n          let newBinding = gensym(name.val());\n          this.context.bindings.addForward(\n            nameAdded,\n            nameRemoved,\n            newBinding,\n            this.context.phase,\n          );\n          return decl.extend({\n            init: decl.init.reduce(scopeReducer),\n          });\n        }),\n      });\n    }\n    // for syntax declarations we need to load the compiletime value\n    // into the environment\n    let compiletimeType = term.kind === 'operator' ? 'operator' : 'syntax';\n    return term.extend({\n      declarators: term.declarators.map(decl => {\n        // each compiletime value needs to be expanded with a fresh\n        // environment and in the next higher phase\n        let syntaxExpander = new TermExpander(\n          _.merge(this.context, {\n            phase: this.context.phase + 1,\n            env: new Env(),\n            store: this.context.store,\n          }),\n        );\n\n        let init = syntaxExpander.expand(decl.init);\n        let val = evalCompiletimeValue(\n          init,\n          _.merge(this.context, {\n            phase: this.context.phase + 1,\n          }),\n        );\n        let red = new RegisterSyntaxBindingsReducer(\n          this.context.useScope,\n          this.context.phase,\n          this.context.bindings,\n          this.context.env,\n          {\n            type: compiletimeType,\n            prec: decl.prec == null ? void 0 : decl.prec.val(),\n            assoc: decl.assoc == null ? void 0 : decl.assoc.val(),\n            f: val,\n          },\n        );\n        return decl.extend({ binding: decl.binding.reduce(red), init });\n      }),\n    });\n  }\n\n  // registerSyntaxDeclarator(term) {\n  //\n  // }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/tokens.js":"// @flow\n\nimport type { List } from 'immutable';\n\nexport type LocationInfo = {\n  filename: string,\n  position: number,\n  line: number,\n  column: number,\n};\n\nexport const TokenClass = {\n  Eof: { name: '<End>' },\n  Ident: { name: 'Identifier', isIdentifierName: true },\n  Keyword: { name: 'Keyword', isIdentifierName: true },\n  NumericLiteral: { name: 'Numeric' },\n  TemplateElement: { name: 'Template' },\n  Punctuator: { name: 'Punctuator' },\n  StringLiteral: { name: 'String' },\n  RegularExpression: { name: 'RegularExpression' },\n  Illegal: { name: 'Illegal' },\n};\n\nconst TC = TokenClass;\n\nexport const TokenType = {\n  EOS: { klass: TC.Eof, name: 'EOS' },\n  LPAREN: { klass: TC.Punctuator, name: '(' },\n  RPAREN: { klass: TC.Punctuator, name: ')' },\n  LBRACK: { klass: TC.Punctuator, name: '[' },\n  RBRACK: { klass: TC.Punctuator, name: ']' },\n  LBRACE: { klass: TC.Punctuator, name: '{' },\n  RBRACE: { klass: TC.Punctuator, name: '}' },\n  LSYNTAX: { klass: TC.Punctuator, name: 'left-syntax' },\n  RSYNTAX: { klass: TC.Punctuator, name: 'right-syntax' },\n  COLON: { klass: TC.Punctuator, name: ':' },\n  SEMICOLON: { klass: TC.Punctuator, name: ';' },\n  PERIOD: { klass: TC.Punctuator, name: '.' },\n  ELLIPSIS: { klass: TC.Punctuator, name: '...' },\n  ARROW: { klass: TC.Punctuator, name: '=>' },\n  CONDITIONAL: { klass: TC.Punctuator, name: '?' },\n  INC: { klass: TC.Punctuator, name: '++' },\n  DEC: { klass: TC.Punctuator, name: '--' },\n  ASSIGN: { klass: TC.Punctuator, name: '=' },\n  ASSIGN_BIT_OR: { klass: TC.Punctuator, name: '|=' },\n  ASSIGN_BIT_XOR: { klass: TC.Punctuator, name: '^=' },\n  ASSIGN_BIT_AND: { klass: TC.Punctuator, name: '&=' },\n  ASSIGN_SHL: { klass: TC.Punctuator, name: '<<=' },\n  ASSIGN_SHR: { klass: TC.Punctuator, name: '>>=' },\n  ASSIGN_SHR_UNSIGNED: { klass: TC.Punctuator, name: '>>>=' },\n  ASSIGN_ADD: { klass: TC.Punctuator, name: '+=' },\n  ASSIGN_SUB: { klass: TC.Punctuator, name: '-=' },\n  ASSIGN_MUL: { klass: TC.Punctuator, name: '*=' },\n  ASSIGN_DIV: { klass: TC.Punctuator, name: '/=' },\n  ASSIGN_MOD: { klass: TC.Punctuator, name: '%=' },\n  ASSIGN_EXP: { klass: TC.Punctuator, name: '**=' },\n  COMMA: { klass: TC.Punctuator, name: ',' },\n  OR: { klass: TC.Punctuator, name: '||' },\n  AND: { klass: TC.Punctuator, name: '&&' },\n  BIT_OR: { klass: TC.Punctuator, name: '|' },\n  BIT_XOR: { klass: TC.Punctuator, name: '^' },\n  BIT_AND: { klass: TC.Punctuator, name: '&' },\n  SHL: { klass: TC.Punctuator, name: '<<' },\n  SHR: { klass: TC.Punctuator, name: '>>' },\n  SHR_UNSIGNED: { klass: TC.Punctuator, name: '>>>' },\n  ADD: { klass: TC.Punctuator, name: '+' },\n  SUB: { klass: TC.Punctuator, name: '-' },\n  MUL: { klass: TC.Punctuator, name: '*' },\n  DIV: { klass: TC.Punctuator, name: '/' },\n  MOD: { klass: TC.Punctuator, name: '%' },\n  EXP: { klass: TC.Punctuator, name: '**' },\n  EQ: { klass: TC.Punctuator, name: '==' },\n  NE: { klass: TC.Punctuator, name: '!=' },\n  EQ_STRICT: { klass: TC.Punctuator, name: '===' },\n  NE_STRICT: { klass: TC.Punctuator, name: '!==' },\n  LT: { klass: TC.Punctuator, name: '<' },\n  GT: { klass: TC.Punctuator, name: '>' },\n  LTE: { klass: TC.Punctuator, name: '<=' },\n  GTE: { klass: TC.Punctuator, name: '>=' },\n  INSTANCEOF: { klass: TC.Keyword, name: 'instanceof' },\n  IN: { klass: TC.Keyword, name: 'in' },\n  NOT: { klass: TC.Punctuator, name: '!' },\n  BIT_NOT: { klass: TC.Punctuator, name: '~' },\n  AWAIT: { klass: TC.Keyword, name: 'await' },\n  DELETE: { klass: TC.Keyword, name: 'delete' },\n  TYPEOF: { klass: TC.Keyword, name: 'typeof' },\n  VOID: { klass: TC.Keyword, name: 'void' },\n  BREAK: { klass: TC.Keyword, name: 'break' },\n  CASE: { klass: TC.Keyword, name: 'case' },\n  CATCH: { klass: TC.Keyword, name: 'catch' },\n  CLASS: { klass: TC.Keyword, name: 'class' },\n  CONTINUE: { klass: TC.Keyword, name: 'continue' },\n  DEBUGGER: { klass: TC.Keyword, name: 'debugger' },\n  DEFAULT: { klass: TC.Keyword, name: 'default' },\n  DO: { klass: TC.Keyword, name: 'do' },\n  ELSE: { klass: TC.Keyword, name: 'else' },\n  EXPORT: { klass: TC.Keyword, name: 'export' },\n  EXTENDS: { klass: TC.Keyword, name: 'extends' },\n  FINALLY: { klass: TC.Keyword, name: 'finally' },\n  FOR: { klass: TC.Keyword, name: 'for' },\n  FUNCTION: { klass: TC.Keyword, name: 'function' },\n  IF: { klass: TC.Keyword, name: 'if' },\n  IMPORT: { klass: TC.Keyword, name: 'import' },\n  LET: { klass: TC.Keyword, name: 'let' },\n  NEW: { klass: TC.Keyword, name: 'new' },\n  RETURN: { klass: TC.Keyword, name: 'return' },\n  SUPER: { klass: TC.Keyword, name: 'super' },\n  SWITCH: { klass: TC.Keyword, name: 'switch' },\n  THIS: { klass: TC.Keyword, name: 'this' },\n  THROW: { klass: TC.Keyword, name: 'throw' },\n  TRY: { klass: TC.Keyword, name: 'try' },\n  VAR: { klass: TC.Keyword, name: 'var' },\n  WHILE: { klass: TC.Keyword, name: 'while' },\n  WITH: { klass: TC.Keyword, name: 'with' },\n  NULL: { klass: TC.Keyword, name: 'null' },\n  TRUE: { klass: TC.Keyword, name: 'true' },\n  FALSE: { klass: TC.Keyword, name: 'false' },\n  YIELD: { klass: TC.Keyword, name: 'yield' },\n  NUMBER: { klass: TC.NumericLiteral, name: '' },\n  STRING: { klass: TC.StringLiteral, name: '' },\n  REGEXP: { klass: TC.RegularExpression, name: '' },\n  IDENTIFIER: { klass: TC.Ident, name: '' },\n  CONST: { klass: TC.Keyword, name: 'const' },\n  TEMPLATE: { klass: TC.TemplateElement, name: '' },\n  ILLEGAL: { klass: TC.Illegal, name: '' },\n};\n\nconst TT = TokenType;\n\nexport const punctuatorTable = {\n  '(': TT.LPAREN,\n  ')': TT.RPAREN,\n  '[': TT.LBRACK,\n  ']': TT.RBRACK,\n  '{': TT.LBRACE,\n  '}': TT.RBRACE,\n  ':': TT.COLON,\n  ';': TT.SEMICOLON,\n  '.': TT.PERIOD,\n  '...': TT.ELLIPSIS,\n  '=>': TT.ARROW,\n  '?': TT.CONDITIONAL,\n  '++': TT.INC,\n  '--': TT.DEC,\n  '=': TT.ASSIGN,\n  '|=': TT.ASSIGN_BIT_OR,\n  '^=': TT.ASSIGN_BIT_XOR,\n  '&=': TT.ASSIGN_BIT_AND,\n  '<<=': TT.ASSIGN_SHL,\n  '>>=': TT.ASSIGN_SHR,\n  '>>>=': TT.ASSIGN_SHR_UNSIGNED,\n  '+=': TT.ASSIGN_ADD,\n  '-=': TT.ASSIGN_SUB,\n  '*=': TT.ASSIGN_MUL,\n  '/=': TT.ASSIGN_DIV,\n  '%=': TT.ASSIGN_MOD,\n  '**=': TT.ASSIGN_EXP,\n  ',': TT.COMMA,\n  '||': TT.OR,\n  '&&': TT.AND,\n  '|': TT.BIT_OR,\n  '&': TT.BIT_AND,\n  '^': TT.BIT_XOR,\n  '<<': TT.SHL,\n  '>>': TT.SHR,\n  '>>>': TT.SHR_UNSIGNED,\n  '+': TT.ADD,\n  '-': TT.SUB,\n  '*': TT.MUL,\n  '/': TT.DIV,\n  '%': TT.MOD,\n  '**': TT.EXP,\n  '==': TT.EQ,\n  '!=': TT.NE,\n  '===': TT.EQ_STRICT,\n  '!==': TT.NE_STRICT,\n  '<': TT.LT,\n  '>': TT.GT,\n  '<=': TT.LTE,\n  '>=': TT.GTE,\n  '!': TT.NOT,\n  '~': TT.BIT_NOT,\n};\n\nexport const keywordTable = {\n  // 'await': TT.AWAIT, TODO: uncomment when new version of shift is used\n  // TODO: add 'async'\n  break: TT.BREAK,\n  case: TT.CASE,\n  catch: TT.CATCH,\n  class: TT.CLASS,\n  const: TT.CONST,\n  continue: TT.CONTINUE,\n  delete: TT.DELETE,\n  debugger: TT.DEBUGGER,\n  default: TT.DEFAULT,\n  do: TT.DO,\n  else: TT.ELSE,\n  export: TT.EXPORT,\n  extends: TT.EXTENDS,\n  false: TT.FALSE,\n  finally: TT.FINALLY,\n  for: TT.FOR,\n  function: TT.FUNCTION,\n  if: TT.IF,\n  import: TT.IMPORT,\n  in: TT.IN,\n  instanceof: TT.INSTANCEOF,\n  let: TT.LET,\n  new: TT.NEW,\n  null: TT.NULL,\n  return: TT.RETURN,\n  super: TT.SUPER,\n  switch: TT.SWITCH,\n  this: TT.THIS,\n  throw: TT.THROW,\n  true: TT.TRUE,\n  try: TT.TRY,\n  typeof: TT.TYPEOF,\n  var: TT.VAR,\n  void: TT.VOID,\n  while: TT.WHILE,\n  with: TT.WITH,\n  yield: TT.YIELD,\n};\n\nexport const EmptyToken = {};\n\nexport type StartLocation = {\n  line: number,\n  column: number,\n  filename: string,\n  position: number,\n};\n\nexport type Slice = {\n  text: string,\n  start: number,\n  startLocation: StartLocation,\n  end: number,\n};\n\ntype TokenTypeType = {\n  klass: { name: string, isIdentifierName?: boolean },\n  name: string,\n};\n\nfunction hasType(x: any, type?: {}) {\n  if (type) {\n    return x && typeof x.type === 'object' && x.type === type;\n  }\n  return x && typeof x.type === 'object';\n}\n\nfunction hasKlass(x: any, klass?: {}) {\n  if (klass) {\n    return hasType(x) && x.type.klass === klass;\n  }\n  return hasType(x) && typeof x.type.klass === 'object';\n}\n\nclass BaseToken {\n  typeCode: number;\n  type: TokenTypeType;\n  value: ?string | ?number;\n  slice: ?Slice;\n\n  constructor(\n    {\n      typeCode,\n      type,\n      value,\n      slice,\n    }: {\n      typeCode: number,\n      type: TokenTypeType,\n      value?: string | number,\n      slice?: Slice,\n    },\n  ) {\n    this.typeCode = typeCode;\n    this.type = type;\n    this.value = value;\n    this.slice = slice;\n  }\n}\n\nexport function isString(x: any, value?: string) {\n  let r = hasType(x, TT.STRING);\n  if (value != null) {\n    return r && x.str === value;\n  }\n  return r;\n}\n\nexport class StringToken {\n  type: TokenTypeType;\n  str: string;\n  octal: ?string;\n  slice: ?Slice;\n  typeCode: number;\n  constructor(\n    { str, octal, slice }: { str: string, octal: ?string, slice?: Slice },\n  ) {\n    this.type = TT.STRING;\n    this.typeCode = TypeCodes.StringLiteral;\n    this.str = str;\n    this.octal = octal;\n    this.slice = slice;\n  }\n}\n\nexport const TypeCodes = {\n  Identifier: 0,\n  Keyword: 1,\n  Punctuator: 2,\n  NumericLiteral: 3,\n  StringLiteral: 4,\n  TemplateElement: 5,\n  Template: 6,\n  RegExp: 7,\n};\n\nexport function isIdentifier(x: any, value?: string) {\n  let r = hasType(x, TT.IDENTIFIER);\n  if (value != null) {\n    return r && x.value === value;\n  }\n  return r;\n}\n\nexport class IdentifierToken extends BaseToken {\n  constructor({ value, slice }: { value: string, slice?: Slice }) {\n    super({\n      typeCode: TypeCodes.Identifier,\n      type: TT.IDENTIFIER,\n      value,\n      slice,\n    });\n  }\n}\n\nexport function isKeyword(x: any, value?: string | string[]) {\n  let r = hasKlass(x, TC.Keyword);\n  if (value != null) {\n    if (typeof value === 'string') {\n      return r && x.value === value;\n    } else if (typeof value.some === 'function') {\n      return value.some(v => v === x.value);\n    }\n  }\n  return r;\n}\n\nexport class KeywordToken extends BaseToken {\n  constructor({ value, slice }: { value: string, slice?: Slice }) {\n    super({\n      typeCode: TypeCodes.Keyword,\n      type: keywordTable[value],\n      value,\n      slice,\n    });\n  }\n}\n\nexport function isPunctuator(x: any, value?: string) {\n  let r = hasKlass(x, TC.Punctuator);\n  if (value != null) {\n    return r && x.value === value;\n  }\n  return r;\n}\nexport class PunctuatorToken extends BaseToken {\n  constructor({ value, slice }: { value: string, slice?: Slice }) {\n    super({\n      typeCode: TypeCodes.Punctuator,\n      type: punctuatorTable[value],\n      value,\n      slice,\n    });\n  }\n}\n\nexport function isNumeric(x: any, value?: number) {\n  let r = hasType(x, TT.NUMBER);\n  if (value != null) {\n    return r && x.value === value;\n  }\n  return r;\n}\nexport class NumericToken extends BaseToken {\n  octal: boolean;\n  noctal: boolean;\n\n  constructor(\n    {\n      value,\n      octal = false,\n      noctal = false,\n      slice,\n    }: { value: number, octal?: boolean, noctal?: boolean, slice?: Slice },\n  ) {\n    super({\n      typeCode: TypeCodes.NumericLiteral,\n      type: TT.NUMBER,\n      value,\n      slice,\n    });\n    this.octal = octal;\n    this.noctal = noctal;\n  }\n}\n\nexport function isTemplateElement(x: any, value?: string) {\n  let r = hasType(x, TT.TEMPLATE) && x.items == null;\n  if (value != null) {\n    return r && x.value === value;\n  }\n  return r;\n}\n\nexport class TemplateElementToken extends BaseToken {\n  tail: boolean;\n  interp: boolean;\n\n  constructor(\n    {\n      value,\n      tail,\n      interp,\n      slice,\n    }: { value: string, tail: boolean, interp: boolean, slice?: Slice },\n  ) {\n    super({\n      type: TT.TEMPLATE,\n      typeCode: TypeCodes.TemplateElement,\n      value,\n      slice,\n    });\n    this.tail = tail;\n    this.interp = interp;\n  }\n}\n\nexport function isTemplate(x: any) {\n  return hasType(x, TT.TEMPLATE) && x.items != null;\n}\nexport class TemplateToken extends BaseToken {\n  items: List<Token>;\n\n  constructor({ items, slice }: { items: List<Token>, slice?: Slice }) {\n    super({ type: TT.TEMPLATE, typeCode: TypeCodes.Template, slice });\n    this.items = items;\n  }\n}\n\nexport function isRegExp(x: any, value?: string) {\n  let r = hasType(x, TT.REGEXP);\n  if (value != null) {\n    return r && x.value === value;\n  }\n  return r;\n}\nexport class RegExpToken extends BaseToken {\n  constructor({ value, slice }: { value: string, slice?: Slice }) {\n    super({ type: TT.REGEXP, typeCode: TypeCodes.RegExp, value, slice });\n  }\n}\n\nconst isDelimiterType = (x, type) => {\n  if (x && x[Symbol.iterator] && ([x] = x)) {\n    return x && hasType(x, type);\n  }\n  return false;\n};\n\nexport const isParens = (x: any) => isDelimiterType(x, TT.LPAREN);\nexport const isBraces = (x: any) => isDelimiterType(x, TT.LBRACE);\nexport const isBrackets = (x: any) => isDelimiterType(x, TT.LBRACK);\nexport const isSyntaxTemplate = (x: any) => isDelimiterType(x, TT.LSYNTAX);\n\nexport const isDelimiter = (x: any) =>\n  isParens(x) || isBraces(x) || isBrackets(x) || isSyntaxTemplate(x);\n\nexport function getKind(x: List<TokenTree>) {\n  return isParens(x)\n    ? 'parens'\n    : isBraces(x)\n        ? 'braces'\n        : isBrackets(x)\n            ? 'brackets'\n            : isSyntaxTemplate(x) ? 'syntaxTemplate' : '';\n}\n\nexport function getLineNumber(t: any) {\n  if (t.slice && t.slice.startLocation) {\n    return t.slice.startLocation.line;\n  } else if (t[Symbol.iterator] && ([t] = t)) {\n    return getLineNumber(t);\n  }\n  return null;\n}\n\nexport type Token =\n  | StringToken\n  | IdentifierToken\n  | KeywordToken\n  | PunctuatorToken\n  | NumericToken\n  | TemplateElementToken\n  | TemplateToken\n  | RegExpToken;\nexport type TokenTree = Token | List<TokenTree>;\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/src/transforms.js":"// @flow\nimport SweetModule from './sweet-module';\nimport Syntax from './syntax';\n\nexport class FunctionDeclTransform {}\nexport class VariableDeclTransform {}\nexport class NewTransform {}\nexport class ThrowTransform {}\nexport class LetDeclTransform {}\nexport class ConstDeclTransform {}\nexport class TryTransform {}\nexport class WhileTransform {}\nexport class IfTransform {}\nexport class ForTransform {}\nexport class SwitchTransform {}\nexport class BreakTransform {}\nexport class ContinueTransform {}\nexport class DoTransform {}\nexport class WithTransform {}\nexport class ImportTransform {}\nexport class ExportTransform {}\nexport class SuperTransform {}\nexport class YieldTransform {}\nexport class ThisTransform {}\nexport class ClassTransform {}\nexport class DefaultTransform {}\nexport class DebuggerTransform {}\nexport class SyntaxrecDeclTransform {}\nexport class SyntaxDeclTransform {}\nexport class OperatorDeclTransform {}\nexport class ReturnStatementTransform {}\nexport class ModuleNamespaceTransform {\n  namespace: Syntax;\n  mod: SweetModule;\n\n  constructor(namespace: Syntax, mod: SweetModule) {\n    this.namespace = namespace;\n    this.mod = mod;\n  }\n}\nexport class VarBindingTransform {\n  id: Syntax;\n\n  constructor(id: Syntax) {\n    this.id = id;\n  }\n}\nexport class CompiletimeTransform {\n  value: any;\n\n  constructor(value: any) {\n    this.value = value;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sweet.js/node_modules/sweet.js/webpack.config.js":"module.exports = {\n\tentry: './build/src/browser-sweet.js',\n\toutput: {\n\t\tpath: __dirname + '/browser/scripts',\n\t\tlibrary: \"sweet\",\n\t\tlibraryTarget: 'amd',\n\t\tfilename: 'sweet.js'\n\t}\n};"}